<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for git-for-windows -- git</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/git-for-windows/git.rss</link>
    <description>The latest CVEs for git-for-windows -- git</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 17:22:38 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-22743|2024-08-02T10:20:30.039Z -- git-for-windows -- git
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-22743</link>
      <description>Git for Windows is the Windows port of the revision control system Git. Prior to Git for Windows version 2.39.2, by carefully crafting DLL and putting into a subdirectory of a specific name living next to the Git for Windows installer, Windows can be tricked into side-loading said DLL. This potentially allows users with local write access to place malicious payloads in a location where automated upgrades might run the Git for Windows installer with elevation. Version 2.39.2 contains a patch for this issue. Some workarounds are available. Never leave untrusted files in the Downloads folder or its sub-folders before executing the Git for Windows installer, or move the installer into a different directory before executing it.</description>
      <guid isPermaLink="false">CVE-2023-22743|2024-08-02T10:20:30.039Z</guid>
      <pubDate>Tue, 14 Feb 2023 20:39:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-29011|2024-08-02T14:00:14.373Z -- git-for-windows -- git
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-29011</link>
      <description>Git for Windows, the Windows port of Git, ships with an executable called `connect.exe`, which implements a SOCKS5 proxy that can be used to connect e.g. to SSH servers via proxies when certain ports are blocked for outgoing connections. The location of `connect.exe`'s config file is hard-coded as `/etc/connectrc` which will typically be interpreted as `C:\etc\connectrc`. Since `C:\etc` can be created by any authenticated user, this makes `connect.exe` susceptible to malicious files being placed there by other users on the same multi-user machine. The problem has been patched in Git for Windows v2.40.1. As a workaround, create the folder `etc` on all drives where Git commands are run, and remove read/write access from those folders. Alternatively, watch out for malicious `&lt;drive&gt;:\etc\connectrc` files on multi-user machines.</description>
      <guid isPermaLink="false">CVE-2023-29011|2024-08-02T14:00:14.373Z</guid>
      <pubDate>Tue, 25 Apr 2023 20:40:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-23618|2024-08-02T10:35:33.594Z -- git-for-windows -- git
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-23618</link>
      <description>Git for Windows is the Windows port of the revision control system Git. Prior to Git for Windows version 2.39.2, when `gitk` is run on Windows, it potentially runs executables from the current directory inadvertently, which can be exploited with some social engineering to trick users into running untrusted code. A patch is available in version 2.39.2. As a workaround, avoid using `gitk` (or Git GUI's "Visualize History" functionality) in clones of untrusted repositories.
</description>
      <guid isPermaLink="false">CVE-2023-23618|2024-08-02T10:35:33.594Z</guid>
      <pubDate>Tue, 14 Feb 2023 20:38:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-29012|2024-08-02T14:00:14.358Z -- git-for-windows -- git
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-29012</link>
      <description>Git for Windows is the Windows port of Git. Prior to version 2.40.1, any user of Git CMD who starts the command in an untrusted directory is impacted by an Uncontrolles Search Path Element vulnerability. Maliciously-placed `doskey.exe` would be executed silently upon running Git CMD. The problem has been patched in Git for Windows v2.40.1. As a workaround, avoid using Git CMD or, if using Git CMD, avoid starting it in an untrusted directory.</description>
      <guid isPermaLink="false">CVE-2023-29012|2024-08-02T14:00:14.358Z</guid>
      <pubDate>Tue, 25 Apr 2023 20:44:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-25815|2024-08-02T11:32:12.304Z -- git-for-windows -- git
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-25815</link>
      <description>In Git for Windows, the Windows port of Git, no localized messages are shipped with the installer. As a consequence, Git is expected not to localize messages at all, and skips the gettext initialization. However, due to a change in MINGW-packages, the `gettext()` function's implicit initialization no longer uses the runtime prefix but uses the hard-coded path `C:\mingw64\share\locale` to look for localized messages. And since any authenticated user has the permission to create folders in `C:\` (and since `C:\mingw64` does not typically exist), it is possible for low-privilege users to place fake messages in that location where `git.exe` will pick them up in version 2.40.1.

This vulnerability is relatively hard to exploit and requires social engineering. For example, a legitimate message at the end of a clone could be maliciously modified to ask the user to direct their web browser to a malicious website, and the user might think that the message comes from Git and is legitimate. It does require local write access by the attacker, though, which makes this attack vector less likely. Version 2.40.1 contains a patch for this issue. Some workarounds are available. Do not work on a Windows machine with shared accounts, or alternatively create a `C:\mingw64` folder and leave it empty. Users who have administrative rights may remove the permission to create folders in `C:\`.</description>
      <guid isPermaLink="false">CVE-2023-25815|2024-08-02T11:32:12.304Z</guid>
      <pubDate>Tue, 25 Apr 2023 19:51:38 +0000</pubDate>
    </item>
  </channel>
</rss>
