<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for wireapp -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/wireapp/all.rss</link>
    <description>The latest CVEs for wireapp -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 11:20:18 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-31122|2024-08-03T07:11:39.209Z -- wireapp -- wire-server
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-31122</link>
      <description>Wire is an encrypted communication and collaboration platform. Versions prior to 2022-07-12/Chart 4.19.0 are subject to Token Recipient Confusion. If an attacker has certain details of SAML IdP metadata, and configures their own SAML on the same backend, the attacker can delete all SAML authenticated accounts of a targeted team, Authenticate as a user of the attacked team and create arbitrary accounts in the context of the team if it is not managed by SCIM. This issue is fixed in wire-server 2022-07-12 and is already deployed on all Wire managed services. On-premise instances of wire-server need to be updated to 2022-07-12/Chart 4.19.0, so that their backends are no longer affected. As a workaround, the risk of an attack can be reduced by disabling SAML configuration for teams (galley.config.settings.featureFlags.sso). Helm overrides are located in `values/wire-server/values.yaml` Note that the ability to configure SAML SSO as a team is disabled by default for on-premise installations.</description>
      <guid isPermaLink="false">CVE-2022-31122|2024-08-03T07:11:39.209Z</guid>
      <pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-31009|2024-08-03T07:03:40.199Z -- wireapp -- wire-ios
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-31009</link>
      <description>wire-ios is an iOS client for the Wire secure messaging application. Invalid accent colors of Wire communication partners may render the iOS Wire Client partially unusable by causing it to crash multiple times on launch. These invalid accent colors can be used by and sent between Wire users. The root cause was an unnecessary assert statement when converting an integer value into the corresponding enum value, causing an exception instead of a fallback to a default value. This issue is fixed in [wire-ios](https://github.com/wireapp/wire-ios/commit/caa0e27dbe51f9edfda8c7a9f017d93b8cfddefb) and in Wire for iOS 3.100. There is no workaround available, but users may use other Wire clients (such as the [web app](https://app.wire.com)) to continue using Wire, or upgrade their client.</description>
      <guid isPermaLink="false">CVE-2022-31009|2024-08-03T07:03:40.199Z</guid>
      <pubDate>Thu, 23 Jun 2022 06:40:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-24799|2024-08-03T04:20:50.462Z -- wireapp -- wire-webapp
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-24799</link>
      <description>wire-webapp is the web application interface for the wire messaging service. Insufficient escaping in markdown “code highlighting” in the wire-webapp resulted in the possibility of injecting and executing arbitrary HTML code and thus also JavaScript. If a user receives and views such a malicious message, arbitrary code is injected and executed in the context of the victim. This allows the attacker to fully control the user account. Wire-desktop clients that are connected to a vulnerable wire-webapp version are also vulnerable to this attack. The issue has been fixed in wire-webapp 2022-03-30-production.0 and is already deployed on all Wire managed services. On-premise instances of wire-webapp need to be updated to docker tag 2022-03-30-production.0-v0.29.2-0-d144552 or wire-server 2022-03-30 (chart/4.8.0), so that their applications are no longer affected. There are no known workarounds for this issue. ### Patches * The issue has been fixed in wire-webapp **2022-03-30-production.0** and is already deployed on all Wire managed services. * On-premise instances of wire-webapp need to be updated to docker tag **2022-03-30-production.0-v0.29.2-0-d144552** or wire-server **2022-03-30 (chart/4.8.0)**, so that their applications are no longer affected. ### Workarounds * No workarounds known ### For more information If you have any questions or comments about this advisory feel free to email us at [vulnerability-report@wire.com](mailto:vulnerability-report@wire.com) ### Credits We thank [Posix](https://twitter.com/po6ix) for reporting this vulnerability</description>
      <guid isPermaLink="false">CVE-2022-24799|2024-08-03T04:20:50.462Z</guid>
      <pubDate>Wed, 20 Apr 2022 17:55:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-23625|2024-08-03T03:51:45.474Z -- wireapp -- wire-ios
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23625</link>
      <description>Wire-ios is a messaging application using the wire protocol on apple's ios platform. In versions prior to 3.95 malformed resource identifiers may render the iOS Wire Client completely unusable by causing it to repeatedly crash on launch. These malformed resource identifiers can be generated and sent between Wire users. The root cause lies in [wireapp/wire-ios-transport](https://github.com/wireapp/wire-ios-transport), where code responsible for removing sensible tokens before logging may fail and lead to a crash (Swift exception) of the application. This causes undesirable behavior, however the (greater) Wire system is still functional. Users are advised to upgrade as soon as possible. There are no known workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2022-23625|2024-08-03T03:51:45.474Z</guid>
      <pubDate>Fri, 11 Mar 2022 18:00:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-23610|2024-08-03T03:43:46.981Z -- wireapp -- wire-server
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23610</link>
      <description>wire-server provides back end services for Wire, an open source messenger. In versions of wire-server prior to the 2022-01-27 release, it was possible to craft DSA Signatures to bypass SAML SSO and impersonate any Wire user with SAML credentials. In teams with SAML, but without SCIM, it was possible to create new accounts with fake SAML credentials. Under certain conditions that can be established by an attacker, an upstream library for parsing, rendering, signing, and validating SAML XML data was accepting public keys as trusted that were provided by the attacker in the signature. As a consequence, the attacker could login as any user in any Wire team with SAML SSO enabled. If SCIM was not enabled, the attacker could also create new users with new SAML NameIDs. In order to exploit this vulnerability, the attacker needs to know the SSO login code (distributed to all team members with SAML credentials and visible in the Team Management app), the SAML EntityID identifying the IdP (a URL not considered sensitive, but usually hard to guess, also visible in Team Management), and the SAML NameID of the user (usually an email address or a nick). The issue has been fixed in wire-server `2022-01-27` and is already deployed on all Wire managed services. On premise instances of wire-server need to be updated to `2022-01-27`, so that their backends are no longer affected. There are currently no known workarounds. More detailed information about how to reproduce the vulnerability and mitigation strategies is available in the GitHub Security Advisory.</description>
      <guid isPermaLink="false">CVE-2022-23610|2024-08-03T03:43:46.981Z</guid>
      <pubDate>Wed, 16 Mar 2022 17:40:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-29168|2024-08-03T06:17:54.056Z -- wireapp -- wire-webapp
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-29168</link>
      <description>Wire is a secure messaging application. Wire is vulnerable to arbitrary HTML and Javascript execution via insufficient escaping when rendering `@mentions` in the wire-webapp. If a user receives and views a malicious message, arbitrary code is injected and executed in the context of the victim allowing the attacker to fully control the user account. Wire-desktop clients that are connected to a vulnerable wire-webapp version are also vulnerable to this attack. The issue has been fixed in wire-webapp 2022-05-04-production.0 and is already deployed on all Wire managed services. On-premise instances of wire-webapp need to be updated to docker tag 2022-05-04-production.0-v0.29.7-0-a6f2ded or wire-server 2022-05-04 (chart/4.11.0) or later. No known workarounds exist.</description>
      <guid isPermaLink="false">CVE-2022-29168|2024-08-03T06:17:54.056Z</guid>
      <pubDate>Sat, 25 Jun 2022 07:05:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-23605|2024-08-03T03:43:46.973Z -- wireapp -- wire-webapp
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23605</link>
      <description>Wire webapp is a web client for the wire messaging protocol. In versions prior to 2022-01-27-production.0 expired ephemeral messages were not reliably removed from local chat history of Wire Webapp. In versions before 2022-01-27-production.0 ephemeral messages and assets might still be accessible through the local search functionality. Any attempt to view one of these message in the chat view will then trigger the deletion. This issue only affects locally stored messages. On premise instances of wire-webapp need to be updated to 2022-01-27-production.0, so that their users are no longer affected. There are no known workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2022-23605|2024-08-03T03:43:46.973Z</guid>
      <pubDate>Fri, 04 Feb 2022 22:32:05 +0000</pubDate>
    </item>
  </channel>
</rss>
