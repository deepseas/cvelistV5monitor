<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for wireapp -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/wireapp/all.rss</link>
    <description>The latest CVEs for wireapp -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 03:23:13 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-41094|2024-08-04T02:59:31.399Z -- wireapp -- wire-ios
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-41094</link>
      <description>Wire is an open source secure messenger. Users of Wire by Bund may bypass the mandatory encryption at rest feature by simply disabling their device passcode. Upon launching, the app will attempt to enable encryption at rest by generating encryption keys via the Secure Enclave, however it will fail silently if no device passcode is set. The user has no indication that encryption at rest is not active since the feature is hidden to them. This issue has been resolved in version 3.70</description>
      <guid isPermaLink="false">CVE-2021-41094|2024-08-04T02:59:31.399Z</guid>
      <pubDate>Mon, 04 Oct 2021 18:20:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-41100|2024-08-04T02:59:31.522Z -- wireapp -- wire-server
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-41100</link>
      <description>Wire-server is the backing server for the open source wire secure messaging application. In affected versions it is possible to trigger email address change of a user with only the short-lived session token in the `Authorization` header. As the short-lived token is only meant as means of authentication by the client for less critical requests to the backend, the ability to change the email address with a short-lived token constitutes a privilege escalation attack. Since the attacker can change the password after setting the email address to one that they control, changing the email address can result in an account takeover by the attacker. Short-lived tokens can be requested from the backend by Wire clients using the long lived tokens, after which the long lived tokens can be stored securely, for example on the devices key chain. The short lived tokens can then be used to authenticate the client towards the backend for frequently performed actions such as sending and receiving messages. While short-lived tokens should not be available to an attacker per-se, they are used more often and in the shape of an HTTP header, increasing the risk of exposure to an attacker relative to the long-lived tokens, which are stored and transmitted in cookies. If you are running an on-prem instance and provision all users with SCIM, you are not affected by this issue (changing email is blocked for SCIM users). SAML single-sign-on is unaffected by this issue, and behaves identically before and after this update. The reason is that the email address used as SAML NameID is stored in a different location in the databse from the one used to contact the user outside wire. Version 2021-08-16 and later provide a new end-point that requires both the long-lived client cookie and `Authorization` header. The old end-point has been removed. If you are running an on-prem instance with at least some of the users invited or provisioned via SAML SSO and you cannot update then you can block `/self/email` on nginz (or in any other proxies or firewalls you may have set up). You don't need to discriminate by verb: `/self/email` only accepts `PUT` and `DELETE`, and `DELETE` is almost never used.</description>
      <guid isPermaLink="false">CVE-2021-41100|2024-08-04T02:59:31.522Z</guid>
      <pubDate>Mon, 04 Oct 2021 18:25:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-41093|2024-08-04T02:59:31.525Z -- wireapp -- wire-ios
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-41093</link>
      <description>Wire is an open source secure messenger. In affected versions if the an attacker gets an old but valid access token they can take over an account by changing the email. This issue has been resolved in version 3.86 which uses a new endpoint which additionally requires an authentication cookie. See wire-ios-sync-engine and wire-ios-transport references. This is the root advisory that pulls the changes together.</description>
      <guid isPermaLink="false">CVE-2021-41093|2024-08-04T02:59:31.525Z</guid>
      <pubDate>Mon, 04 Oct 2021 18:15:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-41119|2024-08-04T02:59:31.626Z -- wireapp -- wire-server
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-41119</link>
      <description>Wire-server is the system server for the wire back-end services. Releases prior to v2022-03-01 are subject to a denial of service attack via a crafted object causing a hash collision. This collision causes the server to spend at least quadratic time parsing it which can lead to a denial of service for a heavily used server. The issue has been fixed in wire-server 2022-03-01 and is already deployed on all Wire managed services. On premise instances of wire-server need to be updated to 2022-03-01, so that their backends are no longer affected. There are no known workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2021-41119|2024-08-04T02:59:31.626Z</guid>
      <pubDate>Wed, 13 Apr 2022 18:25:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-41101|2024-08-04T02:59:31.532Z -- wireapp -- wire-server
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-41101</link>
      <description>wire-server is an open-source back end for Wire, a secure collaboration platform. Before version 2.106.0, the CORS ` Access-Control-Allow-Origin ` header set by `nginz` is set for all subdomains of `.wire.com` (including `wire.com`). This means that if somebody were to find an XSS vector in any of the subdomains, they could use it to talk to the Wire API using the user's Cookie. A patch does not exist, but a workaround does. To make sure that a compromise of one subdomain does not yield access to the cookie of another, one may limit the `Access-Control-Allow-Origin` header to apps that actually require the cookie (account-pages, team-settings and the webapp).</description>
      <guid isPermaLink="false">CVE-2021-41101|2024-08-04T02:59:31.532Z</guid>
      <pubDate>Thu, 30 Sep 2021 19:20:09 +0000</pubDate>
    </item>
  </channel>
</rss>
