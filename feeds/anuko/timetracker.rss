<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for anuko -- timetracker</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/anuko/timetracker.rss</link>
    <description>The latest CVEs for anuko -- timetracker</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 04:24:21 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-41139|2024-08-04T02:59:31.435Z -- anuko -- timetracker
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-41139</link>
      <description>Anuko Time Tracker is an open source, web-based time tracking application written in PHP. When a logged on user selects a date in Time Tracker, it is being passed on via the date parameter in URI. Because of not checking this parameter for sanity in versions prior to 1.19.30.5600, it was possible to craft the URI with malicious JavaScript, use social engineering to convince logged on user to click on such link, and have the attacker-supplied JavaScript to be executed in user's browser. This issue is patched in version 1.19.30.5600. As a workaround, one may introduce `ttValidDbDateFormatDate` function as in the latest version and add a call to it within the access checks block in time.php.</description>
      <guid isPermaLink="false">CVE-2021-41139|2024-08-04T02:59:31.435Z</guid>
      <pubDate>Wed, 13 Oct 2021 17:10:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-41156|2024-08-04T02:59:31.630Z -- anuko -- timetracker
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-41156</link>
      <description>anuko/timetracker is an, open source time tracking system. In affected versions Time Tracker uses browser_today hidden control on a few pages to collect the today's date from user browsers. Because of not checking this parameter for sanity in versions prior to 1.19.30.5601, it was possible to craft an html form with malicious JavaScript, use social engineering to convince logged on users to execute a POST from such form, and have the attacker-supplied JavaScript to be executed in user's browser. This has been patched in version 1.19.30.5600. Upgrade is recommended. If it is not practical, introduce ttValidDbDateFormatDate function as in the latest version and add a call to it within the access checks block.</description>
      <guid isPermaLink="false">CVE-2021-41156|2024-08-04T02:59:31.630Z</guid>
      <pubDate>Mon, 18 Oct 2021 21:10:10 +0000</pubDate>
    </item>
  </channel>
</rss>
