<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Unknown -- Welcart e-Commerce</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/unknown/welcart%20e-commerce.rss</link>
    <description>The latest CVEs for Unknown -- Welcart e-Commerce</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 20:23:17 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-5952|2024-08-02T08:14:25.117Z -- unknown -- welcart%20e-commerce
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-5952</link>
      <description>The Welcart e-Commerce WordPress plugin before 2.9.5 unserializes user input from cookies, which could allow unautehtniacted users to perform PHP Object Injection when a suitable gadget is present on the blog</description>
      <guid isPermaLink="false">CVE-2023-5952|2024-08-02T08:14:25.117Z</guid>
      <pubDate>Mon, 04 Dec 2023 21:27:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-5953|2024-08-02T08:14:25.121Z -- unknown -- welcart%20e-commerce
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-5953</link>
      <description>The Welcart e-Commerce WordPress plugin before 2.9.5 does not validate files to be uploaded, as well as does not have authorisation and CSRF in an AJAX action handling such upload. As a result, any authenticated users, such as subscriber could upload arbitrary files, such as PHP on the server</description>
      <guid isPermaLink="false">CVE-2023-5953|2024-08-02T08:14:25.121Z</guid>
      <pubDate>Mon, 04 Dec 2023 21:28:03 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-5951|2024-08-02T08:14:25.141Z -- unknown -- welcart%20e-commerce
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-5951</link>
      <description>The Welcart e-Commerce WordPress plugin before 2.9.5 does not sanitise and escape a parameter before outputting it back in the page, leading to a Reflected Cross-Site Scripting which could be used against high privilege users such as admin</description>
      <guid isPermaLink="false">CVE-2023-5951|2024-08-02T08:14:25.141Z</guid>
      <pubDate>Mon, 04 Dec 2023 21:28:42 +0000</pubDate>
    </item>
  </channel>
</rss>
