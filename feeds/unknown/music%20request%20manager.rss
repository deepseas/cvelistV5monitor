<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Unknown -- Music Request Manager</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/unknown/music%20request%20manager.rss</link>
    <description>The latest CVEs for Unknown -- Music Request Manager</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 12 Sep 2024 06:24:50 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-6018|2024-09-12T06:00:03.607Z -- unknown -- music%20request%20manager
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6018</link>
      <description>The Music Request Manager WordPress plugin through 1.3 does not escape the $_SERVER['REQUEST_URI'] parameter before outputting it back in an attribute, which could lead to Reflected Cross-Site Scripting in old web browsers</description>
      <guid isPermaLink="false">CVE-2024-6018|2024-09-12T06:00:03.607Z</guid>
      <pubDate>Thu, 12 Sep 2024 06:00:03 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6019|2024-09-12T06:00:03.903Z -- unknown -- music%20request%20manager
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6019</link>
      <description>The Music Request Manager WordPress plugin through 1.3 does not sanitise and escape incoming music requests, which could allow unauthenticated users to perform Cross-Site Scripting attacks against administrators</description>
      <guid isPermaLink="false">CVE-2024-6019|2024-09-12T06:00:03.903Z</guid>
      <pubDate>Thu, 12 Sep 2024 06:00:03 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6017|2024-09-12T06:00:03.280Z -- unknown -- music%20request%20manager
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6017</link>
      <description>The Music Request Manager WordPress plugin through 1.3 does not have CSRF check in some places, and is missing sanitisation as well as escaping, which could allow attackers to make logged in admin add Stored XSS payloads via a CSRF attack</description>
      <guid isPermaLink="false">CVE-2024-6017|2024-09-12T06:00:03.280Z</guid>
      <pubDate>Thu, 12 Sep 2024 06:00:03 +0000</pubDate>
    </item>
  </channel>
</rss>
