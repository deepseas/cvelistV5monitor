<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Internet Computer -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/internet%20computer/all.rss</link>
    <description>The latest CVEs for Internet Computer -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 05 Sep 2024 14:22:53 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-7884|2024-09-05T13:01:20.585Z -- internet%20computer -- ic-cdk
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-7884</link>
      <description>When a canister method is called via ic_cdk::call* , a new Future CallFuture is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called CallFutureState.  A bug in the polling implementation of the CallFuture allows multiple references to be held for this internal state and not all references were dropped before the Future is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. 
Impact Canisters built in Rust with ic_cdk and ic_cdk_timers are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. In the worst case, this could lead to heap memory exhaustion triggered by an attacker. Motoko based canisters are not affected by the bug.
PatchesThe patch has been backported to all minor versions between &gt;= 0.8.0, &lt;= 0.15.0. The patched versions available are 0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1 and their previous versions have been yanked. WorkaroundsThere are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of ic_cdk to avoid running out of Wasm heap memory. 
Upgrading the canisters (without updating `ic_cdk`) also frees the leaked memory but it's only a temporary solution.</description>
      <guid isPermaLink="false">CVE-2024-7884|2024-09-05T13:01:20.585Z</guid>
      <pubDate>Thu, 05 Sep 2024 13:01:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4435|2024-08-01T20:40:47.180Z -- internet%20computer -- ic-stable-structures</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4435</link>
      <description>When storing unbounded types in a BTreeMap, a node is represented as a linked list of "memory chunks". It was discovered recently that when we deallocate a node, in some cases only the first memory chunk is deallocated, and the rest of the memory chunks remain (incorrectly) allocated, causing a memory leak. In the worst case, depending on how a canister uses the BTreeMap, an adversary could interact with the canister through its API and trigger interactions with the map that keep consuming memory due to the memory leak. This could potentially lead to using an excessive amount of memory, or even running out of memory.

This issue has been fixed in  #212 https://github.com/dfinity/stable-structures/pull/212  by changing the logic for deallocating nodes to ensure that all of a node's memory chunks are deallocated and users are asked to upgrade to version 0.6.4.. Tests have been added to prevent regressions of this nature moving forward. Note: Users of stable-structure &lt; 0.6.0 are not affected.

Users who are not storing unbounded types in BTreeMap are not affected and do not need to upgrade. Otherwise, an upgrade to version 0.6.4 is necessary.</description>
      <guid isPermaLink="false">CVE-2024-4435|2024-08-01T20:40:47.180Z</guid>
      <pubDate>Tue, 21 May 2024 09:41:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4435|2024-06-04T17:53:57.433Z -- internet%20computer -- ic-stable-structures</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4435</link>
      <description>When storing unbounded types in a BTreeMap, a node is represented as a linked list of "memory chunks". It was discovered recently that when we deallocate a node, in some cases only the first memory chunk is deallocated, and the rest of the memory chunks remain (incorrectly) allocated, causing a memory leak. In the worst case, depending on how a canister uses the BTreeMap, an adversary could interact with the canister through its API and trigger interactions with the map that keep consuming memory due to the memory leak. This could potentially lead to using an excessive amount of memory, or even running out of memory.

This issue has been fixed in  #212 https://github.com/dfinity/stable-structures/pull/212  by changing the logic for deallocating nodes to ensure that all of a node's memory chunks are deallocated and users are asked to upgrade to version 0.6.4.. Tests have been added to prevent regressions of this nature moving forward. Note: Users of stable-structure &lt; 0.6.0 are not affected.

Users who are not storing unbounded types in BTreeMap are not affected and do not need to upgrade. Otherwise, an upgrade to version 0.6.4 is necessary.</description>
      <guid isPermaLink="false">CVE-2024-4435|2024-06-04T17:53:57.433Z</guid>
      <pubDate>Tue, 21 May 2024 09:41:35 +0000</pubDate>
    </item>
  </channel>
</rss>
