<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Xen -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/xen/all.rss</link>
    <description>The latest CVEs for Xen -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Wed, 25 Sep 2024 11:21:44 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-45817|2024-09-25T10:31:57.371Z -- xen -- xen
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45817</link>
      <description>In x86's APIC (Advanced Programmable Interrupt Controller) architecture,
error conditions are reported in a status register.  Furthermore, the OS
can opt to receive an interrupt when a new error occurs.

It is possible to configure the error interrupt with an illegal vector,
which generates an error when an error interrupt is raised.

This case causes Xen to recurse through vlapic_error().  The recursion
itself is bounded; errors accumulate in the the status register and only
generate an interrupt when a new status bit becomes set.

However, the lock protecting this state in Xen will try to be taken
recursively, and deadlock.</description>
      <guid isPermaLink="false">CVE-2024-45817|2024-09-25T10:31:57.371Z</guid>
      <pubDate>Wed, 25 Sep 2024 10:31:57 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31145|2024-09-25T10:31:43.523Z -- xen -- xen
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31145</link>
      <description>Certain PCI devices in a system might be assigned Reserved Memory
Regions (specified via Reserved Memory Region Reporting, "RMRR") for
Intel VT-d or Unity Mapping ranges for AMD-Vi.  These are typically used
for platform tasks such as legacy USB emulation.

Since the precise purpose of these regions is unknown, once a device
associated with such a region is active, the mappings of these regions
need to remain continuouly accessible by the device.  In the logic
establishing these mappings, error handling was flawed, resulting in
such mappings to potentially remain in place when they should have been
removed again.  Respective guests would then gain access to memory
regions which they aren't supposed to have access to.</description>
      <guid isPermaLink="false">CVE-2024-31145|2024-09-25T10:31:43.523Z</guid>
      <pubDate>Wed, 25 Sep 2024 10:31:43 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31146|2024-09-25T10:31:51.154Z -- xen -- xen
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31146</link>
      <description>When multiple devices share resources and one of them is to be passed
through to a guest, security of the entire system and of respective
guests individually cannot really be guaranteed without knowing
internals of any of the involved guests.  Therefore such a configuration
cannot really be security-supported, yet making that explicit was so far
missing.

Resources the sharing of which is known to be problematic include, but
are not limited to
- - PCI Base Address Registers (BARs) of multiple devices mapping to the
  same page (4k on x86),
- - INTx lines.</description>
      <guid isPermaLink="false">CVE-2024-31146|2024-09-25T10:31:51.154Z</guid>
      <pubDate>Wed, 25 Sep 2024 10:31:51 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31143|2024-08-21T13:39:34.427Z -- xen -- xen</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31143</link>
      <description>An optional feature of PCI MSI called "Multiple Message" allows a
device to use multiple consecutive interrupt vectors.  Unlike for MSI-X,
the setting up of these consecutive vectors needs to happen all in one
go.  In this handling an error path could be taken in different
situations, with or without a particular lock held.  This error path
wrongly releases the lock even when it is not currently held.</description>
      <guid isPermaLink="false">CVE-2024-31143|2024-08-21T13:39:34.427Z</guid>
      <pubDate>Thu, 18 Jul 2024 13:31:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31142|2024-08-02T01:46:04.491Z -- xen -- xen</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31142</link>
      <description>Because of a logical error in XSA-407 (Branch Type Confusion), the
mitigation is not applied properly when it is intended to be used.
XSA-434 (Speculative Return Stack Overflow) uses the same
infrastructure, so is equally impacted.

For more details, see:
  https://xenbits.xen.org/xsa/advisory-407.html
  https://xenbits.xen.org/xsa/advisory-434.html</description>
      <guid isPermaLink="false">CVE-2024-31142|2024-08-02T01:46:04.491Z</guid>
      <pubDate>Thu, 16 May 2024 13:39:42 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31143|2024-08-02T01:46:04.560Z -- xen -- xen</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31143</link>
      <description>An optional feature of PCI MSI called "Multiple Message" allows a
device to use multiple consecutive interrupt vectors.  Unlike for MSI-X,
the setting up of these consecutive vectors needs to happen all in one
go.  In this handling an error path could be taken in different
situations, with or without a particular lock held.  This error path
wrongly releases the lock even when it is not currently held.</description>
      <guid isPermaLink="false">CVE-2024-31143|2024-08-02T01:46:04.560Z</guid>
      <pubDate>Thu, 18 Jul 2024 13:31:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31143|2024-07-18T13:31:31.244Z -- xen -- xen</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31143</link>
      <description>An optional feature of PCI MSI called "Multiple Message" allows a
device to use multiple consecutive interrupt vectors.  Unlike for MSI-X,
the setting up of these consecutive vectors needs to happen all in one
go.  In this handling an error path could be taken in different
situations, with or without a particular lock held.  This error path
wrongly releases the lock even when it is not currently held.</description>
      <guid isPermaLink="false">CVE-2024-31143|2024-07-18T13:31:31.244Z</guid>
      <pubDate>Thu, 18 Jul 2024 13:31:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31142|2024-06-04T17:36:07.065Z -- xen -- xen</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31142</link>
      <description>Because of a logical error in XSA-407 (Branch Type Confusion), the
mitigation is not applied properly when it is intended to be used.
XSA-434 (Speculative Return Stack Overflow) uses the same
infrastructure, so is equally impacted.

For more details, see:
  https://xenbits.xen.org/xsa/advisory-407.html
  https://xenbits.xen.org/xsa/advisory-434.html</description>
      <guid isPermaLink="false">CVE-2024-31142|2024-06-04T17:36:07.065Z</guid>
      <pubDate>Thu, 16 May 2024 13:39:42 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-46842|2024-06-04T17:22:13.355Z -- xen -- xen</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-46842</link>
      <description>Unlike 32-bit PV guests, HVM guests may switch freely between 64-bit and
other modes.  This in particular means that they may set registers used
to pass 32-bit-mode hypercall arguments to values outside of the range
32-bit code would be able to set them to.

When processing of hypercalls takes a considerable amount of time,
the hypervisor may choose to invoke a hypercall continuation.  Doing so
involves putting (perhaps updated) hypercall arguments in respective
registers.  For guests not running in 64-bit mode this further involves
a certain amount of translation of the values.

Unfortunately internal sanity checking of these translated values
assumes high halves of registers to always be clear when invoking a
hypercall.  When this is found not to be the case, it triggers a
consistency check in the hypervisor and causes a crash.</description>
      <guid isPermaLink="false">CVE-2023-46842|2024-06-04T17:22:13.355Z</guid>
      <pubDate>Thu, 16 May 2024 13:39:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-46842|2024-08-02T20:53:21.979Z -- xen -- xen</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-46842</link>
      <description>Unlike 32-bit PV guests, HVM guests may switch freely between 64-bit and
other modes.  This in particular means that they may set registers used
to pass 32-bit-mode hypercall arguments to values outside of the range
32-bit code would be able to set them to.

When processing of hypercalls takes a considerable amount of time,
the hypervisor may choose to invoke a hypercall continuation.  Doing so
involves putting (perhaps updated) hypercall arguments in respective
registers.  For guests not running in 64-bit mode this further involves
a certain amount of translation of the values.

Unfortunately internal sanity checking of these translated values
assumes high halves of registers to always be clear when invoking a
hypercall.  When this is found not to be the case, it triggers a
consistency check in the hypervisor and causes a crash.</description>
      <guid isPermaLink="false">CVE-2023-46842|2024-08-02T20:53:21.979Z</guid>
      <pubDate>Thu, 16 May 2024 13:39:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31143|2024-09-13T17:04:37.447Z -- xen -- xen</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31143</link>
      <description>An optional feature of PCI MSI called "Multiple Message" allows a
device to use multiple consecutive interrupt vectors.  Unlike for MSI-X,
the setting up of these consecutive vectors needs to happen all in one
go.  In this handling an error path could be taken in different
situations, with or without a particular lock held.  This error path
wrongly releases the lock even when it is not currently held.</description>
      <guid isPermaLink="false">CVE-2024-31143|2024-09-13T17:04:37.447Z</guid>
      <pubDate>Thu, 18 Jul 2024 13:31:31 +0000</pubDate>
    </item>
  </channel>
</rss>
