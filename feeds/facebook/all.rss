<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Facebook -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/facebook/all.rss</link>
    <description>The latest CVEs for Facebook -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 21:21:49 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-1915|2024-08-04T06:53:59.849Z -- facebook -- hermes
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1915</link>
      <description>An out-of-bounds read in the JavaScript Interpreter in Facebook Hermes prior to commit 8cb935cd3b2321c46aa6b7ed8454d95c75a7fca0 allows attackers to cause a denial of service attack or possible further memory corruption via crafted JavaScript. Note that this is only exploitable if the application using Hermes permits evaluation of untrusted JavaScript. Hence, most React Native applications are not affected.</description>
      <guid isPermaLink="false">CVE-2020-1915|2024-08-04T06:53:59.849Z</guid>
      <pubDate>Mon, 26 Oct 2020 20:20:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1898|2024-08-04T06:53:59.646Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1898</link>
      <description>The fb_unserialize function did not impose a depth limit for nested deserialization. That meant a maliciously constructed string could cause deserialization to recurse, leading to stack exhaustion. This issue affected HHVM prior to v4.32.3, between versions 4.33.0 and 4.56.0, 4.57.0, 4.58.0, 4.58.1, 4.59.0, 4.60.0, 4.61.0, 4.62.0.</description>
      <guid isPermaLink="false">CVE-2020-1898|2024-08-04T06:53:59.646Z</guid>
      <pubDate>Thu, 11 Mar 2021 00:55:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1919|2024-08-04T06:53:59.858Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1919</link>
      <description>Incorrect bounds calculations in substr_compare could lead to an out-of-bounds read when the second string argument passed in is longer than the first. This issue affects HHVM versions prior to 4.56.3, all versions between 4.57.0 and 4.80.1, all versions between 4.81.0 and 4.93.1, and versions 4.94.0, 4.95.0, 4.96.0, 4.97.0, 4.98.0.</description>
      <guid isPermaLink="false">CVE-2020-1919|2024-08-04T06:53:59.858Z</guid>
      <pubDate>Wed, 10 Mar 2021 15:50:29 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3567|2024-08-04T19:12:09.500Z -- facebook -- osquery
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3567</link>
      <description>In some configurations an attacker can inject a new executable path into the extensions.load file for osquery and hard link a parent folder of a malicious binary to a folder with known 'safe' permissions. Under those circumstances osquery will load said malicious executable with SYSTEM permissions. The solution is to migrate installations to the 'Program Files' directory on Windows which restricts unprivileged write access. This issue affects osquery prior to v3.4.0.</description>
      <guid isPermaLink="false">CVE-2019-3567|2024-08-04T19:12:09.500Z</guid>
      <pubDate>Mon, 03 Jun 2019 18:22:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1909|2024-08-04T06:53:59.797Z -- facebook -- whatsapp%20business%20for%20ios
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1909</link>
      <description>A use-after-free in a logging library in WhatsApp for iOS prior to v2.20.111 and WhatsApp Business for iOS prior to v2.20.111 could have resulted in memory corruption, crashes and potentially code execution. This could have happened only if several events occurred together in sequence, including receiving an animated sticker while placing a WhatsApp video call on hold.</description>
      <guid isPermaLink="false">CVE-2020-1909|2024-08-04T06:53:59.797Z</guid>
      <pubDate>Tue, 03 Nov 2020 19:15:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1921|2024-08-04T06:54:00.475Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1921</link>
      <description>In the crypt function, we attempt to null terminate a buffer using the size of the input salt without validating that the offset is within the buffer. This issue affects HHVM versions prior to 4.56.3, all versions between 4.57.0 and 4.80.1, all versions between 4.81.0 and 4.93.1, and versions 4.94.0, 4.95.0, 4.96.0, 4.97.0, 4.98.0.</description>
      <guid isPermaLink="false">CVE-2020-1921|2024-08-04T06:54:00.475Z</guid>
      <pubDate>Wed, 10 Mar 2021 15:50:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1893|2024-08-04T06:53:59.787Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1893</link>
      <description>Insufficient boundary checks when decoding JSON in TryParse reads out of bounds memory, potentially leading to DOS. This issue affects HHVM 4.45.0, 4.44.0, 4.43.0, 4.42.0, 4.41.0, 4.40.0, 4.39.0, versions between 4.33.0 and 4.38.0 (inclusive), versions between 4.9.0 and 4.32.0 (inclusive), and versions prior to 4.8.7.</description>
      <guid isPermaLink="false">CVE-2020-1893|2024-08-04T06:53:59.787Z</guid>
      <pubDate>Tue, 03 Mar 2020 15:00:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1890|2024-08-04T06:53:59.902Z -- facebook -- whatsapp%20for%20android
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1890</link>
      <description>A URL validation issue in WhatsApp for Android prior to v2.20.11 and WhatsApp Business for Android prior to v2.20.2 could have caused the recipient of a sticker message containing deliberately malformed data to load an image from a sender-controlled URL without user interaction.</description>
      <guid isPermaLink="false">CVE-2020-1890|2024-08-04T06:53:59.902Z</guid>
      <pubDate>Thu, 03 Sep 2020 21:10:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3568|2024-08-04T19:12:09.468Z -- facebook -- whatsapp%20for%20android
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3568</link>
      <description>A buffer overflow vulnerability in WhatsApp VOIP stack allowed remote code execution via specially crafted series of RTCP packets sent to a target phone number. The issue affects WhatsApp for Android prior to v2.19.134, WhatsApp Business for Android prior to v2.19.44, WhatsApp for iOS prior to v2.19.51, WhatsApp Business for iOS prior to v2.19.51, WhatsApp for Windows Phone prior to v2.18.348, and WhatsApp for Tizen prior to v2.18.15.</description>
      <guid isPermaLink="false">CVE-2019-3568|2024-08-04T19:12:09.468Z</guid>
      <pubDate>Tue, 14 May 2019 19:52:40 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1920|2024-08-04T06:54:00.363Z -- facebook -- react-native
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1920</link>
      <description>A regular expression denial of service (ReDoS) vulnerability in the validateBaseUrl function can cause the application to use excessive resources, become unresponsive, or crash. This was introduced in react-native version 0.59.0 and fixed in version 0.64.1.</description>
      <guid isPermaLink="false">CVE-2020-1920|2024-08-04T06:54:00.363Z</guid>
      <pubDate>Tue, 01 Jun 2021 11:45:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3569|2024-08-04T19:12:09.483Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3569</link>
      <description>HHVM, when used with FastCGI, would bind by default to all available interfaces. This behavior could allow a malicious individual unintended direct access to the application, which could result in information disclosure. This issue affects versions 4.3.0, 4.4.0, 4.5.0, 4.6.0, 4.7.0, 4.8.0, versions 3.30.5 and below, and all versions in the 4.0, 4.1, and 4.2 series.</description>
      <guid isPermaLink="false">CVE-2019-3569|2024-08-04T19:12:09.483Z</guid>
      <pubDate>Wed, 26 Jun 2019 15:09:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1902|2024-08-04T06:53:59.913Z -- facebook -- whatsapp%20for%20android
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1902</link>
      <description>A user running a quick search on a highly forwarded message on WhatsApp for Android from v2.20.108 to v2.20.140 or WhatsApp Business for Android from v2.20.35 to v2.20.49 could have been sent to the Google service over plain HTTP.</description>
      <guid isPermaLink="false">CVE-2020-1902|2024-08-04T06:53:59.913Z</guid>
      <pubDate>Tue, 06 Oct 2020 17:35:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1887|2024-08-04T06:54:00.410Z -- facebook -- osquery
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1887</link>
      <description>Incorrect validation of the TLS SNI hostname in osquery versions after 2.9.0 and before 4.2.0 could allow an attacker to MITM osquery traffic in the absence of a configured root chain of trust.</description>
      <guid isPermaLink="false">CVE-2020-1887|2024-08-04T06:54:00.410Z</guid>
      <pubDate>Thu, 12 Mar 2020 23:50:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1897|2024-08-04T06:53:59.853Z -- facebook -- proxygen
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1897</link>
      <description>A use-after-free is possible due to an error in lifetime management in the request adaptor when a malicious client invokes request error handling in a specific sequence. This issue affects versions of proxygen prior to v2020.05.18.00.</description>
      <guid isPermaLink="false">CVE-2020-1897|2024-08-04T06:53:59.853Z</guid>
      <pubDate>Mon, 18 May 2020 21:30:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1907|2024-08-04T06:53:59.972Z -- facebook -- whatsapp%20for%20android
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1907</link>
      <description>A stack overflow in WhatsApp for Android prior to v2.20.196.16, WhatsApp Business for Android prior to v2.20.196.12, WhatsApp for iOS prior to v2.20.90, WhatsApp Business for iOS prior to v2.20.90, and WhatsApp for Portal prior to v173.0.0.29.505 could have allowed arbitrary code execution when parsing the contents of an RTP Extension header.</description>
      <guid isPermaLink="false">CVE-2020-1907|2024-08-04T06:53:59.972Z</guid>
      <pubDate>Tue, 06 Oct 2020 17:35:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3565|2024-08-04T19:12:09.598Z -- facebook -- facebook%20thrift
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3565</link>
      <description>Legacy C++ Facebook Thrift servers (using cpp instead of cpp2) would not error upon receiving messages with containers of fields of unknown type. As a result, malicious clients could send short messages which would take a long time for the server to parse, potentially leading to denial of service. This issue affects Facebook Thrift prior to v2019.05.06.00.</description>
      <guid isPermaLink="false">CVE-2019-3565|2024-08-04T19:12:09.598Z</guid>
      <pubDate>Mon, 06 May 2019 15:15:02 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1891|2024-08-04T06:53:59.925Z -- facebook -- whatsapp%20android
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1891</link>
      <description>A user controlled parameter used in video call in WhatsApp for Android prior to v2.20.17, WhatsApp Business for Android prior to v2.20.7, WhatsApp for iPhone prior to v2.20.20, and WhatsApp Business for iPhone prior to v2.20.20 could have allowed an out-of-bounds write on 32-bit devices.</description>
      <guid isPermaLink="false">CVE-2020-1891|2024-08-04T06:53:59.925Z</guid>
      <pubDate>Thu, 03 Sep 2020 21:10:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3570|2024-08-04T19:12:09.495Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3570</link>
      <description>Call to the scrypt_enc() function in HHVM can lead to heap corruption by using specifically crafted parameters (N, r and p). This happens if the parameters are configurable by an attacker for instance by providing the output of scrypt_enc() in a context where Hack/PHP code would attempt to verify it by re-running scrypt_enc() with the same parameters. This could result in information disclosure, memory being overwriten or crashes of the HHVM process. This issue affects versions 4.3.0, 4.4.0, 4.5.0, 4.6.0, 4.7.0, 4.8.0, versions 3.30.5 and below, and all versions in the 4.0, 4.1, and 4.2 series.</description>
      <guid isPermaLink="false">CVE-2019-3570|2024-08-04T19:12:09.495Z</guid>
      <pubDate>Thu, 18 Jul 2019 15:42:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3560|2024-08-04T19:12:09.384Z -- facebook -- fizz
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3560</link>
      <description>An improperly performed length calculation on a buffer in PlaintextRecordLayer could lead to an infinite loop and denial-of-service based on user input. This issue affected versions of fizz prior to v2019.03.04.00.</description>
      <guid isPermaLink="false">CVE-2019-3560|2024-08-04T19:12:09.384Z</guid>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1905|2024-08-04T06:53:59.620Z -- facebook -- whatsapp%20for%20android
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1905</link>
      <description>Media ContentProvider URIs used for opening attachments in other apps were generated sequentially prior to WhatsApp for Android v2.20.185, which could have allowed a malicious third party app chosen to open the file to guess the URIs for previously opened attachments until the opener app is terminated.</description>
      <guid isPermaLink="false">CVE-2020-1905|2024-08-04T06:53:59.620Z</guid>
      <pubDate>Tue, 06 Oct 2020 17:35:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3554|2024-08-04T19:12:09.432Z -- facebook -- wangle
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3554</link>
      <description>Wangle's AcceptRoutingHandler incorrectly casts a socket when accepting a TLS 1.3 connection, leading to a potential denial of service attack against systems accepting such connections. This affects versions of Wangle prior to v2019.01.14.00</description>
      <guid isPermaLink="false">CVE-2019-3554|2024-08-04T19:12:09.432Z</guid>
      <pubDate>Tue, 15 Jan 2019 22:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1906|2024-08-04T06:53:59.903Z -- facebook -- whatsapp%20for%20android
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1906</link>
      <description>A buffer overflow in WhatsApp for Android prior to v2.20.130 and WhatsApp Business for Android prior to v2.20.46 could have allowed an out-of-bounds write when processing malformed local videos with E-AC-3 audio streams.</description>
      <guid isPermaLink="false">CVE-2020-1906|2024-08-04T06:53:59.903Z</guid>
      <pubDate>Tue, 06 Oct 2020 17:35:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1903|2024-08-04T06:53:59.757Z -- facebook -- whatsapp%20for%20ios
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1903</link>
      <description>An issue when unzipping docx, pptx, and xlsx documents in WhatsApp for iOS prior to v2.20.61 and WhatsApp Business for iOS prior to v2.20.61 could have resulted in an out-of-memory denial of service. This issue would have required the receiver to explicitly open the attachment if it was received from a number not in the receiver's WhatsApp contacts.</description>
      <guid isPermaLink="false">CVE-2020-1903|2024-08-04T06:53:59.757Z</guid>
      <pubDate>Tue, 06 Oct 2020 17:35:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1886|2024-08-04T06:53:59.886Z -- facebook -- whatsapp%20for%20android
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1886</link>
      <description>A buffer overflow in WhatsApp for Android prior to v2.20.11 and WhatsApp Business for Android prior to v2.20.2 could have allowed an out-of-bounds write via a specially crafted video stream after receiving and answering a malicious video call.</description>
      <guid isPermaLink="false">CVE-2020-1886|2024-08-04T06:53:59.886Z</guid>
      <pubDate>Thu, 03 Sep 2020 21:10:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3564|2024-08-04T19:12:09.508Z -- facebook -- facebook%20thrift
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3564</link>
      <description>Go Facebook Thrift servers would not error upon receiving messages with containers of fields of unknown type. As a result, malicious clients could send short messages which would take a long time for the server to parse, potentially leading to denial of service. This issue affects Facebook Thrift prior to v2019.03.04.00.</description>
      <guid isPermaLink="false">CVE-2019-3564|2024-08-04T19:12:09.508Z</guid>
      <pubDate>Mon, 06 May 2019 15:15:02 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1918|2024-08-04T06:53:59.798Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1918</link>
      <description>In-memory file operations (ie: using fopen on a data URI) did not properly restrict negative seeking, allowing for the reading of memory prior to the in-memory buffer. This issue affects HHVM versions prior to 4.56.3, all versions between 4.57.0 and 4.80.1, all versions between 4.81.0 and 4.93.1, and versions 4.94.0, 4.95.0, 4.96.0, 4.97.0, 4.98.0.</description>
      <guid isPermaLink="false">CVE-2020-1918|2024-08-04T06:53:59.798Z</guid>
      <pubDate>Wed, 10 Mar 2021 15:50:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1900|2024-08-04T06:54:00.541Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1900</link>
      <description>When unserializing an object with dynamic properties HHVM needs to pre-reserve the full size of the dynamic property array before inserting anything into it. Otherwise the array might resize, invalidating previously stored references. This pre-reservation was not occurring in HHVM prior to v4.32.3, between versions 4.33.0 and 4.56.0, 4.57.0, 4.58.0, 4.58.1, 4.59.0, 4.60.0, 4.61.0, 4.62.0.</description>
      <guid isPermaLink="false">CVE-2020-1900|2024-08-04T06:54:00.541Z</guid>
      <pubDate>Thu, 11 Mar 2021 00:55:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1892|2024-08-04T06:53:59.519Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1892</link>
      <description>Insufficient boundary checks when decoding JSON in JSON_parser allows read access to out of bounds memory, potentially leading to information leak and DOS. This issue affects HHVM 4.45.0, 4.44.0, 4.43.0, 4.42.0, 4.41.0, 4.40.0, 4.39.0, versions between 4.33.0 and 4.38.0 (inclusive), versions between 4.9.0 and 4.32.0 (inclusive), and versions prior to 4.8.7.</description>
      <guid isPermaLink="false">CVE-2020-1892|2024-08-04T06:53:59.519Z</guid>
      <pubDate>Tue, 03 Mar 2020 15:00:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1904|2024-08-04T06:54:00.435Z -- facebook -- whatsapp%20for%20ios
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1904</link>
      <description>A path validation issue in WhatsApp for iOS prior to v2.20.61 and WhatsApp Business for iOS prior to v2.20.61 could have allowed for directory traversal overwriting files when sending specially crafted docx, xlsx, and pptx files as attachments to messages.</description>
      <guid isPermaLink="false">CVE-2020-1904|2024-08-04T06:54:00.435Z</guid>
      <pubDate>Tue, 06 Oct 2020 17:35:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1894|2024-08-04T06:53:59.872Z -- facebook -- whatsapp%20android
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1894</link>
      <description>A stack write overflow in WhatsApp for Android prior to v2.20.35, WhatsApp Business for Android prior to v2.20.20, WhatsApp for iPhone prior to v2.20.30, and WhatsApp Business for iPhone prior to v2.20.30 could have allowed arbitrary code execution when playing a specially crafted push to talk message.</description>
      <guid isPermaLink="false">CVE-2020-1894|2024-08-04T06:53:59.872Z</guid>
      <pubDate>Thu, 03 Sep 2020 21:10:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1916|2024-08-04T06:54:00.370Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1916</link>
      <description>An incorrect size calculation in ldap_escape may lead to an integer overflow when overly long input is passed in, resulting in an out-of-bounds write. This issue affects HHVM prior to 4.56.2, all versions between 4.57.0 and 4.78.0, 4.79.0, 4.80.0, 4.81.0, 4.82.0, 4.83.0.</description>
      <guid isPermaLink="false">CVE-2020-1916|2024-08-04T06:54:00.370Z</guid>
      <pubDate>Wed, 10 Mar 2021 15:50:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1913|2024-08-04T06:53:59.912Z -- facebook -- hermes
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1913</link>
      <description>An Integer signedness error in the JavaScript Interpreter in Facebook Hermes prior to commit 2c7af7ec481ceffd0d14ce2d7c045e475fd71dc6 allows attackers to cause a denial of service attack or a potential RCE via crafted JavaScript. Note that this is only exploitable if the application using Hermes permits evaluation of untrusted JavaScript. Hence, most React Native applications are not affected.</description>
      <guid isPermaLink="false">CVE-2020-1913|2024-08-04T06:53:59.912Z</guid>
      <pubDate>Wed, 09 Sep 2020 19:00:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1911|2024-08-04T06:53:59.783Z -- facebook -- hermes
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1911</link>
      <description>A type confusion vulnerability when resolving properties of JavaScript objects with specially-crafted prototype chains in Facebook Hermes prior to commit fe52854cdf6725c2eaa9e125995da76e6ceb27da allows attackers to potentially execute arbitrary code via crafted JavaScript. Note that this is only exploitable if the application using Hermes permits evaluation of untrusted JavaScript. Hence, most React Native applications are not affected.</description>
      <guid isPermaLink="false">CVE-2020-1911|2024-08-04T06:53:59.783Z</guid>
      <pubDate>Fri, 04 Sep 2020 02:35:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1885|2024-08-04T06:53:59.851Z -- facebook -- oculus%20desktop
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1885</link>
      <description>Writing to an unprivileged file from a privileged OVRRedir.exe process in Oculus Desktop before 1.44.0.32849 on Windows allows local users to write to arbitrary files and consequently gain privileges via vectors involving a hard link to a log file.</description>
      <guid isPermaLink="false">CVE-2020-1885|2024-08-04T06:53:59.851Z</guid>
      <pubDate>Wed, 08 Apr 2020 19:55:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1901|2024-08-04T06:54:00.462Z -- facebook -- whatsapp%20for%20ios
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1901</link>
      <description>Receiving a large text message containing URLs in WhatsApp for iOS prior to v2.20.91.4 could have caused the application to freeze while processing the message.</description>
      <guid isPermaLink="false">CVE-2020-1901|2024-08-04T06:54:00.462Z</guid>
      <pubDate>Tue, 06 Oct 2020 17:35:24 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3559|2024-08-04T19:12:09.476Z -- facebook -- facebook%20thrift
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3559</link>
      <description>Java Facebook Thrift servers would not error upon receiving messages with containers of fields of unknown type. As a result, malicious clients could send short messages which would take a long time for the server to parse, potentially leading to denial of service. This issue affects Facebook Thrift prior to v2019.02.18.00.</description>
      <guid isPermaLink="false">CVE-2019-3559|2024-08-04T19:12:09.476Z</guid>
      <pubDate>Mon, 06 May 2019 15:15:02 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3553|2024-08-04T19:12:09.503Z -- facebook -- facebook%20thrift
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3553</link>
      <description>C++ Facebook Thrift servers would not error upon receiving messages declaring containers of sizes larger than the payload. As a result, malicious clients could send short messages which would result in a large memory allocation, potentially leading to denial of service. This issue affects Facebook Thrift prior to v2020.02.03.00.</description>
      <guid isPermaLink="false">CVE-2019-3553|2024-08-04T19:12:09.503Z</guid>
      <pubDate>Tue, 10 Mar 2020 20:30:21 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3561|2024-08-04T19:12:09.501Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3561</link>
      <description>Insufficient boundary checks for the strrpos and strripos functions allow access to out-of-bounds memory. This affects all supported versions of HHVM (4.0.3, 3.30.4, and 3.27.7 and below).</description>
      <guid isPermaLink="false">CVE-2019-3561|2024-08-04T19:12:09.501Z</guid>
      <pubDate>Mon, 29 Apr 2019 15:32:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1899|2024-08-04T06:53:59.985Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1899</link>
      <description>The unserialize() function supported a type code, "S", which was meant to be supported only for APC serialization. This type code allowed arbitrary memory addresses to be accessed as if they were static StringData objects. This issue affected HHVM prior to v4.32.3, between versions 4.33.0 and 4.56.0, 4.57.0, 4.58.0, 4.58.1, 4.59.0, 4.60.0, 4.61.0, 4.62.0.</description>
      <guid isPermaLink="false">CVE-2020-1899|2024-08-04T06:53:59.985Z</guid>
      <pubDate>Thu, 11 Mar 2021 00:55:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1895|2024-08-04T06:53:59.862Z -- facebook -- instagram%20for%20android
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1895</link>
      <description>A large heap overflow could occur in Instagram for Android when attempting to upload an image with specially crafted dimensions. This affects versions prior to 128.0.0.26.128.</description>
      <guid isPermaLink="false">CVE-2020-1895|2024-08-04T06:53:59.862Z</guid>
      <pubDate>Thu, 09 Apr 2020 16:20:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3552|2024-08-04T19:12:09.356Z -- facebook -- facebook%20thrift
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3552</link>
      <description>C++ Facebook Thrift servers (using cpp2) would not error upon receiving messages with containers of fields of unknown type. As a result, malicious clients could send short messages which would take a long time for the server to parse, potentially leading to denial of service. This issue affects Facebook Thrift prior to v2019.02.18.00.</description>
      <guid isPermaLink="false">CVE-2019-3552|2024-08-04T19:12:09.356Z</guid>
      <pubDate>Mon, 06 May 2019 15:15:02 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1896|2024-08-04T06:53:59.880Z -- facebook -- hermes
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1896</link>
      <description>A stack overflow vulnerability in Facebook Hermes 'builtin apply' prior to commit 86543ac47e59c522976b5632b8bf9a2a4583c7d2 (https://github.com/facebook/hermes/commit/86543ac47e59c522976b5632b8bf9a2a4583c7d2) allows attackers to potentially execute arbitrary code via crafted JavaScript. Note that this is only exploitable if the application using Hermes permits evaluation of untrusted JavaScript. Hence, most React Native applications are not affected.</description>
      <guid isPermaLink="false">CVE-2020-1896|2024-08-04T06:53:59.880Z</guid>
      <pubDate>Tue, 02 Feb 2021 06:50:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1908|2024-08-04T06:53:59.916Z -- facebook -- whatsapp%20business%20for%20ios
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1908</link>
      <description>Improper authorization of the Screen Lock feature in WhatsApp and WhatsApp Business for iOS prior to v2.20.100 could have permitted use of Siri to interact with the WhatsApp application even after the phone was locked.</description>
      <guid isPermaLink="false">CVE-2020-1908|2024-08-04T06:53:59.916Z</guid>
      <pubDate>Tue, 03 Nov 2020 19:15:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1888|2024-08-04T06:53:59.615Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1888</link>
      <description>Insufficient boundary checks when decoding JSON in handleBackslash reads out of bounds memory, potentially leading to DOS. This issue affects HHVM 4.45.0, 4.44.0, 4.43.0, 4.42.0, 4.41.0, 4.40.0, 4.39.0, versions between 4.33.0 and 4.38.0 (inclusive), versions between 4.9.0 and 4.32.0 (inclusive), and versions prior to 4.8.7.</description>
      <guid isPermaLink="false">CVE-2020-1888|2024-08-04T06:53:59.615Z</guid>
      <pubDate>Tue, 03 Mar 2020 15:00:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3571|2024-08-04T19:12:09.515Z -- facebook -- whatsapp%20desktop
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3571</link>
      <description>An input validation issue affected WhatsApp Desktop versions prior to 0.3.3793 which allows malicious clients to send files to users that would be displayed with a wrong extension.</description>
      <guid isPermaLink="false">CVE-2019-3571|2024-08-04T19:12:09.515Z</guid>
      <pubDate>Tue, 16 Jul 2019 20:16:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1912|2024-08-04T06:54:00.338Z -- facebook -- hermes
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1912</link>
      <description>An out-of-bounds read/write vulnerability when executing lazily compiled inner generator functions in Facebook Hermes prior to commit 091835377369c8fd5917d9b87acffa721ad2a168 allows attackers to potentially execute arbitrary code via crafted JavaScript. Note that this is only exploitable if the application using Hermes permits evaluation of untrusted JavaScript. Hence, most React Native applications are not affected.</description>
      <guid isPermaLink="false">CVE-2020-1912|2024-08-04T06:54:00.338Z</guid>
      <pubDate>Wed, 09 Sep 2020 18:50:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1889|2024-08-04T06:53:59.559Z -- facebook -- whatsapp%20desktop
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1889</link>
      <description>A security feature bypass issue in WhatsApp Desktop versions prior to v0.3.4932 could have allowed for sandbox escape in Electron and escalation of privilege if combined with a remote code execution vulnerability inside the sandboxed renderer process.</description>
      <guid isPermaLink="false">CVE-2020-1889|2024-08-04T06:53:59.559Z</guid>
      <pubDate>Thu, 03 Sep 2020 21:10:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1917|2024-08-04T06:53:59.921Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1917</link>
      <description>xbuf_format_converter, used as part of exif_read_data, was appending a terminating null character to the generated string, but was not using its standard append char function. As a result, if the buffer was full, it would result in an out-of-bounds write. This issue affects HHVM versions prior to 4.56.3, all versions between 4.57.0 and 4.80.1, all versions between 4.81.0 and 4.93.1, and versions 4.94.0, 4.95.0, 4.96.0, 4.97.0, 4.98.0.</description>
      <guid isPermaLink="false">CVE-2020-1917|2024-08-04T06:53:59.921Z</guid>
      <pubDate>Wed, 10 Mar 2021 15:50:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3557|2024-08-04T19:12:09.545Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3557</link>
      <description>The implementations of streams for bz2 and php://output improperly implemented their readImpl functions, returning -1 consistently. This behavior caused some stream functions, such as stream_get_line, to trigger an out-of-bounds read when operating on such malformed streams. The implementations were updated to return valid values consistently. This affects all supported versions of HHVM (3.30 and 3.27.4 and below).</description>
      <guid isPermaLink="false">CVE-2019-3557|2024-08-04T19:12:09.545Z</guid>
      <pubDate>Tue, 15 Jan 2019 22:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-1914|2024-08-04T06:53:59.745Z -- facebook -- hermes
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-1914</link>
      <description>A logic vulnerability when handling the SaveGeneratorLong instruction in Facebook Hermes prior to commit b2021df620824627f5a8c96615edbd1eb7fdddfc allows attackers to potentially read out of bounds or theoretically execute arbitrary code via crafted JavaScript. Note that this is only exploitable if the application using Hermes permits evaluation of untrusted JavaScript. Hence, most React Native applications are not affected.</description>
      <guid isPermaLink="false">CVE-2020-1914|2024-08-04T06:53:59.745Z</guid>
      <pubDate>Thu, 08 Oct 2020 18:50:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3566|2024-08-04T19:12:09.532Z -- facebook -- whatsapp%20for%20android
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3566</link>
      <description>A bug in WhatsApp for Android's messaging logic would potentially allow a malicious individual who has taken over over a WhatsApp user's account to recover previously sent messages. This behavior requires independent knowledge of metadata for previous messages, which are not available publicly. This issue affects WhatsApp for Android 2.19.52 and 2.19.54 - 2.19.103, as well as WhatsApp Business for Android starting in v2.19.22 until v2.19.38.</description>
      <guid isPermaLink="false">CVE-2019-3566|2024-08-04T19:12:09.532Z</guid>
      <pubDate>Fri, 10 May 2019 20:58:02 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3556|2024-08-04T19:12:09.554Z -- facebook -- hhvm
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3556</link>
      <description>HHVM supports the use of an "admin" server which accepts administrative requests over HTTP. One of those request handlers, dump-pcre-cache, can be used to output cached regular expressions from the current execution context into a file. The handler takes a parameter which specifies where on the filesystem to write this data. The parameter is not validated, allowing a malicious user to overwrite arbitrary files where the user running HHVM has write access. This issue affects HHVM versions prior to 4.56.2, all versions between 4.57.0 and 4.78.0, as well as 4.79.0, 4.80.0, 4.81.0, 4.82.0, and 4.83.0.</description>
      <guid isPermaLink="false">CVE-2019-3556|2024-08-04T19:12:09.554Z</guid>
      <pubDate>Tue, 26 Oct 2021 20:05:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3563|2024-08-04T19:12:09.559Z -- facebook -- wangle
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3563</link>
      <description>Wangle's LineBasedFrameDecoder contains logic for identifying newlines which incorrectly advances a buffer, leading to a potential underflow. This affects versions of Wangle prior to v2019.04.22.00</description>
      <guid isPermaLink="false">CVE-2019-3563|2024-08-04T19:12:09.559Z</guid>
      <pubDate>Mon, 29 Apr 2019 15:32:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3558|2024-08-04T19:12:09.557Z -- facebook -- facebook%20thrift
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3558</link>
      <description>Python Facebook Thrift servers would not error upon receiving messages with containers of fields of unknown type. As a result, malicious clients could send short messages which would take a long time for the server to parse, potentially leading to denial of service. This issue affects Facebook Thrift prior to v2019.02.18.00.</description>
      <guid isPermaLink="false">CVE-2019-3558|2024-08-04T19:12:09.557Z</guid>
      <pubDate>Mon, 06 May 2019 15:15:02 +0000</pubDate>
    </item>
  </channel>
</rss>
