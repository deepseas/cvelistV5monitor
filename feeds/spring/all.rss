<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Spring -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/spring/all.rss</link>
    <description>The latest CVEs for Spring -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 16 Sep 2024 20:23:43 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2019-3772|2024-09-16T16:23:25.840Z -- spring -- spring%20integration
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3772</link>
      <description>Spring Integration (spring-integration-xml and spring-integration-ws modules), versions 4.3.18, 5.0.10, 5.1.1, and older unsupported versions, were susceptible to XML External Entity Injection (XXE) when receiving XML data from untrusted sources.</description>
      <guid isPermaLink="false">CVE-2019-3772|2024-09-16T16:23:25.840Z</guid>
      <pubDate>Fri, 18 Jan 2019 22:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-5398|2024-09-16T17:43:32.422Z -- spring -- spring%20framework
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-5398</link>
      <description>In Spring Framework, versions 5.2.x prior to 5.2.3, versions 5.1.x prior to 5.1.13, and versions 5.0.x prior to 5.0.16, an application is vulnerable to a reflected file download (RFD) attack when it sets a "Content-Disposition" header in the response where the filename attribute is derived from user supplied input.</description>
      <guid isPermaLink="false">CVE-2020-5398|2024-09-16T17:43:32.422Z</guid>
      <pubDate>Thu, 16 Jan 2020 23:55:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3797|2024-09-16T17:33:03.727Z -- spring -- spring%20boot
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3797</link>
      <description>This affects Spring Data JPA in versions up to and including 2.1.5, 2.0.13 and 1.11.19. Derived queries using any of the predicates ‘startingWith’, ‘endingWith’ or ‘containing’ could return more results than anticipated when a maliciously crafted query parameter value is supplied. Also, LIKE expressions in manually defined queries could return unexpected results if the parameter values bound did not have escaped reserved characters properly.</description>
      <guid isPermaLink="false">CVE-2019-3797|2024-09-16T17:33:03.727Z</guid>
      <pubDate>Mon, 06 May 2019 15:21:37 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-11272|2024-09-16T19:25:59.208Z -- spring -- spring%20security
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-11272</link>
      <description>Spring Security, versions 4.2.x up to 4.2.12, and older unsupported versions support plain text passwords using PlaintextPasswordEncoder. If an application using an affected version of Spring Security is leveraging PlaintextPasswordEncoder and a user has a null encoded password, a malicious user (or attacker) can authenticate using a password of "null".</description>
      <guid isPermaLink="false">CVE-2019-11272|2024-09-16T19:25:59.208Z</guid>
      <pubDate>Wed, 26 Jun 2019 14:06:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38816|2024-09-13T13:45:05.327Z -- spring -- spring</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38816</link>
      <description>Applications serving static resources through the functional web frameworks WebMvc.fn or WebFlux.fn are vulnerable to path traversal attacks. An attacker can craft malicious HTTP requests and obtain any file on the file system that is also accessible to the process in which the Spring application is running.

Specifically, an application is vulnerable when both of the following are true:

  *  the web application uses RouterFunctions to serve static resources
  *  resource handling is explicitly configured with a FileSystemResource location


However, malicious requests are blocked and rejected when any of the following is true:

  *  the  Spring Security HTTP Firewall https://docs.spring.io/spring-security/reference/servlet/exploits/firewall.html  is in use
  *  the application runs on Tomcat or Jetty</description>
      <guid isPermaLink="false">CVE-2024-38816|2024-09-13T13:45:05.327Z</guid>
      <pubDate>Fri, 13 Sep 2024 06:10:06 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22262|2024-08-27T13:53:45.250Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22262</link>
      <description>Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.

This is the same as  CVE-2024-22259 https://spring.io/security/cve-2024-22259  and  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.</description>
      <guid isPermaLink="false">CVE-2024-22262|2024-08-27T13:53:45.250Z</guid>
      <pubDate>Tue, 16 Apr 2024 05:54:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38807|2024-08-23T08:26:11.826Z -- spring -- spring%20boot</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38807</link>
      <description>Applications that use spring-boot-loader or spring-boot-loader-classic and contain custom code that performs signature verification of nested jar files may be vulnerable to signature forgery where content that appears to have been signed by one signer has, in fact, been signed by another.</description>
      <guid isPermaLink="false">CVE-2024-38807|2024-08-23T08:26:11.826Z</guid>
      <pubDate>Fri, 23 Aug 2024 08:26:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38808|2024-08-20T13:48:39.313Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38808</link>
      <description>In Spring Framework versions 5.3.0 - 5.3.38 and older unsupported versions, it is possible for a user to provide a specially crafted Spring Expression Language (SpEL) expression that may cause a denial of service (DoS) condition.

Specifically, an application is vulnerable when the following is true:

  *  The application evaluates user-supplied SpEL expressions.</description>
      <guid isPermaLink="false">CVE-2024-38808|2024-08-20T13:48:39.313Z</guid>
      <pubDate>Tue, 20 Aug 2024 07:12:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38810|2024-08-20T13:34:50.068Z -- spring -- spring%20security</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38810</link>
      <description>Missing Authorization When Using @AuthorizeReturnObject in Spring Security 6.3.0 and 6.3.1 allows attacker to render security annotations inaffective.</description>
      <guid isPermaLink="false">CVE-2024-38810|2024-08-20T13:34:50.068Z</guid>
      <pubDate>Tue, 20 Aug 2024 03:35:24 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38810|2024-08-20T03:35:24.795Z -- spring -- spring%20security</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38810</link>
      <description>Missing Authorization When Using @AuthorizeReturnObject in Spring Security 6.3.0 and 6.3.1 allows attacker to render security annotations inaffective.</description>
      <guid isPermaLink="false">CVE-2024-38810|2024-08-20T03:35:24.795Z</guid>
      <pubDate>Tue, 20 Aug 2024 03:35:24 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37084|2024-08-02T03:43:50.987Z -- spring -- spring%20cloud%20data%20flow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37084</link>
      <description>In Spring Cloud Data Flow versions prior to 2.11.4,  a malicious user who has access to the Skipper server api can use a crafted upload request to write an arbitrary file to any location on the file system which could lead to compromising the server</description>
      <guid isPermaLink="false">CVE-2024-37084|2024-08-02T03:43:50.987Z</guid>
      <pubDate>Thu, 25 Jul 2024 09:17:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37084|2024-07-25T09:17:50.378Z -- spring -- spring%20cloud%20data%20flow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37084</link>
      <description>In Spring Cloud Data Flow versions prior to 2.11.4,  a malicious user who has access to the Skipper server api can use a crafted upload request to write an arbitrary file to any location on the file system which could lead to compromising the server</description>
      <guid isPermaLink="false">CVE-2024-37084|2024-07-25T09:17:50.378Z</guid>
      <pubDate>Thu, 25 Jul 2024 09:17:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22262|2024-06-28T03:55:23.199Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22262</link>
      <description>Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.

This is the same as  CVE-2024-22259 https://spring.io/security/cve-2024-22259  and  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.</description>
      <guid isPermaLink="false">CVE-2024-22262|2024-06-28T03:55:23.199Z</guid>
      <pubDate>Tue, 16 Apr 2024 05:54:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22262|2024-04-16T05:54:12.786Z -- spring -- spring%20framework</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22262</link>
      <description>Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.

This is the same as  CVE-2024-22259 https://spring.io/security/cve-2024-22259  and  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.</description>
      <guid isPermaLink="false">CVE-2024-22262|2024-04-16T05:54:12.786Z</guid>
      <pubDate>Tue, 16 Apr 2024 05:54:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22262|2024-06-27T21:24:27.845Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22262</link>
      <description>Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.

This is the same as  CVE-2024-22259 https://spring.io/security/cve-2024-22259  and  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.</description>
      <guid isPermaLink="false">CVE-2024-22262|2024-06-27T21:24:27.845Z</guid>
      <pubDate>Tue, 16 Apr 2024 05:54:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37084|2024-07-25T13:38:12.037Z -- spring -- spring%20cloud%20data%20flow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37084</link>
      <description>In Spring Cloud Data Flow versions prior to 2.11.4,  a malicious user who has access to the Skipper server api can use a crafted upload request to write an arbitrary file to any location on the file system which could lead to compromising the server</description>
      <guid isPermaLink="false">CVE-2024-37084|2024-07-25T13:38:12.037Z</guid>
      <pubDate>Thu, 25 Jul 2024 09:17:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22262|2024-08-01T22:43:33.714Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22262</link>
      <description>Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.

This is the same as  CVE-2024-22259 https://spring.io/security/cve-2024-22259  and  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.</description>
      <guid isPermaLink="false">CVE-2024-22262|2024-08-01T22:43:33.714Z</guid>
      <pubDate>Tue, 16 Apr 2024 05:54:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38808|2024-08-20T07:12:44.736Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38808</link>
      <description>In Spring Framework versions 5.3.0 - 5.3.38 and older unsupported versions, it is possible for a user to provide a specially crafted Spring Expression Language (SpEL) expression that may cause a denial of service (DoS) condition.

Specifically, an application is vulnerable when the following is true:

  *  The application evaluates user-supplied SpEL expressions.</description>
      <guid isPermaLink="false">CVE-2024-38808|2024-08-20T07:12:44.736Z</guid>
      <pubDate>Tue, 20 Aug 2024 07:12:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38807|2024-08-23T17:13:13.853Z -- spring -- spring%20boot</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38807</link>
      <description>Applications that use spring-boot-loader or spring-boot-loader-classic and contain custom code that performs signature verification of nested jar files may be vulnerable to signature forgery where content that appears to have been signed by one signer has, in fact, been signed by another.</description>
      <guid isPermaLink="false">CVE-2024-38807|2024-08-23T17:13:13.853Z</guid>
      <pubDate>Fri, 23 Aug 2024 08:26:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22262|2024-08-27T13:57:23.898Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22262</link>
      <description>Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.

This is the same as  CVE-2024-22259 https://spring.io/security/cve-2024-22259  and  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.</description>
      <guid isPermaLink="false">CVE-2024-22262|2024-08-27T13:57:23.898Z</guid>
      <pubDate>Tue, 16 Apr 2024 05:54:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38816|2024-09-13T06:10:06.598Z -- spring -- spring</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38816</link>
      <description>Applications serving static resources through the functional web frameworks WebMvc.fn or WebFlux.fn are vulnerable to path traversal attacks. An attacker can craft malicious HTTP requests and obtain any file on the file system that is also accessible to the process in which the Spring application is running.

Specifically, an application is vulnerable when both of the following are true:

  *  the web application uses RouterFunctions to serve static resources
  *  resource handling is explicitly configured with a FileSystemResource location


However, malicious requests are blocked and rejected when any of the following is true:

  *  the  Spring Security HTTP Firewall https://docs.spring.io/spring-security/reference/servlet/exploits/firewall.html  is in use
  *  the application runs on Tomcat or Jetty</description>
      <guid isPermaLink="false">CVE-2024-38816|2024-09-13T06:10:06.598Z</guid>
      <pubDate>Fri, 13 Sep 2024 06:10:06 +0000</pubDate>
    </item>
  </channel>
</rss>
