<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Spring -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/spring/all.rss</link>
    <description>The latest CVEs for Spring -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 23:23:15 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-5397|2024-08-04T08:30:23.996Z -- spring -- spring%20framework
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-5397</link>
      <description>Spring Framework, versions 5.2.x prior to 5.2.3 are vulnerable to CSRF attacks through CORS preflight requests that target Spring MVC (spring-webmvc module) or Spring WebFlux (spring-webflux module) endpoints. Only non-authenticated endpoints are vulnerable because preflight requests should not include credentials and therefore requests should fail authentication. However a notable exception to this are Chrome based browsers when using client certificates for authentication since Chrome sends TLS client certificates in CORS preflight requests in violation of spec requirements. No HTTP body can be sent or received as a result of this attack.</description>
      <guid isPermaLink="false">CVE-2020-5397|2024-08-04T08:30:23.996Z</guid>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-11269|2024-08-04T22:48:08.998Z -- spring -- spring%20security%20oauth
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-11269</link>
      <description>Spring Security OAuth versions 2.3 prior to 2.3.6, 2.2 prior to 2.2.5, 2.1 prior to 2.1.5, and 2.0 prior to 2.0.18, as well as older unsupported versions could be susceptible to an open redirector attack that can leak an authorization code. A malicious user or attacker can craft a request to the authorization endpoint using the authorization code grant type, and specify a manipulated redirection URI via the redirect_uri parameter. This can cause the authorization server to redirect the resource owner user-agent to a URI under the control of the attacker with the leaked authorization code.</description>
      <guid isPermaLink="false">CVE-2019-11269|2024-08-04T22:48:08.998Z</guid>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-11272|2024-08-04T22:48:09.049Z -- spring -- spring%20security
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-11272</link>
      <description>Spring Security, versions 4.2.x up to 4.2.12, and older unsupported versions support plain text passwords using PlaintextPasswordEncoder. If an application using an affected version of Spring Security is leveraging PlaintextPasswordEncoder and a user has a null encoded password, a malicious user (or attacker) can authenticate using a password of "null".</description>
      <guid isPermaLink="false">CVE-2019-11272|2024-08-04T22:48:09.049Z</guid>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3772|2024-08-04T19:19:18.230Z -- spring -- spring%20integration
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3772</link>
      <description>Spring Integration (spring-integration-xml and spring-integration-ws modules), versions 4.3.18, 5.0.10, 5.1.1, and older unsupported versions, were susceptible to XML External Entity Injection (XXE) when receiving XML data from untrusted sources.</description>
      <guid isPermaLink="false">CVE-2019-3772|2024-08-04T19:19:18.230Z</guid>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3795|2024-08-04T19:19:18.467Z -- spring -- spring%20security
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3795</link>
      <description>Spring Security versions 4.2.x prior to 4.2.12, 5.0.x prior to 5.0.12, and 5.1.x prior to 5.1.5 contain an insecure randomness vulnerability when using SecureRandomFactoryBean#setSeed to configure a SecureRandom instance. In order to be impacted, an honest application must provide a seed and make the resulting random material available to an attacker for inspection.</description>
      <guid isPermaLink="false">CVE-2019-3795|2024-08-04T19:19:18.467Z</guid>
      <pubDate>Thu, 04 Apr 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3799|2024-08-04T19:19:18.484Z -- spring -- spring%20cloud%20config
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3799</link>
      <description>Spring Cloud Config, versions 2.1.x prior to 2.1.2, versions 2.0.x prior to 2.0.4, and versions 1.4.x prior to 1.4.6, and older unsupported versions allow applications to serve arbitrary configuration files through the spring-cloud-config-server module. A malicious user, or attacker, can send a request using a specially crafted URL that can lead a directory traversal attack.</description>
      <guid isPermaLink="false">CVE-2019-3799|2024-08-04T19:19:18.484Z</guid>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3778|2024-08-04T19:19:18.342Z -- spring -- spring%20security%20oauth
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3778</link>
      <description>Spring Security OAuth, versions 2.3 prior to 2.3.5, and 2.2 prior to 2.2.4, and 2.1 prior to 2.1.4, and 2.0 prior to 2.0.17, and older unsupported versions could be susceptible to an open redirector attack that can leak an authorization code. A malicious user or attacker can craft a request to the authorization endpoint using the authorization code grant type, and specify a manipulated redirection URI via the "redirect_uri" parameter. This can cause the authorization server to redirect the resource owner user-agent to a URI under the control of the attacker with the leaked authorization code. This vulnerability exposes applications that meet all of the following requirements: Act in the role of an Authorization Server (e.g. @EnableAuthorizationServer) and uses the DefaultRedirectResolver in the AuthorizationEndpoint. This vulnerability does not expose applications that: Act in the role of an Authorization Server and uses a different RedirectResolver implementation other than DefaultRedirectResolver, act in the role of a Resource Server only (e.g. @EnableResourceServer), act in the role of a Client only (e.g. @EnableOAuthClient).</description>
      <guid isPermaLink="false">CVE-2019-3778|2024-08-04T19:19:18.342Z</guid>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3773|2024-08-04T19:19:18.472Z -- spring -- spring%20web%20services
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3773</link>
      <description>Spring Web Services, versions 2.4.3, 3.0.4, and older unsupported versions of all three projects, were susceptible to XML External Entity Injection (XXE) when receiving XML data from untrusted sources.</description>
      <guid isPermaLink="false">CVE-2019-3773|2024-08-04T19:19:18.472Z</guid>
      <pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3802|2024-08-04T19:19:18.553Z -- spring -- spring%20data%20jpa
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3802</link>
      <description>This affects Spring Data JPA in versions up to and including 2.1.6, 2.0.14 and 1.11.20. ExampleMatcher using ExampleMatcher.StringMatcher.STARTING, ExampleMatcher.StringMatcher.ENDING or ExampleMatcher.StringMatcher.CONTAINING could return more results than anticipated when a maliciously crafted example value is supplied.</description>
      <guid isPermaLink="false">CVE-2019-3802|2024-08-04T19:19:18.553Z</guid>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-5398|2024-08-04T08:30:24.114Z -- spring -- spring%20framework
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-5398</link>
      <description>In Spring Framework, versions 5.2.x prior to 5.2.3, versions 5.1.x prior to 5.1.13, and versions 5.0.x prior to 5.0.16, an application is vulnerable to a reflected file download (RFD) attack when it sets a "Content-Disposition" header in the response where the filename attribute is derived from user supplied input.</description>
      <guid isPermaLink="false">CVE-2020-5398|2024-08-04T08:30:24.114Z</guid>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3774|2024-08-04T19:19:18.161Z -- spring -- spring%20batch
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3774</link>
      <description>Spring Batch versions 3.0.9, 4.0.1, 4.1.0, and older unsupported versions, were susceptible to XML External Entity Injection (XXE) when receiving XML data from untrusted sources.</description>
      <guid isPermaLink="false">CVE-2019-3774|2024-08-04T19:19:18.161Z</guid>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3797|2024-08-04T19:19:18.481Z -- spring -- spring%20boot
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3797</link>
      <description>This affects Spring Data JPA in versions up to and including 2.1.5, 2.0.13 and 1.11.19. Derived queries using any of the predicates ‘startingWith’, ‘endingWith’ or ‘containing’ could return more results than anticipated when a maliciously crafted query parameter value is supplied. Also, LIKE expressions in manually defined queries could return unexpected results if the parameter values bound did not have escaped reserved characters properly.</description>
      <guid isPermaLink="false">CVE-2019-3797|2024-08-04T19:19:18.481Z</guid>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22258|2024-08-02T19:20:35.350Z -- spring -- spring</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22258</link>
      <description>Spring Authorization Server versions 1.0.0 - 1.0.5, 1.1.0 - 1.1.5, 1.2.0 - 1.2.2 and older unsupported versions are susceptible to a PKCE Downgrade Attack for Confidential Clients.

Specifically, an application is vulnerable when a Confidential Client uses PKCE for the Authorization Code Grant.

An application is not vulnerable when a Public Client uses PKCE for the Authorization Code Grant.</description>
      <guid isPermaLink="false">CVE-2024-22258|2024-08-02T19:20:35.350Z</guid>
      <pubDate>Wed, 20 Mar 2024 03:58:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22258|2024-08-01T22:43:33.663Z -- spring -- spring</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22258</link>
      <description>Spring Authorization Server versions 1.0.0 - 1.0.5, 1.1.0 - 1.1.5, 1.2.0 - 1.2.2 and older unsupported versions are susceptible to a PKCE Downgrade Attack for Confidential Clients.

Specifically, an application is vulnerable when a Confidential Client uses PKCE for the Authorization Code Grant.

An application is not vulnerable when a Public Client uses PKCE for the Authorization Code Grant.</description>
      <guid isPermaLink="false">CVE-2024-22258|2024-08-01T22:43:33.663Z</guid>
      <pubDate>Wed, 20 Mar 2024 03:58:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22234|2024-08-01T22:43:33.656Z -- spring -- spring%20security</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22234</link>
      <description>In Spring Security, versions 6.1.x prior to 6.1.7 and versions 6.2.x prior to 6.2.2, an application is vulnerable to broken access control when it directly uses the AuthenticationTrustResolver.isFullyAuthenticated(Authentication) method.

Specifically, an application is vulnerable if:

  *  The application uses AuthenticationTrustResolver.isFullyAuthenticated(Authentication) directly and a null authentication parameter is passed to it resulting in an erroneous true return value.


An application is not vulnerable if any of the following is true:

  *  The application does not use AuthenticationTrustResolver.isFullyAuthenticated(Authentication) directly.
  *  The application does not pass null to AuthenticationTrustResolver.isFullyAuthenticated
  *  The application only uses isFullyAuthenticated via  Method Security https://docs.spring.io/spring-security/reference/servlet/authorization/method-security.html  or  HTTP Request Security https://docs.spring.io/spring-security/reference/servlet/authorization/authorize-http-requests.html</description>
      <guid isPermaLink="false">CVE-2024-22234|2024-08-01T22:43:33.656Z</guid>
      <pubDate>Tue, 20 Feb 2024 07:02:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22262|2024-08-01T22:43:33.714Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22262</link>
      <description>Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.

This is the same as  CVE-2024-22259 https://spring.io/security/cve-2024-22259  and  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.</description>
      <guid isPermaLink="false">CVE-2024-22262|2024-08-01T22:43:33.714Z</guid>
      <pubDate>Tue, 16 Apr 2024 05:54:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22259|2024-08-01T22:43:34.152Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22259</link>
      <description>Applications that use UriComponentsBuilder in Spring Framework to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.

This is the same as  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.</description>
      <guid isPermaLink="false">CVE-2024-22259|2024-08-01T22:43:34.152Z</guid>
      <pubDate>Sat, 16 Mar 2024 04:40:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22243|2024-08-01T22:43:33.708Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22243</link>
      <description>Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.</description>
      <guid isPermaLink="false">CVE-2024-22243|2024-08-01T22:43:33.708Z</guid>
      <pubDate>Fri, 23 Feb 2024 05:03:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37084|2024-07-25T13:38:12.037Z -- spring -- spring%20cloud%20data%20flow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37084</link>
      <description>In Spring Cloud Data Flow versions prior to 2.11.4,  a malicious user who has access to the Skipper server api can use a crafted upload request to write an arbitrary file to any location on the file system which could lead to compromising the server</description>
      <guid isPermaLink="false">CVE-2024-37084|2024-07-25T13:38:12.037Z</guid>
      <pubDate>Thu, 25 Jul 2024 09:17:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22259|2024-07-19T03:55:23.142Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22259</link>
      <description>Applications that use UriComponentsBuilder in Spring Framework to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.

This is the same as  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.</description>
      <guid isPermaLink="false">CVE-2024-22259|2024-07-19T03:55:23.142Z</guid>
      <pubDate>Sat, 16 Mar 2024 04:40:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22243|2024-07-19T03:55:24.805Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22243</link>
      <description>Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.</description>
      <guid isPermaLink="false">CVE-2024-22243|2024-07-19T03:55:24.805Z</guid>
      <pubDate>Fri, 23 Feb 2024 05:03:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22262|2024-06-27T21:24:27.845Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22262</link>
      <description>Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.

This is the same as  CVE-2024-22259 https://spring.io/security/cve-2024-22259  and  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.</description>
      <guid isPermaLink="false">CVE-2024-22262|2024-06-27T21:24:27.845Z</guid>
      <pubDate>Tue, 16 Apr 2024 05:54:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22234|2024-02-20T07:02:50.873Z -- spring -- spring%20security</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22234</link>
      <description>In Spring Security, versions 6.1.x prior to 6.1.7 and versions 6.2.x prior to 6.2.2, an application is vulnerable to broken access control when it directly uses the AuthenticationTrustResolver.isFullyAuthenticated(Authentication) method.

Specifically, an application is vulnerable if:

  *  The application uses AuthenticationTrustResolver.isFullyAuthenticated(Authentication) directly and a null authentication parameter is passed to it resulting in an erroneous true return value.


An application is not vulnerable if any of the following is true:

  *  The application does not use AuthenticationTrustResolver.isFullyAuthenticated(Authentication) directly.
  *  The application does not pass null to AuthenticationTrustResolver.isFullyAuthenticated
  *  The application only uses isFullyAuthenticated via  Method Security https://docs.spring.io/spring-security/reference/servlet/authorization/method-security.html  or  HTTP Request Security https://docs.spring.io/spring-security/reference/servlet/authorization/authorize-http-requests.html</description>
      <guid isPermaLink="false">CVE-2024-22234|2024-02-20T07:02:50.873Z</guid>
      <pubDate>Tue, 20 Feb 2024 07:02:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22259|2024-03-16T04:40:08.680Z -- spring -- spring%20framework</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22259</link>
      <description>Applications that use UriComponentsBuilder in Spring Framework to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.

This is the same as  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.</description>
      <guid isPermaLink="false">CVE-2024-22259|2024-03-16T04:40:08.680Z</guid>
      <pubDate>Sat, 16 Mar 2024 04:40:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22243|2024-02-23T05:03:54.426Z -- spring -- spring%20framework</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22243</link>
      <description>Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.</description>
      <guid isPermaLink="false">CVE-2024-22243|2024-02-23T05:03:54.426Z</guid>
      <pubDate>Fri, 23 Feb 2024 05:03:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22258|2024-03-20T03:58:15.047Z -- spring -- spring</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22258</link>
      <description>Spring Authorization Server versions 1.0.0 - 1.0.5, 1.1.0 - 1.1.5, 1.2.0 - 1.2.2 and older unsupported versions are susceptible to a PKCE Downgrade Attack for Confidential Clients.

Specifically, an application is vulnerable when a Confidential Client uses PKCE for the Authorization Code Grant.

An application is not vulnerable when a Public Client uses PKCE for the Authorization Code Grant.</description>
      <guid isPermaLink="false">CVE-2024-22258|2024-03-20T03:58:15.047Z</guid>
      <pubDate>Wed, 20 Mar 2024 03:58:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22262|2024-04-16T05:54:12.786Z -- spring -- spring%20framework</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22262</link>
      <description>Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.

This is the same as  CVE-2024-22259 https://spring.io/security/cve-2024-22259  and  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.</description>
      <guid isPermaLink="false">CVE-2024-22262|2024-04-16T05:54:12.786Z</guid>
      <pubDate>Tue, 16 Apr 2024 05:54:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22243|2024-06-28T03:55:22.139Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22243</link>
      <description>Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.</description>
      <guid isPermaLink="false">CVE-2024-22243|2024-06-28T03:55:22.139Z</guid>
      <pubDate>Fri, 23 Feb 2024 05:03:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22262|2024-06-28T03:55:23.199Z -- spring -- spring%20framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22262</link>
      <description>Applications that use UriComponentsBuilder to parse an externally provided URL (e.g. through a query parameter) AND perform validation checks on the host of the parsed URL may be vulnerable to a  open redirect https://cwe.mitre.org/data/definitions/601.html  attack or to a SSRF attack if the URL is used after passing validation checks.

This is the same as  CVE-2024-22259 https://spring.io/security/cve-2024-22259  and  CVE-2024-22243 https://spring.io/security/cve-2024-22243 , but with different input.</description>
      <guid isPermaLink="false">CVE-2024-22262|2024-06-28T03:55:23.199Z</guid>
      <pubDate>Tue, 16 Apr 2024 05:54:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37084|2024-07-25T09:17:50.378Z -- spring -- spring%20cloud%20data%20flow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37084</link>
      <description>In Spring Cloud Data Flow versions prior to 2.11.4,  a malicious user who has access to the Skipper server api can use a crafted upload request to write an arbitrary file to any location on the file system which could lead to compromising the server</description>
      <guid isPermaLink="false">CVE-2024-37084|2024-07-25T09:17:50.378Z</guid>
      <pubDate>Thu, 25 Jul 2024 09:17:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22234|2024-07-26T17:21:05.285Z -- spring -- spring%20security</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22234</link>
      <description>In Spring Security, versions 6.1.x prior to 6.1.7 and versions 6.2.x prior to 6.2.2, an application is vulnerable to broken access control when it directly uses the AuthenticationTrustResolver.isFullyAuthenticated(Authentication) method.

Specifically, an application is vulnerable if:

  *  The application uses AuthenticationTrustResolver.isFullyAuthenticated(Authentication) directly and a null authentication parameter is passed to it resulting in an erroneous true return value.


An application is not vulnerable if any of the following is true:

  *  The application does not use AuthenticationTrustResolver.isFullyAuthenticated(Authentication) directly.
  *  The application does not pass null to AuthenticationTrustResolver.isFullyAuthenticated
  *  The application only uses isFullyAuthenticated via  Method Security https://docs.spring.io/spring-security/reference/servlet/authorization/method-security.html  or  HTTP Request Security https://docs.spring.io/spring-security/reference/servlet/authorization/authorize-http-requests.html</description>
      <guid isPermaLink="false">CVE-2024-22234|2024-07-26T17:21:05.285Z</guid>
      <pubDate>Tue, 20 Feb 2024 07:02:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37084|2024-08-02T03:43:50.987Z -- spring -- spring%20cloud%20data%20flow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37084</link>
      <description>In Spring Cloud Data Flow versions prior to 2.11.4,  a malicious user who has access to the Skipper server api can use a crafted upload request to write an arbitrary file to any location on the file system which could lead to compromising the server</description>
      <guid isPermaLink="false">CVE-2024-37084|2024-08-02T03:43:50.987Z</guid>
      <pubDate>Thu, 25 Jul 2024 09:17:50 +0000</pubDate>
    </item>
  </channel>
</rss>
