<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for FreshRSS -- FreshRSS</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/freshrss/freshrss.rss</link>
    <description>The latest CVEs for FreshRSS -- FreshRSS</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 21:22:40 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-22481|2024-08-02T10:13:48.395Z -- freshrss -- freshrss
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-22481</link>
      <description>FreshRSS is a self-hosted RSS feed aggregator. When using the greader API, the provided password is logged in clear in `users/_/log_api.txt` in the case where the authentication fails. The issues occurs in `authorizationToUser()` in `greader.php`. If there is an issue with the request or the credentials, `unauthorized()` or `badRequest()` is called. Both these functions are printing the return of `debugInfo()` in the logs.  `debugInfo()` will return the content of the request. By default, this will be saved in `users/_/log_api.txt` and if the const `COPY_LOG_TO_SYSLOG` is true, in syslogs as well. Exploiting this issue requires having access to logs produced by FreshRSS. Using the information from the logs, a malicious individual could get users' API keys (would be displayed if the users fills in a bad username) or passwords.</description>
      <guid isPermaLink="false">CVE-2023-22481|2024-08-02T10:13:48.395Z</guid>
      <pubDate>Mon, 06 Mar 2023 17:33:03 +0000</pubDate>
    </item>
  </channel>
</rss>
