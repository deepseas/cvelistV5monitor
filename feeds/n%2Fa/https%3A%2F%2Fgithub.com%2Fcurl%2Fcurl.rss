<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for n/a -- https://github.com/curl/curl</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/n%2Fa/https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl.rss</link>
    <description>The latest CVEs for n/a -- https://github.com/curl/curl</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Wed, 12 Jun 2024 11:24:38 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-28320|2023-10-11T10:06:23.211995 -- n%2Fa -- https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-28320</link>
      <description>A denial of service vulnerability exists in curl &lt;v8.1.0 in the way libcurl provides several different backends for resolving host names, selected at build time. If it is built to use the synchronous resolver, it allows name resolves to time-out slow operations using `alarm()` and `siglongjmp()`. When doing this, libcurl used a global buffer that was not mutex protected and a multi-threaded application might therefore crash or otherwise misbehave.</description>
      <guid isPermaLink="false">CVE-2023-28320|2023-10-11T10:06:23.211995</guid>
      <pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-28321|2023-10-11T14:06:17.325081 -- n%2Fa -- https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-28321</link>
      <description>An improper certificate validation vulnerability exists in curl &lt;v8.1.0 in the way it supports matching of wildcard patterns when listed as "Subject Alternative Name" in TLS server certificates. curl can be built to use its own name matching function for TLS rather than one provided by a TLS library. This private wildcard matching function would match IDN (International Domain Name) hosts incorrectly and could as a result accept patterns that otherwise should mismatch. IDN hostnames are converted to puny code before used for certificate checks. Puny coded names always start with `xn--` and should not be allowed to pattern match, but the wildcard check in curl could still check for `x*`, which would match even though the IDN name most likely contained nothing even resembling an `x`.</description>
      <guid isPermaLink="false">CVE-2023-28321|2023-10-11T14:06:17.325081</guid>
      <pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-28322|2023-12-22T16:06:14.746366 -- n%2Fa -- https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-28322</link>
      <description>An information disclosure vulnerability exists in curl &lt;v8.1.0 when doing HTTP(S) transfers, libcurl might erroneously use the read callback (`CURLOPT_READFUNCTION`) to ask for data to send, even when the `CURLOPT_POSTFIELDS` option has been set, if the same handle previously wasused to issue a `PUT` request which used that callback. This flaw may surprise the application and cause it to misbehave and either send off the wrong data or use memory after free or similar in the second transfer. The problem exists in the logic for a reused handle when it is (expected to be) changed from a PUT to a POST.</description>
      <guid isPermaLink="false">CVE-2023-28322|2023-12-22T16:06:14.746366</guid>
      <pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-28319|2023-10-11T10:06:29.880561 -- n%2Fa -- https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-28319</link>
      <description>A use after free vulnerability exists in curl &lt;v8.1.0 in the way libcurl offers a feature to verify an SSH server's public key using a SHA 256 hash. When this check fails, libcurl would free the memory for the fingerprint before it returns an error message containing the (now freed) hash. This flaw risks inserting sensitive heap-based data into the error message that might be shown to users or otherwise get leaked and revealed.</description>
      <guid isPermaLink="false">CVE-2023-28319|2023-10-11T10:06:29.880561</guid>
      <pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-27533|2023-10-11T10:06:42.278011 -- n%2Fa -- https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-27533</link>
      <description>A vulnerability in input validation exists in curl &lt;8.0 during communication using the TELNET protocol may allow an attacker to pass on maliciously crafted user name and "telnet options" during server negotiation. The lack of proper input scrubbing allows an attacker to send content or perform option negotiation without the application's intent. This vulnerability could be exploited if an application allows user input, thereby enabling attackers to execute arbitrary code on the system.</description>
      <guid isPermaLink="false">CVE-2023-27533|2023-10-11T10:06:42.278011</guid>
      <pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-27535|2023-10-11T10:06:20.841607 -- n%2Fa -- https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-27535</link>
      <description>An authentication bypass vulnerability exists in libcurl &lt;8.0.0 in the FTP connection reuse feature that can result in wrong credentials being used during subsequent transfers. Previously created connections are kept in a connection pool for reuse if they match the current setup. However, certain FTP settings such as CURLOPT_FTP_ACCOUNT, CURLOPT_FTP_ALTERNATIVE_TO_USER, CURLOPT_FTP_SSL_CCC, and CURLOPT_USE_SSL were not included in the configuration match checks, causing them to match too easily. This could lead to libcurl using the wrong credentials when performing a transfer, potentially allowing unauthorized access to sensitive information.</description>
      <guid isPermaLink="false">CVE-2023-27535|2023-10-11T10:06:20.841607</guid>
      <pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-27538|2023-10-11T10:06:34.473900 -- n%2Fa -- https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-27538</link>
      <description>An authentication bypass vulnerability exists in libcurl prior to v8.0.0 where it reuses a previously established SSH connection despite the fact that an SSH option was modified, which should have prevented reuse. libcurl maintains a pool of previously used connections to reuse them for subsequent transfers if the configurations match. However, two SSH settings were omitted from the configuration check, allowing them to match easily, potentially leading to the reuse of an inappropriate connection.</description>
      <guid isPermaLink="false">CVE-2023-27538|2023-10-11T10:06:34.473900</guid>
      <pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-27534|2024-03-17T12:05:55.110367 -- n%2Fa -- https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-27534</link>
      <description>A path traversal vulnerability exists in curl &lt;8.0.0 SFTP implementation causes the tilde (~) character to be wrongly replaced when used as a prefix in the first path element, in addition to its intended use as the first element to indicate a path relative to the user's home directory. Attackers can exploit this flaw to bypass filtering or execute arbitrary code by crafting a path like /~2/foo while accessing a server with a specific user.</description>
      <guid isPermaLink="false">CVE-2023-27534|2024-03-17T12:05:55.110367</guid>
      <pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-27537|2023-10-11T10:06:37.578536 -- n%2Fa -- https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-27537</link>
      <description>A double free vulnerability exists in libcurl &lt;8.0.0 when sharing HSTS data between separate "handles". This sharing was introduced without considerations for do this sharing across separate threads but there was no indication of this fact in the documentation. Due to missing mutexes or thread locks, two threads sharing the same HSTS data could end up doing a double-free or use-after-free.</description>
      <guid isPermaLink="false">CVE-2023-27537|2023-10-11T10:06:37.578536</guid>
      <pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-27536|2023-10-11T10:06:17.316068 -- n%2Fa -- https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-27536</link>
      <description>An authentication bypass vulnerability exists libcurl &lt;8.0.0 in the connection reuse feature which can reuse previously established connections with incorrect user permissions due to a failure to check for changes in the CURLOPT_GSSAPI_DELEGATION option. This vulnerability affects krb5/kerberos/negotiate/GSSAPI transfers and could potentially result in unauthorized access to sensitive information. The safest option is to not reuse connections if the CURLOPT_GSSAPI_DELEGATION option has been changed.</description>
      <guid isPermaLink="false">CVE-2023-27536|2023-10-11T10:06:17.316068</guid>
      <pubDate>Thu, 30 Mar 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-23916|2023-10-11T10:06:40.617377 -- n%2Fa -- https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-23916</link>
      <description>An allocation of resources without limits or throttling vulnerability exists in curl &lt;v7.88.0 based on the "chained" HTTP compression algorithms, meaning that a server response can be compressed multiple times and potentially with differentalgorithms. The number of acceptable "links" in this "decompression chain" wascapped, but the cap was implemented on a per-header basis allowing a maliciousserver to insert a virtually unlimited number of compression steps simply byusing many headers. The use of such a decompression chain could result in a "malloc bomb", making curl end up spending enormous amounts of allocated heap memory, or trying to and returning out of memory errors.</description>
      <guid isPermaLink="false">CVE-2023-23916|2023-10-11T10:06:40.617377</guid>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-23915|2023-10-11T10:06:31.422007 -- n%2Fa -- https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-23915</link>
      <description>A cleartext transmission of sensitive information vulnerability exists in curl &lt;v7.88.0 that could cause HSTS functionality to behave incorrectly when multiple URLs are requested in parallel. Using its HSTS support, curl can be instructed to use HTTPS instead of using an insecure clear-text HTTP step even when HTTP is provided in the URL. This HSTS mechanism would however surprisingly fail when multiple transfers are done in parallel as the HSTS cache file gets overwritten by the most recentlycompleted transfer. A later HTTP-only transfer to the earlier host name would then *not* get upgraded properly to HSTS.</description>
      <guid isPermaLink="false">CVE-2023-23915|2023-10-11T10:06:31.422007</guid>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-23914|2023-10-11T10:06:32.942653 -- n%2Fa -- https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-23914</link>
      <description>A cleartext transmission of sensitive information vulnerability exists in curl &lt;v7.88.0 that could cause HSTS functionality fail when multiple URLs are requested serially. Using its HSTS support, curl can be instructed to use HTTPS instead of usingan insecure clear-text HTTP step even when HTTP is provided in the URL. ThisHSTS mechanism would however surprisingly be ignored by subsequent transferswhen done on the same command line because the state would not be properlycarried on.</description>
      <guid isPermaLink="false">CVE-2023-23914|2023-10-11T10:06:32.942653</guid>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
