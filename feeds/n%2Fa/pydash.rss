<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for n/a -- pydash</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/n%2Fa/pydash.rss</link>
    <description>The latest CVEs for n/a -- pydash</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Wed, 12 Jun 2024 11:24:43 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-26145|2023-09-28T05:00:01.328Z -- n%2Fa -- pydash
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-26145</link>
      <description>This affects versions of the package pydash before 6.0.0. A number of pydash methods such as pydash.objects.invoke() and pydash.collections.invoke_map() accept dotted paths (Deep Path Strings) to target a nested Python object, relative to the original source object. These paths can be used to target internal class attributes and dict items, to retrieve, modify or invoke nested Python objects.&#13;&#13;**Note:**&#13;&#13;The pydash.objects.invoke() method is vulnerable to Command Injection when the following prerequisites are satisfied:&#13;&#13;1) The source object (argument 1) is not a built-in object such as list/dict (otherwise, the __init__.__globals__ path is not accessible)&#13;&#13;2) The attacker has control over argument 2 (the path string) and argument 3 (the argument to pass to the invoked method)&#13;&#13;&#13;The pydash.collections.invoke_map() method is also vulnerable, but is harder to exploit as the attacker does not have direct control over the argument to be passed to the invoked function.</description>
      <guid isPermaLink="false">CVE-2023-26145|2023-09-28T05:00:01.328Z</guid>
      <pubDate>Thu, 28 Sep 2023 05:00:01 +0000</pubDate>
    </item>
  </channel>
</rss>
