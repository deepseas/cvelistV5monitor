<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for dompdf -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/dompdf/all.rss</link>
    <description>The latest CVEs for dompdf -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 21:22:40 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-23924|2024-08-02T10:42:27.102Z -- dompdf -- dompdf
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-23924</link>
      <description>Dompdf is an HTML to PDF converter. The URI validation on dompdf 2.0.1 can be bypassed on SVG parsing by passing `&lt;image&gt;` tags with uppercase letters. This may lead to arbitrary object unserialize on PHP &lt; 8, through the `phar` URL wrapper. An attacker can exploit the vulnerability to call arbitrary URL with arbitrary protocols, if they can provide a SVG file to dompdf. In PHP versions before 8.0.0, it leads to arbitrary unserialize, that will lead to the very least to an arbitrary file deletion and even remote code execution, depending on classes that are available.
</description>
      <guid isPermaLink="false">CVE-2023-23924|2024-08-02T10:42:27.102Z</guid>
      <pubDate>Tue, 31 Jan 2023 23:54:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-24813|2024-08-02T11:03:19.250Z -- dompdf -- dompdf
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-24813</link>
      <description>Dompdf is an HTML to PDF converter written in php. Due to the difference in the attribute parser of Dompdf and php-svg-lib, an attacker can still call arbitrary URLs with arbitrary protocols. Dompdf parses the href attribute of `image` tags and respects `xlink:href` even if `href` is specified. However, php-svg-lib, which is later used to parse the svg file, parses the href attribute. Since `href` is respected if both `xlink:href` and `href` is specified, it's possible to bypass the protection on the Dompdf side by providing an empty `xlink:href` attribute. An attacker can exploit the vulnerability to call arbitrary URLs with arbitrary protocols if they provide an SVG file to the Dompdf. In PHP versions before 8.0.0, it leads to arbitrary unserialize, which will lead, at the very least, to arbitrary file deletion and might lead to remote code execution, depending on available classes. This vulnerability has been addressed in commit `95009ea98` which has been included in release version 2.0.3. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2023-24813|2024-08-02T11:03:19.250Z</guid>
      <pubDate>Tue, 07 Feb 2023 18:05:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-25117|2024-02-21T16:25:17.970Z -- dompdf -- php-svg-lib</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-25117</link>
      <description>php-svg-lib is a scalable vector graphics (SVG) file parsing/rendering library. Prior to version 0.5.2, php-svg-lib fails to validate that font-family doesn't contain a PHAR url, which might leads to RCE on PHP &lt; 8.0, and doesn't validate if external references are allowed. This might leads to bypass of restrictions or RCE on projects that are using it, if they do not strictly revalidate the fontName that is passed by php-svg-lib. The `Style::fromAttributes(`), or the `Style::parseCssStyle()` should check the content of the `font-family` and prevents it to use a PHAR url, to avoid passing an invalid and dangerous `fontName` value to other libraries. The same check as done in the `Style::fromStyleSheets` might be reused. Libraries using this library as a dependency might be vulnerable to some bypass of restrictions, or even remote code execution, if they do not double check the value of the `fontName` that is passed by php-svg-lib. Version 0.5.2 contains a fix for this issue.</description>
      <guid isPermaLink="false">CVE-2024-25117|2024-02-21T16:25:17.970Z</guid>
      <pubDate>Wed, 21 Feb 2024 16:25:17 +0000</pubDate>
    </item>
  </channel>
</rss>
