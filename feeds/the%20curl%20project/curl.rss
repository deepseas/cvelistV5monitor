<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for The curl Project -- curl</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/the%20curl%20project/curl.rss</link>
    <description>The latest CVEs for The curl Project -- curl</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 23:23:18 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2019-3822|2024-08-04T19:19:18.599Z -- the%20curl%20project -- curl
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3822</link>
      <description>libcurl versions from 7.36.0 to before 7.64.0 are vulnerable to a stack-based buffer overflow. The function creating an outgoing NTLM type-3 header (`lib/vauth/ntlm.c:Curl_auth_create_ntlm_type3_message()`), generates the request HTTP header contents based on previously received data. The check that exists to prevent the local buffer from getting overflowed is implemented wrongly (using unsigned math) and as such it does not prevent the overflow from happening. This output data can grow larger than the local buffer if very large 'nt response' data is extracted from a previous NTLMv2 header provided by the malicious or broken HTTP server. Such a 'large value' needs to be around 1000 bytes or more. The actual payload data copied to the target buffer comes from the NTLMv2 type-2 response header.</description>
      <guid isPermaLink="false">CVE-2019-3822|2024-08-04T19:19:18.599Z</guid>
      <pubDate>Wed, 06 Feb 2019 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-3823|2024-08-04T19:19:18.612Z -- the%20curl%20project -- curl
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-3823</link>
      <description>libcurl versions from 7.34.0 to before 7.64.0 are vulnerable to a heap out-of-bounds read in the code handling the end-of-response for SMTP. If the buffer passed to `smtp_endofresp()` isn't NUL terminated and contains no character ending the parsed number, and `len` is set to 5, then the `strtol()` call reads beyond the allocated buffer. The read contents will not be returned to the caller.</description>
      <guid isPermaLink="false">CVE-2019-3823|2024-08-04T19:19:18.612Z</guid>
      <pubDate>Wed, 06 Feb 2019 20:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
