<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for requarks -- wiki</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/requarks/wiki.rss</link>
    <description>The latest CVEs for requarks -- wiki</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 12:25:39 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-43855|2024-08-04T04:10:16.298Z -- requarks -- wiki
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-43855</link>
      <description>Wiki.js is a wiki app built on node.js. Wiki.js 2.5.263 and earlier is vulnerable to stored cross-site scripting through a SVG file upload made via a custom request with a fake MIME type. By creating a crafted SVG file, a malicious Wiki.js user may stage a stored cross-site scripting attack. This allows the attacker to execute malicious JavaScript when the SVG is viewed directly by other users. Scripts do not execute when loaded inside a page via normal `&lt;img&gt;` tags. The malicious SVG can only be uploaded by crafting a custom request to the server with a fake MIME type. A patch in version 2.5.264 fixes this vulnerability by adding an additional file extension verification check to the optional (enabled by default) SVG sanitization step to all file uploads that match the SVG mime type. As a workaround, disable file upload for all non-trusted users.</description>
      <guid isPermaLink="false">CVE-2021-43855|2024-08-04T04:10:16.298Z</guid>
      <pubDate>Mon, 27 Dec 2021 18:05:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-43842|2024-08-04T04:10:16.396Z -- requarks -- wiki
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-43842</link>
      <description>Wiki.js is a wiki app built on Node.js. Wiki.js versions 2.5.257 and earlier are vulnerable to stored cross-site scripting through a SVG file upload. By creating a crafted SVG file, a malicious Wiki.js user may stage a stored cross-site scripting attack. This allows the attacker to execute malicious JavaScript when the SVG is viewed directly by other users. Scripts do not execute when loaded inside a page via normal `&lt;img&gt;` tags. Commit 5d3e81496fba1f0fbd64eeb855f30f69a9040718 fixes this vulnerability by adding an optional (enabled by default) SVG sanitization step to all file uploads that match the SVG mime type. As a workaround, disable file upload for all non-trusted users. Wiki.js version 2.5.260 is the first production version to contain a patch. Version 2.5.258 is the first development build to contain a patch and is available only as a Docker image as requarks/wiki:canary-2.5.258.</description>
      <guid isPermaLink="false">CVE-2021-43842|2024-08-04T04:10:16.396Z</guid>
      <pubDate>Mon, 20 Dec 2021 22:30:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-43800|2024-08-04T04:03:08.802Z -- requarks -- wiki
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-43800</link>
      <description>Wiki.js is a wiki app built on Node.js. Prior to version 2.5.254, directory traversal outside of Wiki.js context is possible when a storage module with local asset cache fetching is enabled on a Windows host. A malicious user can potentially read any file on the file system by crafting a special URL that allows for directory traversal. This is only possible on a Wiki.js server running on Windows, when a storage module implementing local asset cache (e.g Local File System or Git) is enabled and that no web application firewall solution (e.g. cloudflare) strips potentially malicious URLs. Commit number 414033de9dff66a327e3f3243234852f468a9d85 fixes this vulnerability by sanitizing the path before it is passed on to the storage module. The sanitization step removes any windows directory traversal sequences from the path. As a workaround, disable any storage module with local asset caching capabilities (Local File System, Git).</description>
      <guid isPermaLink="false">CVE-2021-43800|2024-08-04T04:03:08.802Z</guid>
      <pubDate>Mon, 06 Dec 2021 18:50:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-43856|2024-08-04T04:10:16.851Z -- requarks -- wiki
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-43856</link>
      <description>Wiki.js is a wiki app built on Node.js. Wiki.js 2.5.263 and earlier is vulnerable to stored cross-site scripting through non-image file uploads for file types that can be viewed directly inline in the browser. By creating a malicious file which can execute inline JS when viewed in the browser (e.g. XML files), a malicious Wiki.js user may stage a stored cross-site scripting attack. This allows the attacker to execute malicious JavaScript when the file is viewed directly by other users. The file must be opened directly by the user and will not trigger directly in a normal Wiki.js page. A patch in version 2.5.264 fixes this vulnerability by adding an optional (enabled by default) force download flag to all non-image file types, preventing the file from being viewed inline in the browser. As a workaround, disable file upload for all non-trusted users. --- Thanks to @Haxatron for reporting this vulnerability. Initially reported via https://huntr.dev/bounties/266bff09-00d9-43ca-a4bb-bb540642811f/</description>
      <guid isPermaLink="false">CVE-2021-43856|2024-08-04T04:10:16.851Z</guid>
      <pubDate>Mon, 27 Dec 2021 18:05:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34710|2024-06-06T19:10:38.387Z -- requarks -- wiki</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34710</link>
      <description>Wiki.js is al wiki app built on Node.js. Client side template injection was discovered, that could allow an attacker to inject malicious JavaScript into the content section of pages that would execute once a victim loads the page that contains the payload. This was possible through the injection of a invalid HTML tag with a template injection payload on the next line. This vulnerability is fixed in 2.5.303.</description>
      <guid isPermaLink="false">CVE-2024-34710|2024-06-06T19:10:38.387Z</guid>
      <pubDate>Mon, 20 May 2024 21:59:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34710|2024-08-02T02:59:22.635Z -- requarks -- wiki</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-34710</link>
      <description>Wiki.js is al wiki app built on Node.js. Client side template injection was discovered, that could allow an attacker to inject malicious JavaScript into the content section of pages that would execute once a victim loads the page that contains the payload. This was possible through the injection of a invalid HTML tag with a template injection payload on the next line. This vulnerability is fixed in 2.5.303.</description>
      <guid isPermaLink="false">CVE-2024-34710|2024-08-02T02:59:22.635Z</guid>
      <pubDate>Mon, 20 May 2024 21:59:16 +0000</pubDate>
    </item>
  </channel>
</rss>
