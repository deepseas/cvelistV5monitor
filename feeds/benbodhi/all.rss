<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for benbodhi -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/benbodhi/all.rss</link>
    <description>The latest CVEs for benbodhi -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 22:22:26 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-4022|2024-08-03T01:27:54.103Z -- benbodhi -- svg%20support
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-4022</link>
      <description>The SVG Support plugin for WordPress defaults to insecure settings in version 2.5 and 2.5.1. SVG files containing malicious javascript are not sanitized. While version 2.5 adds the ability to sanitize image as they are uploaded, the plugin defaults to disable sanitization and does not restrict SVG upload to only administrators. This allows authenticated attackers, with author-level privileges and higher, to upload malicious SVG files that can be embedded in posts and pages by higher privileged users. Additionally, the embedded JavaScript is also triggered on visiting the image URL, which allows an attacker to execute malicious code in browsers visiting that URL.</description>
      <guid isPermaLink="false">CVE-2022-4022|2024-08-03T01:27:54.103Z</guid>
      <pubDate>Wed, 16 Nov 2022 13:23:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6708|2024-08-02T08:35:14.901Z -- benbodhi -- svg%20support</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6708</link>
      <description>The SVG Support plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the SVG upload feature in all versions up to, and including, 2.5.5 due to insufficient input sanitization and output escaping, even when the 'Sanitize SVG while uploading' feature is enabled. This makes it possible for authenticated attackers, with author-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page. Note that successful exploitation of this vulnerability requires the administrator to allow author-level users to upload SVG files.</description>
      <guid isPermaLink="false">CVE-2023-6708|2024-08-02T08:35:14.901Z</guid>
      <pubDate>Thu, 18 Jul 2024 02:38:33 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6708|2024-07-18T02:38:33.871Z -- benbodhi -- svg%20support</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6708</link>
      <description>The SVG Support plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the SVG upload feature in all versions up to, and including, 2.5.5 due to insufficient input sanitization and output escaping, even when the 'Sanitize SVG while uploading' feature is enabled. This makes it possible for authenticated attackers, with author-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page. Note that successful exploitation of this vulnerability requires the administrator to allow author-level users to upload SVG files.</description>
      <guid isPermaLink="false">CVE-2023-6708|2024-07-18T02:38:33.871Z</guid>
      <pubDate>Thu, 18 Jul 2024 02:38:33 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6708|2024-07-18T13:36:40.409Z -- benbodhi -- svg%20support</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6708</link>
      <description>The SVG Support plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the SVG upload feature in all versions up to, and including, 2.5.5 due to insufficient input sanitization and output escaping, even when the 'Sanitize SVG while uploading' feature is enabled. This makes it possible for authenticated attackers, with author-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page. Note that successful exploitation of this vulnerability requires the administrator to allow author-level users to upload SVG files.</description>
      <guid isPermaLink="false">CVE-2023-6708|2024-07-18T13:36:40.409Z</guid>
      <pubDate>Thu, 18 Jul 2024 02:38:33 +0000</pubDate>
    </item>
  </channel>
</rss>
