<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for matter-labs -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/matter-labs/all.rss</link>
    <description>The latest CVEs for matter-labs -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 15 Aug 2024 21:22:26 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-43366|2024-08-15T20:11:56.456Z -- matter-labs -- era-compiler-vyper
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-43366</link>
      <description>zkvyper is a Vyper compiler. Starting in version 1.3.12 and prior to version 1.5.3, since LLL IR has no Turing-incompletness restrictions, it is compiled to a loop with a much more late exit condition. It leads to a loss of funds or other unwanted behavior if the loop body contains it. However, more real-life use cases like iterating over an array are not affected. No contracts were affected by this issue, which was fixed in version 1.5.3. Upgrading and redeploying affected contracts is the only way to avoid the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-43366|2024-08-15T20:11:56.456Z</guid>
      <pubDate>Thu, 15 Aug 2024 20:11:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38533|2024-08-02T04:12:25.327Z -- matter-labs -- era-compiler-vyper</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38533</link>
      <description>ZKsync Era is a layer 2 rollup that uses zero-knowledge proofs to scale Ethereum. There is possible invalid stack access due to the addresses used to access the stack not properly being converted to cells. This issue has been patched in version 1.5.0.</description>
      <guid isPermaLink="false">CVE-2024-38533|2024-08-02T04:12:25.327Z</guid>
      <pubDate>Fri, 28 Jun 2024 21:18:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34704|2024-08-02T02:59:21.780Z -- matter-labs -- era-compiler-solidity</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-34704</link>
      <description>era-compiler-solidity is the ZKsync compiler for Solidity.  The problem occurred during instruction selection in the `DAGCombine` phase while visiting the XOR operation. The issue arises when attempting to fold the expression `!(x cc y)` into `(x !cc y)`. To perform this transformation, the second operand of XOR should be a constant representing the true value. However, it was incorrectly assumed that -1 represents the true value, when in fact, 1 is the correct representation, so this transformation for this case should be skipped. This vulnerability is fixed in 1.4.1.</description>
      <guid isPermaLink="false">CVE-2024-34704|2024-08-02T02:59:21.780Z</guid>
      <pubDate>Mon, 13 May 2024 19:13:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38533|2024-06-28T21:18:30.547Z -- matter-labs -- era-compiler-vyper</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38533</link>
      <description>ZKsync Era is a layer 2 rollup that uses zero-knowledge proofs to scale Ethereum. There is possible invalid stack access due to the addresses used to access the stack not properly being converted to cells. This issue has been patched in version 1.5.0.</description>
      <guid isPermaLink="false">CVE-2024-38533|2024-06-28T21:18:30.547Z</guid>
      <pubDate>Fri, 28 Jun 2024 21:18:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35229|2024-05-27T16:20:27.432Z -- matter-labs -- era-compiler-solidity</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35229</link>
      <description>ZKsync Era is a layer 2 rollup that uses zero-knowledge proofs to scale Ethereum. Prior to version 1.3.10, there is a very specific pattern `f(a(),b()); check_if_a_executed_last()` in Yul that exposes a bug in evaluation order of Yul function arguments. This vulnerability has been fixed in version 1.3.10. As a workaround, update and redeploy affected contracts.</description>
      <guid isPermaLink="false">CVE-2024-35229|2024-05-27T16:20:27.432Z</guid>
      <pubDate>Mon, 27 May 2024 16:20:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34704|2024-06-04T17:42:30.012Z -- matter-labs -- era-compiler-solidity</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34704</link>
      <description>era-compiler-solidity is the ZKsync compiler for Solidity.  The problem occurred during instruction selection in the `DAGCombine` phase while visiting the XOR operation. The issue arises when attempting to fold the expression `!(x cc y)` into `(x !cc y)`. To perform this transformation, the second operand of XOR should be a constant representing the true value. However, it was incorrectly assumed that -1 represents the true value, when in fact, 1 is the correct representation, so this transformation for this case should be skipped. This vulnerability is fixed in 1.4.1.</description>
      <guid isPermaLink="false">CVE-2024-34704|2024-06-04T17:42:30.012Z</guid>
      <pubDate>Mon, 13 May 2024 19:13:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38533|2024-07-02T20:45:48.581Z -- matter-labs -- era-compiler-vyper</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38533</link>
      <description>ZKsync Era is a layer 2 rollup that uses zero-knowledge proofs to scale Ethereum. There is possible invalid stack access due to the addresses used to access the stack not properly being converted to cells. This issue has been patched in version 1.5.0.</description>
      <guid isPermaLink="false">CVE-2024-38533|2024-07-02T20:45:48.581Z</guid>
      <pubDate>Fri, 28 Jun 2024 21:18:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35229|2024-08-02T03:07:46.955Z -- matter-labs -- era-compiler-solidity</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-35229</link>
      <description>ZKsync Era is a layer 2 rollup that uses zero-knowledge proofs to scale Ethereum. Prior to version 1.3.10, there is a very specific pattern `f(a(),b()); check_if_a_executed_last()` in Yul that exposes a bug in evaluation order of Yul function arguments. This vulnerability has been fixed in version 1.3.10. As a workaround, update and redeploy affected contracts.</description>
      <guid isPermaLink="false">CVE-2024-35229|2024-08-02T03:07:46.955Z</guid>
      <pubDate>Mon, 27 May 2024 16:20:27 +0000</pubDate>
    </item>
  </channel>
</rss>
