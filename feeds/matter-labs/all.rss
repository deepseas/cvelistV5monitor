<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for matter-labs -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/matter-labs/all.rss</link>
    <description>The latest CVEs for matter-labs -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Wed, 12 Jun 2024 11:24:19 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-46232|2023-10-25T21:01:51.692Z -- matter-labs -- era-compiler-vyper
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-46232</link>
      <description>era-compiler-vyper is the EraVM Vyper compiler for zkSync Era, a layer 2 rollup that uses zero-knowledge proofs to scale Ethereum. Prior to era-compiler-vype version 1.3.10, a bug prevented the initialization of the first immutable variable for Vyper contracts meeting certain criteria. The problem arises when there is a String or Array with more 256-bit words allocated than initialized. It results in the second wordâ€™s index unset, that is effectively set to 0, so the first immutable value with the actual 0 index is overwritten in the ImmutableSimulator. Version 1.3.10 fixes this issue by setting all indexes in advance. The problem will go away, but it will get more expensive if the user allocates a lot of uninitialized space, e.g. `String[4096]`. Upgrading and redeploying affected contracts is the only way of working around the issue.
</description>
      <guid isPermaLink="false">CVE-2023-46232|2023-10-25T21:01:51.692Z</guid>
      <pubDate>Wed, 25 Oct 2023 21:01:51 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34704|2024-06-04T17:42:30.012Z -- matter-labs -- era-compiler-solidity
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34704</link>
      <description>era-compiler-solidity is the ZKsync compiler for Solidity.  The problem occurred during instruction selection in the `DAGCombine` phase while visiting the XOR operation. The issue arises when attempting to fold the expression `!(x cc y)` into `(x !cc y)`. To perform this transformation, the second operand of XOR should be a constant representing the true value. However, it was incorrectly assumed that -1 represents the true value, when in fact, 1 is the correct representation, so this transformation for this case should be skipped. This vulnerability is fixed in 1.4.1.</description>
      <guid isPermaLink="false">CVE-2024-34704|2024-06-04T17:42:30.012Z</guid>
      <pubDate>Mon, 13 May 2024 19:13:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35229|2024-05-27T16:20:27.432Z -- matter-labs -- era-compiler-solidity
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35229</link>
      <description>ZKsync Era is a layer 2 rollup that uses zero-knowledge proofs to scale Ethereum. Prior to version 1.3.10, there is a very specific pattern `f(a(),b()); check_if_a_executed_last()` in Yul that exposes a bug in evaluation order of Yul function arguments. This vulnerability has been fixed in version 1.3.10. As a workaround, update and redeploy affected contracts.
</description>
      <guid isPermaLink="false">CVE-2024-35229|2024-05-27T16:20:27.432Z</guid>
      <pubDate>Mon, 27 May 2024 16:20:27 +0000</pubDate>
    </item>
  </channel>
</rss>
