<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for XjSv -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/xjsv/all.rss</link>
    <description>The latest CVEs for XjSv -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 18 Jul 2024 14:22:17 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-39679|2024-07-18T13:17:11.934Z -- xjsv -- cooked
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39679</link>
      <description>Cooked is a recipe plugin for WordPress. The Cooked plugin for WordPress is vulnerable to Cross-Site Request Forgery (CSRF) in versions up to, and including, 1.7.15.4 due to missing or incorrect nonce validation on the AJAX action handler. This vulnerability could allow an attacker to trick users into performing an action they didn't intend to perform under their current authentication. This issue has been addressed in release version 1.8.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-39679|2024-07-18T13:17:11.934Z</guid>
      <pubDate>Wed, 17 Jul 2024 23:47:51 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39680|2024-07-18T13:42:50.598Z -- xjsv -- cooked
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39680</link>
      <description>Cooked is a recipe plugin for WordPress. The Cooked plugin for WordPress is vulnerable to Cross-Site Request Forgery (CSRF) in versions up to, and including, 1.7.15.4 due to missing or incorrect nonce validation on the AJAX action handler. This vulnerability could allow an attacker to trick users into performing an action they didn't intend to perform under their current authentication. This issue has been addressed in release version 1.8.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-39680|2024-07-18T13:42:50.598Z</guid>
      <pubDate>Wed, 17 Jul 2024 23:47:52 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39310|2024-07-01T21:19:35.867Z -- xjsv -- basil</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39310</link>
      <description>The Basil recipe theme for WordPress is vulnerable to Persistent Cross-Site Scripting (XSS) via the `post_title` parameter in versions up to, and including, 2.0.4 due to insufficient input sanitization and output escaping. This vulnerability allows authenticated attackers with contributor-level access and above to inject arbitrary web scripts in pages that will execute whenever a user accesses a compromised page. Because the of the default WordPress validation, it is not possible to insert the payload directly but if the Cooked plugin is installed, it is possible to create a recipe post type (cp_recipe) and inject the payload in the title field. Version 2.0.5 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-39310|2024-07-01T21:19:35.867Z</guid>
      <pubDate>Mon, 01 Jul 2024 21:19:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37308|2024-06-13T13:46:14.254Z -- xjsv -- cooked</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37308</link>
      <description>The Cooked Pro recipe plugin for WordPress is vulnerable to Persistent Cross-Site Scripting (XSS) via the `_recipe_settings[post_title]` parameter in versions up to, and including, 1.7.15.4 due to insufficient input sanitization and output escaping. This vulnerability allows authenticated attackers with contributor-level access and above to inject arbitrary web scripts in pages that will execute whenever a user accesses a compromised page. A patch is available at commit 8cf88f334ccbf11134080bbb655c66f1cfe77026 and will be part of version 1.8.0.</description>
      <guid isPermaLink="false">CVE-2024-37308|2024-06-13T13:46:14.254Z</guid>
      <pubDate>Thu, 13 Jun 2024 13:46:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37308|2024-06-13T15:43:28.264Z -- xjsv -- cooked</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37308</link>
      <description>The Cooked Pro recipe plugin for WordPress is vulnerable to Persistent Cross-Site Scripting (XSS) via the `_recipe_settings[post_title]` parameter in versions up to, and including, 1.7.15.4 due to insufficient input sanitization and output escaping. This vulnerability allows authenticated attackers with contributor-level access and above to inject arbitrary web scripts in pages that will execute whenever a user accesses a compromised page. A patch is available at commit 8cf88f334ccbf11134080bbb655c66f1cfe77026 and will be part of version 1.8.0.</description>
      <guid isPermaLink="false">CVE-2024-37308|2024-06-13T15:43:28.264Z</guid>
      <pubDate>Thu, 13 Jun 2024 13:46:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39310|2024-07-03T20:45:34.212Z -- xjsv -- basil</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39310</link>
      <description>The Basil recipe theme for WordPress is vulnerable to Persistent Cross-Site Scripting (XSS) via the `post_title` parameter in versions up to, and including, 2.0.4 due to insufficient input sanitization and output escaping. This vulnerability allows authenticated attackers with contributor-level access and above to inject arbitrary web scripts in pages that will execute whenever a user accesses a compromised page. Because the of the default WordPress validation, it is not possible to insert the payload directly but if the Cooked plugin is installed, it is possible to create a recipe post type (cp_recipe) and inject the payload in the title field. Version 2.0.5 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-39310|2024-07-03T20:45:34.212Z</guid>
      <pubDate>Mon, 01 Jul 2024 21:19:35 +0000</pubDate>
    </item>
  </channel>
</rss>
