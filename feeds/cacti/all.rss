<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Cacti -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/cacti/all.rss</link>
    <description>The latest CVEs for Cacti -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 26 Sep 2024 23:23:54 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-39510|2024-09-26T19:40:30.140Z -- cacti -- cacti
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39510</link>
      <description>Cacti is an open source operational monitoring and fault management framework. Affected versions are subject to a Stored Cross-Site-Scripting (XSS) Vulnerability allows an authenticated user to poison data stored in the _cacti_'s database. These data will be viewed by administrative _cacti_ accounts and execute JavaScript code in the victim's browser at view-time. The`reports_admin.php` script displays reporting information about graphs, devices, data sources etc.
CENSUS found that an adversary that is able to configure a malicious Device name, can deploy a stored XSS attack against any user of the same (or broader) privileges. A user that possesses the _General Administration&gt;Sites/Devices/Data_ permissions can configure the device names in _cacti_. This configuration occurs through `http://&lt;HOST&gt;/cacti/host.php`, while the rendered malicious payload is exhibited at `http://&lt;HOST&gt;/cacti/reports_admin.php` when the a graph with the maliciously altered device name is linked to the report. This vulnerability has been addressed in version 1.2.25. Users are advised to upgrade. Users unable to update should manually filter HTML output.</description>
      <guid isPermaLink="false">CVE-2023-39510|2024-09-26T19:40:30.140Z</guid>
      <pubDate>Tue, 05 Sep 2023 20:39:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-39358|2024-09-26T19:35:39.091Z -- cacti -- cacti
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39358</link>
      <description>Cacti is an open source operational monitoring and fault management framework. An authenticated SQL injection vulnerability was discovered which allows authenticated users to perform privilege escalation and remote code execution. The vulnerability resides in the `reports_user.php` file. In `ajax_get_branches`, the `tree_id` parameter is passed to the `reports_get_branch_select` function without any validation. This issue has been addressed in version 1.2.25. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2023-39358|2024-09-26T19:35:39.091Z</guid>
      <pubDate>Tue, 05 Sep 2023 21:00:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-39512|2024-09-26T19:41:08.085Z -- cacti -- cacti
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39512</link>
      <description>Cacti is an open source operational monitoring and fault management framework. Affected versions are subject to a Stored Cross-Site-Scripting (XSS) Vulnerability which allows an authenticated user to poison data stored in the _cacti_'s database. These data will be viewed by administrative _cacti_ accounts and execute JavaScript code in the victim's browser at view-time. The script under `data_sources.php` displays the data source management information (e.g. data source path, polling configuration, device name related to the datasource etc.) for different data visualizations of the _cacti_ app. _CENSUS_ found that an adversary that is able to configure a malicious device name, can deploy a stored XSS attack against any user of the same (or broader) privileges. A user that possesses the _General Administration&gt;Sites/Devices/Data_ permissions can configure the device names in _cacti_. This configuration occurs through `http://&lt;HOST&gt;/cacti/host.php`, while the rendered malicious payload is exhibited at `http://&lt;HOST&gt;/cacti/data_sources.php`. This vulnerability has been addressed in version 1.2.25. Users are advised to upgrade. Users unable to update should manually filter HTML output.</description>
      <guid isPermaLink="false">CVE-2023-39512|2024-09-26T19:41:08.085Z</guid>
      <pubDate>Tue, 05 Sep 2023 20:35:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-30534|2024-09-26T19:31:41.143Z -- cacti -- cacti
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-30534</link>
      <description>Cacti is an open source operational monitoring and fault management framework. There are two instances of insecure deserialization in Cacti version 1.2.24. While a viable gadget chain exists in Cacti’s vendor directory (phpseclib), the necessary gadgets are not included, making them inaccessible and the insecure deserializations not exploitable. Each instance of insecure deserialization is due to using the unserialize function without sanitizing the user input. Cacti has a “safe” deserialization that attempts to sanitize the content and check for specific values before calling unserialize, but it isn’t used in these instances. The vulnerable code lies in graphs_new.php, specifically within the host_new_graphs_save function. This issue has been addressed in version 1.2.25. Users are advised to upgrade. There are no known workarounds for this vulnerability.
</description>
      <guid isPermaLink="false">CVE-2023-30534|2024-09-26T19:31:41.143Z</guid>
      <pubDate>Tue, 05 Sep 2023 21:21:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-39366|2024-09-26T19:39:54.617Z -- cacti -- cacti
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39366</link>
      <description>Cacti is an open source operational monitoring and fault management framework. Affected versions are subject to a Stored Cross-Site-Scripting (XSS) Vulnerability allows an authenticated user to poison data stored in the _cacti_'s database. These data will be viewed by administrative _cacti_ accounts and execute JavaScript code in the victim's browser at view-time. The `data_sources.php` script displays the data source management information (e.g. data source path, polling configuration etc.) for different data visualizations of the _cacti_ app. 
CENSUS found that an adversary that is able to configure a malicious Device name, can deploy a stored XSS attack against any user of the same (or broader) privileges. A user that possesses the _General Administration&gt;Sites/Devices/Data_ permissions can configure the device names in _cacti_. This configuration occurs through `http://&lt;HOST&gt;/cacti/host.php`, while the rendered malicious payload is exhibited at `http://&lt;HOST&gt;/cacti/data_sources.php`. This vulnerability has been addressed in version 1.2.25. Users are advised to upgrade. Users unable to update should manually filter HTML output.</description>
      <guid isPermaLink="false">CVE-2023-39366|2024-09-26T19:39:54.617Z</guid>
      <pubDate>Tue, 05 Sep 2023 20:42:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-39511|2024-09-26T20:06:27.728Z -- cacti -- cacti
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39511</link>
      <description>Cacti is an open source operational monitoring and fault management framework. Affected versions are subject to a Stored Cross-Site-Scripting (XSS) Vulnerability which allows an authenticated user to poison data stored in the _cacti_'s database. These data will be viewed by administrative _cacti_ accounts and execute JavaScript code in the victim's browser at view-time. The script under `reports_admin.php` displays reporting information about graphs, devices, data sources etc. _CENSUS_ found that an adversary that is able to configure a malicious device name, related to a graph attached to a report, can deploy a stored XSS attack against any super user who has privileges of viewing the `reports_admin.php` page, such as administrative accounts. A user that possesses the _General Administration&gt;Sites/Devices/Data_ permissions can configure the device names in _cacti_. This configuration occurs through `http://&lt;HOST&gt;/cacti/host.php`, while the rendered malicious payload is exhibited at `http://&lt;HOST&gt;/cacti/reports_admin.php` when the a graph with the maliciously altered device name is linked to the report. This issue has been addressed in version 1.2.25. Users are advised to upgrade. Users unable to upgrade should manually filter HTML output.
</description>
      <guid isPermaLink="false">CVE-2023-39511|2024-09-26T20:06:27.728Z</guid>
      <pubDate>Wed, 06 Sep 2023 17:40:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-39359|2024-09-26T19:39:20.387Z -- cacti -- cacti
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39359</link>
      <description>Cacti is an open source operational monitoring and fault management framework. An authenticated SQL injection vulnerability was discovered which allows authenticated users to perform privilege escalation and remote code execution. The vulnerability resides in the `graphs.php` file. When dealing with the cases of ajax_hosts and ajax_hosts_noany, if the `site_id` parameter is greater than 0, it is directly reflected in the WHERE clause of the SQL statement. This creates an SQL injection vulnerability. This issue has been addressed in version 1.2.25. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2023-39359|2024-09-26T19:39:20.387Z</guid>
      <pubDate>Tue, 05 Sep 2023 20:59:37 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-39514|2024-09-26T19:41:45.210Z -- cacti -- cacti
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39514</link>
      <description>Cacti is an open source operational monitoring and fault management framework. Affected versions are subject to a Stored Cross-Site-Scripting (XSS) Vulnerability which allows an authenticated user to poison data stored in the _cacti_'s database. These data will be viewed by administrative _cacti_ accounts and execute JavaScript code in the victim's browser at view-time. The script under `graphs.php` displays graph details such as data-source paths, data template information and graph related fields. _CENSUS_ found that an adversary that is able to configure either a data-source template with malicious code appended in the data-source name or a device with a malicious payload injected in the device name, may deploy a stored XSS attack against any user with _General Administration&gt;Graphs_ privileges. A user that possesses the _Template Editor&gt;Data Templates_ permissions can configure the data-source name in _cacti_. Please note that this may be a _low privileged_ user. This configuration occurs through `http://&lt;HOST&gt;/cacti/data_templates.php` by editing an existing or adding a new data template. If a template is linked to a graph then the formatted template name will be rendered in the graph's management page. A user that possesses the _General Administration&gt;Sites/Devices/Data_ permissions can configure the device name in _cacti_. This vulnerability has been addressed in version 1.2.25. Users are advised to upgrade. Users unable to upgrade should add manual HTML escaping.
</description>
      <guid isPermaLink="false">CVE-2023-39514|2024-09-26T19:41:45.210Z</guid>
      <pubDate>Tue, 05 Sep 2023 20:02:02 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-31132|2024-09-26T19:32:31.240Z -- cacti -- cacti
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-31132</link>
      <description>Cacti is an open source operational monitoring and fault management framework. Affected versions are subject to a privilege escalation vulnerability. A low-privileged OS user with access to a Windows host where Cacti is installed can create arbitrary PHP files in a web document directory. The user can then execute the PHP files under the security context of SYSTEM. This allows an attacker to escalate privilege from a normal user account to SYSTEM. This issue has been addressed in version 1.2.25. Users are advised to upgrade. There are no known workarounds for this vulnerability.
</description>
      <guid isPermaLink="false">CVE-2023-31132|2024-09-26T19:32:31.240Z</guid>
      <pubDate>Tue, 05 Sep 2023 21:19:22 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34340|2024-08-21T20:47:27.400Z -- cacti -- cacti</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-34340</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to version 1.2.27, Cacti calls `compat_password_hash` when users set their password. `compat_password_hash` use `password_hash` if there is it, else use `md5`. When verifying password, it calls `compat_password_verify`. In `compat_password_verify`, `password_verify` is called if there is it, else use `md5`. `password_verify` and `password_hash` are supported on PHP &lt; 5.5.0, following PHP manual. The vulnerability is in `compat_password_verify`. Md5-hashed user input is compared with correct password in database by `$md5 == $hash`. It is a loose comparison, not `===`. It is a type juggling vulnerability. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-34340|2024-08-21T20:47:27.400Z</guid>
      <pubDate>Mon, 13 May 2024 15:26:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31458|2024-08-02T01:52:57.036Z -- cacti -- cacti</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31458</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to version 1.2.27, some of the data stored in `form_save()` function in `graph_template_inputs.php` is not thoroughly checked and is used to concatenate the SQL statement in `draw_nontemplated_fields_graph_item()` function from `lib/html_form_templates.php` , finally resulting in SQL injection. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-31458|2024-08-02T01:52:57.036Z</guid>
      <pubDate>Mon, 13 May 2024 15:07:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-30268|2024-08-02T01:32:06.680Z -- cacti -- cacti</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-30268</link>
      <description>Cacti provides an operational monitoring and fault management framework. A reflected cross-site scripting vulnerability on the 1.3.x DEV branch allows attackers to obtain cookies of administrator and other users and fake their login using obtained cookies. This issue is fixed in commit a38b9046e9772612fda847b46308f9391a49891e.</description>
      <guid isPermaLink="false">CVE-2024-30268|2024-08-02T01:32:06.680Z</guid>
      <pubDate>Mon, 13 May 2024 14:56:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31443|2024-08-02T01:52:56.980Z -- cacti -- cacti</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31443</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to 1.2.27, some of the data stored in `form_save()` function in `data_queries.php` is not thoroughly checked and is used to concatenate the HTML statement in `grow_right_pane_tree()` function from `lib/html.php` , finally resulting in cross-site scripting. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-31443|2024-08-02T01:52:56.980Z</guid>
      <pubDate>Mon, 13 May 2024 15:01:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31445|2024-08-02T01:52:56.986Z -- cacti -- cacti</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31445</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to version 1.2.27, a SQL injection vulnerability in `automation_get_new_graphs_sql` function of `api_automation.php` allows authenticated users to exploit these SQL injection vulnerabilities to perform privilege escalation and remote code execution. In `api_automation.php` line 856, the `get_request_var('filter')` is being concatenated into the SQL statement without any sanitization. In `api_automation.php` line 717, The filter of `'filter'` is `FILTER_DEFAULT`, which means there is no filter for it. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-31445|2024-08-02T01:52:56.986Z</guid>
      <pubDate>Mon, 13 May 2024 15:05:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31460|2024-08-02T01:52:57.065Z -- cacti -- cacti</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31460</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to version 1.2.27, some of the data stored in `automation_tree_rules.php` is not thoroughly checked and is used to concatenate the SQL statement in `create_all_header_nodes()`  function from `lib/api_automation.php` , finally resulting in SQL injection. Using SQL based secondary injection technology, attackers can modify the contents of the Cacti database, and based on the modified content, it may be possible to achieve further impact, such as arbitrary file reading, and even remote code execution through arbitrary file writing. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-31460|2024-08-02T01:52:57.065Z</guid>
      <pubDate>Mon, 13 May 2024 15:14:38 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31444|2024-08-02T01:52:56.953Z -- cacti -- cacti</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31444</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to version 1.2.27, some of the data stored in `automation_tree_rules_form_save()` function in `automation_tree_rules.php` is not thoroughly checked and is used to concatenate the HTML statement in `form_confirm()` function from `lib/html.php` , finally resulting in cross-site scripting. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-31444|2024-08-02T01:52:56.953Z</guid>
      <pubDate>Mon, 13 May 2024 15:03:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31459|2024-08-02T01:52:57.038Z -- cacti -- cacti</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31459</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to version 1.2.27, there is a file inclusion issue in the `lib/plugin.php` file. Combined with SQL injection vulnerabilities, remote code execution can be implemented. There is a file inclusion issue with the `api_plugin_hook()` function in the `lib/plugin.php` file, which reads the plugin_hooks and plugin_config tables in database. The read data is directly used to concatenate the file path which is used for file inclusion. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-31459|2024-08-02T01:52:57.038Z</guid>
      <pubDate>Mon, 13 May 2024 15:11:37 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29894|2024-05-13T14:24:32.871Z -- cacti -- cacti</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29894</link>
      <description>Cacti provides an operational monitoring and fault management framework. Versions of Cacti prior to 1.2.27 contain a residual cross-site scripting vulnerability caused by an incomplete fix for CVE-2023-50250. `raise_message_javascript` from `lib/functions.php` now uses purify.js to fix CVE-2023-50250 (among others). However, it still generates the code out of unescaped PHP variables `$title` and `$header`. If those variables contain single quotes, they can be used to inject JavaScript code. An attacker exploiting this vulnerability could execute actions on behalf of other users. This ability to impersonate users could lead to unauthorized changes to settings. Version 1.2.27 fixes this issue.</description>
      <guid isPermaLink="false">CVE-2024-29894|2024-05-13T14:24:32.871Z</guid>
      <pubDate>Mon, 13 May 2024 14:24:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29895|2024-06-04T17:56:45.934Z -- cacti -- cacti</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29895</link>
      <description>Cacti provides an operational monitoring and fault management framework. A command injection vulnerability on the 1.3.x DEV branch allows any unauthenticated user to execute arbitrary command on the server when `register_argc_argv` option of PHP is `On`. In `cmd_realtime.php` line 119, the `$poller_id` used as part of the command execution is sourced from `$_SERVER['argv']`, which can be controlled by URL when `register_argc_argv` option of PHP is `On`. And this option is `On` by default in many environments such as the main PHP Docker image for PHP. Commit 53e8014d1f082034e0646edc6286cde3800c683d contains a patch for the issue, but this commit was reverted in commit 99633903cad0de5ace636249de16f77e57a3c8fc.</description>
      <guid isPermaLink="false">CVE-2024-29895|2024-06-04T17:56:45.934Z</guid>
      <pubDate>Mon, 13 May 2024 14:33:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27082|2024-06-04T17:47:23.551Z -- cacti -- cacti</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27082</link>
      <description>Cacti provides an operational monitoring and fault management framework. Versions of Cacti prior to 1.2.27 are vulnerable to stored cross-site scripting, a type of cross-site scripting where malicious scripts are permanently stored on a target server and served to users who access a particular page. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-27082|2024-06-04T17:47:23.551Z</guid>
      <pubDate>Mon, 13 May 2024 13:49:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34340|2024-05-13T15:26:32.364Z -- cacti -- cacti</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34340</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to version 1.2.27, Cacti calls `compat_password_hash` when users set their password. `compat_password_hash` use `password_hash` if there is it, else use `md5`. When verifying password, it calls `compat_password_verify`. In `compat_password_verify`, `password_verify` is called if there is it, else use `md5`. `password_verify` and `password_hash` are supported on PHP &lt; 5.5.0, following PHP manual. The vulnerability is in `compat_password_verify`. Md5-hashed user input is compared with correct password in database by `$md5 == $hash`. It is a loose comparison, not `===`. It is a type juggling vulnerability. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-34340|2024-05-13T15:26:32.364Z</guid>
      <pubDate>Mon, 13 May 2024 15:26:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-30268|2024-06-04T17:39:38.687Z -- cacti -- cacti</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-30268</link>
      <description>Cacti provides an operational monitoring and fault management framework. A reflected cross-site scripting vulnerability on the 1.3.x DEV branch allows attackers to obtain cookies of administrator and other users and fake their login using obtained cookies. This issue is fixed in commit a38b9046e9772612fda847b46308f9391a49891e.</description>
      <guid isPermaLink="false">CVE-2024-30268|2024-06-04T17:39:38.687Z</guid>
      <pubDate>Mon, 13 May 2024 14:56:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31458|2024-05-13T15:07:08.051Z -- cacti -- cacti</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31458</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to version 1.2.27, some of the data stored in `form_save()` function in `graph_template_inputs.php` is not thoroughly checked and is used to concatenate the SQL statement in `draw_nontemplated_fields_graph_item()` function from `lib/html_form_templates.php` , finally resulting in SQL injection. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-31458|2024-05-13T15:07:08.051Z</guid>
      <pubDate>Mon, 13 May 2024 15:07:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31443|2024-05-13T15:01:44.324Z -- cacti -- cacti</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31443</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to 1.2.27, some of the data stored in `form_save()` function in `data_queries.php` is not thoroughly checked and is used to concatenate the HTML statement in `grow_right_pane_tree()` function from `lib/html.php` , finally resulting in cross-site scripting. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-31443|2024-05-13T15:01:44.324Z</guid>
      <pubDate>Mon, 13 May 2024 15:01:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31459|2024-05-13T15:11:37.909Z -- cacti -- cacti</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31459</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to version 1.2.27, there is a file inclusion issue in the `lib/plugin.php` file. Combined with SQL injection vulnerabilities, remote code execution can be implemented. There is a file inclusion issue with the `api_plugin_hook()` function in the `lib/plugin.php` file, which reads the plugin_hooks and plugin_config tables in database. The read data is directly used to concatenate the file path which is used for file inclusion. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-31459|2024-05-13T15:11:37.909Z</guid>
      <pubDate>Mon, 13 May 2024 15:11:37 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31444|2024-05-13T15:03:58.385Z -- cacti -- cacti</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31444</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to version 1.2.27, some of the data stored in `automation_tree_rules_form_save()` function in `automation_tree_rules.php` is not thoroughly checked and is used to concatenate the HTML statement in `form_confirm()` function from `lib/html.php` , finally resulting in cross-site scripting. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-31444|2024-05-13T15:03:58.385Z</guid>
      <pubDate>Mon, 13 May 2024 15:03:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31445|2024-05-13T15:05:56.662Z -- cacti -- cacti</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31445</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to version 1.2.27, a SQL injection vulnerability in `automation_get_new_graphs_sql` function of `api_automation.php` allows authenticated users to exploit these SQL injection vulnerabilities to perform privilege escalation and remote code execution. In `api_automation.php` line 856, the `get_request_var('filter')` is being concatenated into the SQL statement without any sanitization. In `api_automation.php` line 717, The filter of `'filter'` is `FILTER_DEFAULT`, which means there is no filter for it. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-31445|2024-05-13T15:05:56.662Z</guid>
      <pubDate>Mon, 13 May 2024 15:05:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31460|2024-05-13T15:14:38.689Z -- cacti -- cacti</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31460</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to version 1.2.27, some of the data stored in `automation_tree_rules.php` is not thoroughly checked and is used to concatenate the SQL statement in `create_all_header_nodes()`  function from `lib/api_automation.php` , finally resulting in SQL injection. Using SQL based secondary injection technology, attackers can modify the contents of the Cacti database, and based on the modified content, it may be possible to achieve further impact, such as arbitrary file reading, and even remote code execution through arbitrary file writing. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-31460|2024-05-13T15:14:38.689Z</guid>
      <pubDate>Mon, 13 May 2024 15:14:38 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-25641|2024-05-13T13:28:58.808Z -- cacti -- cacti</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-25641</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to version 1.2.27, an arbitrary file write vulnerability, exploitable through the "Package Import" feature, allows authenticated users having the "Import Templates" permission to execute arbitrary PHP code on the web server. The vulnerability is located within the `import_package()` function defined into the `/lib/import.php` script. The function blindly trusts the filename and file content provided within the XML data, and writes such files into the Cacti base path (or even outside, since path traversal sequences are not filtered). This can be exploited to write or overwrite arbitrary files on the web server, leading to execution of arbitrary PHP code or other security impacts. Version 1.2.27 contains a patch for this issue.</description>
      <guid isPermaLink="false">CVE-2024-25641|2024-05-13T13:28:58.808Z</guid>
      <pubDate>Mon, 13 May 2024 13:28:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29894|2024-08-02T01:17:58.331Z -- cacti -- cacti</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29894</link>
      <description>Cacti provides an operational monitoring and fault management framework. Versions of Cacti prior to 1.2.27 contain a residual cross-site scripting vulnerability caused by an incomplete fix for CVE-2023-50250. `raise_message_javascript` from `lib/functions.php` now uses purify.js to fix CVE-2023-50250 (among others). However, it still generates the code out of unescaped PHP variables `$title` and `$header`. If those variables contain single quotes, they can be used to inject JavaScript code. An attacker exploiting this vulnerability could execute actions on behalf of other users. This ability to impersonate users could lead to unauthorized changes to settings. Version 1.2.27 fixes this issue.</description>
      <guid isPermaLink="false">CVE-2024-29894|2024-08-02T01:17:58.331Z</guid>
      <pubDate>Mon, 13 May 2024 14:24:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29895|2024-08-02T01:17:58.192Z -- cacti -- cacti</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29895</link>
      <description>Cacti provides an operational monitoring and fault management framework. A command injection vulnerability on the 1.3.x DEV branch allows any unauthenticated user to execute arbitrary command on the server when `register_argc_argv` option of PHP is `On`. In `cmd_realtime.php` line 119, the `$poller_id` used as part of the command execution is sourced from `$_SERVER['argv']`, which can be controlled by URL when `register_argc_argv` option of PHP is `On`. And this option is `On` by default in many environments such as the main PHP Docker image for PHP. Commit 53e8014d1f082034e0646edc6286cde3800c683d contains a patch for the issue, but this commit was reverted in commit 99633903cad0de5ace636249de16f77e57a3c8fc.</description>
      <guid isPermaLink="false">CVE-2024-29895|2024-08-02T01:17:58.192Z</guid>
      <pubDate>Mon, 13 May 2024 14:33:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27082|2024-08-02T00:27:57.834Z -- cacti -- cacti</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-27082</link>
      <description>Cacti provides an operational monitoring and fault management framework. Versions of Cacti prior to 1.2.27 are vulnerable to stored cross-site scripting, a type of cross-site scripting where malicious scripts are permanently stored on a target server and served to users who access a particular page. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-27082|2024-08-02T00:27:57.834Z</guid>
      <pubDate>Mon, 13 May 2024 13:49:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34340|2024-08-02T02:51:11.436Z -- cacti -- cacti</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-34340</link>
      <description>Cacti provides an operational monitoring and fault management framework. Prior to version 1.2.27, Cacti calls `compat_password_hash` when users set their password. `compat_password_hash` use `password_hash` if there is it, else use `md5`. When verifying password, it calls `compat_password_verify`. In `compat_password_verify`, `password_verify` is called if there is it, else use `md5`. `password_verify` and `password_hash` are supported on PHP &lt; 5.5.0, following PHP manual. The vulnerability is in `compat_password_verify`. Md5-hashed user input is compared with correct password in database by `$md5 == $hash`. It is a loose comparison, not `===`. It is a type juggling vulnerability. Version 1.2.27 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-34340|2024-08-02T02:51:11.436Z</guid>
      <pubDate>Mon, 13 May 2024 15:26:32 +0000</pubDate>
    </item>
  </channel>
</rss>
