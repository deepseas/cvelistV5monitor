<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for fastly -- js-compute-runtime</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/fastly/js-compute-runtime.rss</link>
    <description>The latest CVEs for fastly -- js-compute-runtime</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 13:22:24 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-39218|2024-08-03T12:00:42.500Z -- fastly -- js-compute-runtime
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-39218</link>
      <description>The JS Compute Runtime for Fastly's Compute@Edge platform provides the environment JavaScript is executed in when using the Compute@Edge JavaScript SDK. In versions prior to 0.5.3, the `Math.random` and `crypto.getRandomValues` methods fail to use sufficiently random values. The initial value to seed the PRNG (pseudorandom number generator) is baked-in to the final WebAssembly module, making the sequence of random values for that specific WebAssembly module predictable. An attacker can use the fixed seed to predict random numbers generated by these functions and bypass cryptographic security controls, for example to disclose sensitive data encrypted by functions that use these generators. The problem has been patched in version 0.5.3. No known workarounds exist.</description>
      <guid isPermaLink="false">CVE-2022-39218|2024-08-03T12:00:42.500Z</guid>
      <pubDate>Tue, 20 Sep 2022 19:50:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38375|2024-08-02T04:04:25.287Z -- fastly -- js-compute-runtime</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38375</link>
      <description>@fastly/js-compute is a JavaScript SDK and runtime for building Fastly Compute applications. The implementation of several functions were determined to include a use-after-free bug. This bug could allow for unintended data loss if the result of the preceding functions were sent anywhere else, and often results in a guest trap causing services to return a 500. This bug has been fixed in version 3.16.0 of the `@fastly/js-compute` package.</description>
      <guid isPermaLink="false">CVE-2024-38375|2024-08-02T04:04:25.287Z</guid>
      <pubDate>Wed, 26 Jun 2024 18:46:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38375|2024-06-26T18:46:12.471Z -- fastly -- js-compute-runtime</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38375</link>
      <description>@fastly/js-compute is a JavaScript SDK and runtime for building Fastly Compute applications. The implementation of several functions were determined to include a use-after-free bug. This bug could allow for unintended data loss if the result of the preceding functions were sent anywhere else, and often results in a guest trap causing services to return a 500. This bug has been fixed in version 3.16.0 of the `@fastly/js-compute` package.</description>
      <guid isPermaLink="false">CVE-2024-38375|2024-06-26T18:46:12.471Z</guid>
      <pubDate>Wed, 26 Jun 2024 18:46:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38375|2024-07-30T19:52:50.666Z -- fastly -- js-compute-runtime</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38375</link>
      <description>@fastly/js-compute is a JavaScript SDK and runtime for building Fastly Compute applications. The implementation of several functions were determined to include a use-after-free bug. This bug could allow for unintended data loss if the result of the preceding functions were sent anywhere else, and often results in a guest trap causing services to return a 500. This bug has been fixed in version 3.16.0 of the `@fastly/js-compute` package.</description>
      <guid isPermaLink="false">CVE-2024-38375|2024-07-30T19:52:50.666Z</guid>
      <pubDate>Wed, 26 Jun 2024 18:46:12 +0000</pubDate>
    </item>
  </channel>
</rss>
