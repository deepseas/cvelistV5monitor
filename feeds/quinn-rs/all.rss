<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for quinn-rs -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/quinn-rs/all.rss</link>
    <description>The latest CVEs for quinn-rs -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 24 Sep 2024 19:19:51 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-42805|2024-09-24T15:03:39.325Z -- quinn-rs -- quinn
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-42805</link>
      <description>quinn-proto is a state machine for the QUIC transport protocol. Prior to versions 0.9.5 and 0.10.5, receiving unknown QUIC frames in a QUIC packet could result in a panic. The problem has been fixed in 0.9.5 and 0.10.5 maintenance releases.</description>
      <guid isPermaLink="false">CVE-2023-42805|2024-09-24T15:03:39.325Z</guid>
      <pubDate>Thu, 21 Sep 2023 16:39:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-45311|2024-09-03T14:04:46.433Z -- quinn-rs -- quinn</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45311</link>
      <description>Quinn is a pure-Rust, async-compatible implementation of the IETF QUIC transport protocol. As of quinn-proto 0.11, it is possible for a server to `accept()`, `retry()`, `refuse()`, or `ignore()` an `Incoming` connection. However, calling `retry()` on an unvalidated connection exposes the server to a likely panic in the following situations:  1. Calling `refuse` or `ignore` on the resulting validated connection, if a duplicate initial packet is received. This issue can go undetected until a server's `refuse()`/`ignore()` code path is exercised, such as to stop a denial of service attack. 2. Accepting when the initial packet for the resulting validated connection fails to decrypt or exhausts connection IDs, if a similar initial packet that successfully decrypts and doesn't exhaust connection IDs is received. This issue can go undetected if clients are well-behaved. The former situation was observed in a real application, while the latter is only theoretical.</description>
      <guid isPermaLink="false">CVE-2024-45311|2024-09-03T14:04:46.433Z</guid>
      <pubDate>Mon, 02 Sep 2024 16:45:39 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-45311|2024-09-02T16:45:39.465Z -- quinn-rs -- quinn</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45311</link>
      <description>Quinn is a pure-Rust, async-compatible implementation of the IETF QUIC transport protocol. As of quinn-proto 0.11, it is possible for a server to `accept()`, `retry()`, `refuse()`, or `ignore()` an `Incoming` connection. However, calling `retry()` on an unvalidated connection exposes the server to a likely panic in the following situations:  1. Calling `refuse` or `ignore` on the resulting validated connection, if a duplicate initial packet is received. This issue can go undetected until a server's `refuse()`/`ignore()` code path is exercised, such as to stop a denial of service attack. 2. Accepting when the initial packet for the resulting validated connection fails to decrypt or exhausts connection IDs, if a similar initial packet that successfully decrypts and doesn't exhaust connection IDs is received. This issue can go undetected if clients are well-behaved. The former situation was observed in a real application, while the latter is only theoretical.</description>
      <guid isPermaLink="false">CVE-2024-45311|2024-09-02T16:45:39.465Z</guid>
      <pubDate>Mon, 02 Sep 2024 16:45:39 +0000</pubDate>
    </item>
  </channel>
</rss>
