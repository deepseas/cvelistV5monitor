<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Google -- gRPC</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/google/grpc.rss</link>
    <description>The latest CVEs for Google -- gRPC</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 27 Sep 2024 23:23:00 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-33953|2024-09-27T18:40:52.297Z -- google -- grpc
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-33953</link>
      <description>gRPC contains a vulnerability that allows hpack table accounting errors could lead to unwanted disconnects between clients and servers in exceptional cases/ Three vectors were found that allow the following DOS attacks:

- Unbounded memory buffering in the HPACK parser
- Unbounded CPU consumption in the HPACK parser

The unbounded CPU consumption is down to a copy that occurred per-input-block in the parser, and because that could be unbounded due to the memory copy bug we end up with an O(n^2) parsing loop, with n selected by the client.

The unbounded memory buffering bugs:

- The header size limit check was behind the string reading code, so we needed to first buffer up to a 4 gigabyte string before rejecting it as longer than 8 or 16kb.
- HPACK varints have an encoding quirk whereby an infinite number of 0’s can be added at the start of an integer. gRPC’s hpack parser needed to read all of them before concluding a parse.
- gRPC’s metadata overflow check was performed per frame, so that the following sequence of frames could cause infinite buffering: HEADERS: containing a: 1 CONTINUATION: containing a: 2 CONTINUATION: containing a: 3 etc…</description>
      <guid isPermaLink="false">CVE-2023-33953|2024-09-27T18:40:52.297Z</guid>
      <pubDate>Wed, 09 Aug 2023 12:54:47 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-7246|2024-08-06T10:14:28.492Z -- google -- grpc</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-7246</link>
      <description>It's possible for a gRPC client communicating with a HTTP/2 proxy to poison the HPACK table between the proxy and the backend such that other clients see failed requests. It's also possible to use this vulnerability to leak other clients HTTP header keys, but not values.

This occurs because the error status for a misencoded header is not cleared between header reads, resulting in subsequent (incrementally indexed) added headers in the first request being poisoned until cleared from the HPACK table.

Please update to a fixed version of gRPC as soon as possible. This bug has been fixed in 1.58.3, 1.59.5, 1.60.2, 1.61.3, 1.62.3, 1.63.2, 1.64.3, 1.65.4.</description>
      <guid isPermaLink="false">CVE-2024-7246|2024-08-06T10:14:28.492Z</guid>
      <pubDate>Tue, 06 Aug 2024 10:14:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-7246|2024-08-06T13:17:59.082Z -- google -- grpc</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-7246</link>
      <description>It's possible for a gRPC client communicating with a HTTP/2 proxy to poison the HPACK table between the proxy and the backend such that other clients see failed requests. It's also possible to use this vulnerability to leak other clients HTTP header keys, but not values.

This occurs because the error status for a misencoded header is not cleared between header reads, resulting in subsequent (incrementally indexed) added headers in the first request being poisoned until cleared from the HPACK table.

Please update to a fixed version of gRPC as soon as possible. This bug has been fixed in 1.58.3, 1.59.5, 1.60.2, 1.61.3, 1.62.3, 1.63.2, 1.64.3, 1.65.4.</description>
      <guid isPermaLink="false">CVE-2024-7246|2024-08-06T13:17:59.082Z</guid>
      <pubDate>Tue, 06 Aug 2024 10:14:28 +0000</pubDate>
    </item>
  </channel>
</rss>
