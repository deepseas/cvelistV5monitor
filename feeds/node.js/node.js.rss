<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Node.js -- Node.js</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/node.js/node.js.rss</link>
    <description>The latest CVEs for Node.js -- Node.js</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 09 Sep 2024 19:19:59 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-39333|2024-09-09T18:06:07.896Z -- node.js -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39333</link>
      <description>Maliciously crafted export names in an imported WebAssembly module can inject JavaScript code. The injected code may be able to access data and functions that the WebAssembly module itself does not have access to, similar to as if the WebAssembly module was a JavaScript module.

This vulnerability affects users of any active release line of Node.js. The vulnerable feature is only available if Node.js is started with the `--experimental-wasm-modules` command line option.</description>
      <guid isPermaLink="false">CVE-2023-39333|2024-09-09T18:06:07.896Z</guid>
      <pubDate>Sat, 07 Sep 2024 16:00:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-30584|2024-09-09T18:35:30.116Z -- node.js -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-30584</link>
      <description>A vulnerability has been discovered in Node.js version 20, specifically within the experimental permission model. This flaw relates to improper handling of path traversal bypass when verifying file permissions.

Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2023-30584|2024-09-09T18:35:30.116Z</guid>
      <pubDate>Sat, 07 Sep 2024 16:00:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-30587|2024-09-09T18:26:39.840Z -- node.js -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-30587</link>
      <description>A vulnerability in Node.js version 20 allows for bypassing restrictions set by the --experimental-permission flag using the built-in inspector module (node:inspector).

By exploiting the Worker class's ability to create an "internal worker" with the kIsInternal Symbol, attackers can modify the isInternal value when an inspector is attached within the Worker constructor before initializing a new WorkerImpl. This vulnerability exclusively affects Node.js users employing the permission model mechanism.

Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2023-30587|2024-09-09T18:26:39.840Z</guid>
      <pubDate>Sat, 07 Sep 2024 16:00:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-30582|2024-09-09T18:20:15.025Z -- node.js -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-30582</link>
      <description>A vulnerability has been identified in Node.js version 20, affecting users of the experimental permission model when the --allow-fs-read flag is used with a non-* argument. This flaw arises from an inadequate permission model that fails to restrict file watching through the fs.watchFile API. As a result, malicious actors can monitor files that they do not have explicit read access to.

Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2023-30582|2024-09-09T18:20:15.025Z</guid>
      <pubDate>Sat, 07 Sep 2024 16:00:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-30583|2024-09-09T18:30:04.226Z -- node.js -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-30583</link>
      <description>fs.openAsBlob() can bypass the experimental permission model when using the file system read restriction with the `--allow-fs-read` flag in Node.js 20. This flaw arises from a missing check in the `fs.openAsBlob()` API.

Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2023-30583|2024-09-09T18:30:04.226Z</guid>
      <pubDate>Sat, 07 Sep 2024 16:00:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3566|2024-08-22T18:25:43.487Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3566</link>
      <description>A command inject vulnerability allows an attacker to perform command injection on Windows applications that indirectly depend on the CreateProcess function when the specific conditions are satisfied.</description>
      <guid isPermaLink="false">CVE-2024-3566|2024-08-22T18:25:43.487Z</guid>
      <pubDate>Wed, 10 Apr 2024 15:22:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22018|2024-08-16T17:02:38.484Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22018</link>
      <description>A vulnerability has been identified in Node.js, affecting users of the experimental permission model when the --allow-fs-read flag is used.
This flaw arises from an inadequate permission model that fails to restrict file stats through the fs.lstat API. As a result, malicious actors can retrieve stats from files that they do not have explicit read access to.
This vulnerability affects all users using the experimental permission model in Node.js 20 and Node.js 21.
Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2024-22018|2024-08-16T17:02:38.484Z</guid>
      <pubDate>Wed, 10 Jul 2024 01:00:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3566|2024-08-01T20:12:07.971Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3566</link>
      <description>A command inject vulnerability allows an attacker to perform command injection on Windows applications that indirectly depend on the CreateProcess function when the specific conditions are satisfied.</description>
      <guid isPermaLink="false">CVE-2024-3566|2024-08-01T20:12:07.971Z</guid>
      <pubDate>Wed, 10 Apr 2024 15:22:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22020|2024-07-13T03:55:29.139Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22020</link>
      <description>A security flaw in Node.js  allows a bypass of network import restrictions.
By embedding non-network imports in data URLs, an attacker can execute arbitrary code, compromising system security.
Verified on various platforms, the vulnerability is mitigated by forbidding data URLs in network imports.
Exploiting this flaw can violate network import security, posing a risk to developers and servers.</description>
      <guid isPermaLink="false">CVE-2024-22020|2024-07-13T03:55:29.139Z</guid>
      <pubDate>Tue, 09 Jul 2024 01:07:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22018|2024-07-10T01:00:12.747Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22018</link>
      <description>A vulnerability has been identified in Node.js, affecting users of the experimental permission model when the --allow-fs-read flag is used.
This flaw arises from an inadequate permission model that fails to restrict file stats through the fs.lstat API. As a result, malicious actors can retrieve stats from files that they do not have explicit read access to.
This vulnerability affects all users using the experimental permission model in Node.js 20 and Node.js 21.
Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2024-22018|2024-07-10T01:00:12.747Z</guid>
      <pubDate>Wed, 10 Jul 2024 01:00:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22020|2024-07-09T01:07:28.098Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22020</link>
      <description>A security flaw in Node.js  allows a bypass of network import restrictions.
By embedding non-network imports in data URLs, an attacker can execute arbitrary code, compromising system security.
Verified on various platforms, the vulnerability is mitigated by forbidding data URLs in network imports.
Exploiting this flaw can violate network import security, posing a risk to developers and servers.</description>
      <guid isPermaLink="false">CVE-2024-22020|2024-07-09T01:07:28.098Z</guid>
      <pubDate>Tue, 09 Jul 2024 01:07:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3566|2024-04-10T15:26:52.009Z -- node.js -- node.js</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-3566</link>
      <description>A command inject vulnerability allows an attacker to perform command injection on Windows applications that indirectly depend on the CreateProcess function when the specific conditions are satisfied.</description>
      <guid isPermaLink="false">CVE-2024-3566|2024-04-10T15:26:52.009Z</guid>
      <pubDate>Wed, 10 Apr 2024 15:22:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22017|2024-03-19T04:32:34.137Z -- node.js -- node.js</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22017</link>
      <description>setuid() does not affect libuv's internal io_uring operations if initialized before the call to setuid().
This allows the process to perform privileged operations despite presumably having dropped such privileges through a call to setuid().
This vulnerability affects all users using version greater or equal than Node.js 18.18.0, Node.js 20.4.0 and Node.js 21.</description>
      <guid isPermaLink="false">CVE-2024-22017|2024-03-19T04:32:34.137Z</guid>
      <pubDate>Tue, 19 Mar 2024 04:32:34 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22025|2024-03-19T04:32:34.211Z -- node.js -- node.js</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22025</link>
      <description>A vulnerability in Node.js has been identified, allowing for a Denial of Service (DoS) attack through resource exhaustion when using the fetch() function to retrieve content from an untrusted URL.
The vulnerability stems from the fact that the fetch() function in Node.js always decodes Brotli, making it possible for an attacker to cause resource exhaustion when fetching content from an untrusted URL.
An attacker controlling the URL passed into fetch() can exploit this vulnerability to exhaust memory, potentially leading to process termination, depending on the system configuration.</description>
      <guid isPermaLink="false">CVE-2024-22025|2024-03-19T04:32:34.211Z</guid>
      <pubDate>Tue, 19 Mar 2024 04:32:34 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22020|2024-07-09T14:17:19.481Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22020</link>
      <description>A security flaw in Node.js  allows a bypass of network import restrictions.
By embedding non-network imports in data URLs, an attacker can execute arbitrary code, compromising system security.
Verified on various platforms, the vulnerability is mitigated by forbidding data URLs in network imports.
Exploiting this flaw can violate network import security, posing a risk to developers and servers.</description>
      <guid isPermaLink="false">CVE-2024-22020|2024-07-09T14:17:19.481Z</guid>
      <pubDate>Tue, 09 Jul 2024 01:07:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22018|2024-07-10T16:08:02.472Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22018</link>
      <description>A vulnerability has been identified in Node.js, affecting users of the experimental permission model when the --allow-fs-read flag is used.
This flaw arises from an inadequate permission model that fails to restrict file stats through the fs.lstat API. As a result, malicious actors can retrieve stats from files that they do not have explicit read access to.
This vulnerability affects all users using the experimental permission model in Node.js 20 and Node.js 21.
Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2024-22018|2024-07-10T16:08:02.472Z</guid>
      <pubDate>Wed, 10 Jul 2024 01:00:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22025|2024-08-01T22:35:34.825Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22025</link>
      <description>A vulnerability in Node.js has been identified, allowing for a Denial of Service (DoS) attack through resource exhaustion when using the fetch() function to retrieve content from an untrusted URL.
The vulnerability stems from the fact that the fetch() function in Node.js always decodes Brotli, making it possible for an attacker to cause resource exhaustion when fetching content from an untrusted URL.
An attacker controlling the URL passed into fetch() can exploit this vulnerability to exhaust memory, potentially leading to process termination, depending on the system configuration.</description>
      <guid isPermaLink="false">CVE-2024-22025|2024-08-01T22:35:34.825Z</guid>
      <pubDate>Tue, 19 Mar 2024 04:32:34 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22020|2024-08-01T22:35:34.646Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22020</link>
      <description>A security flaw in Node.js  allows a bypass of network import restrictions.
By embedding non-network imports in data URLs, an attacker can execute arbitrary code, compromising system security.
Verified on various platforms, the vulnerability is mitigated by forbidding data URLs in network imports.
Exploiting this flaw can violate network import security, posing a risk to developers and servers.</description>
      <guid isPermaLink="false">CVE-2024-22020|2024-08-01T22:35:34.646Z</guid>
      <pubDate>Tue, 09 Jul 2024 01:07:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22017|2024-08-01T22:35:34.492Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22017</link>
      <description>setuid() does not affect libuv's internal io_uring operations if initialized before the call to setuid().
This allows the process to perform privileged operations despite presumably having dropped such privileges through a call to setuid().
This vulnerability affects all users using version greater or equal than Node.js 18.18.0, Node.js 20.4.0 and Node.js 21.</description>
      <guid isPermaLink="false">CVE-2024-22017|2024-08-01T22:35:34.492Z</guid>
      <pubDate>Tue, 19 Mar 2024 04:32:34 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22018|2024-08-01T22:35:34.862Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22018</link>
      <description>A vulnerability has been identified in Node.js, affecting users of the experimental permission model when the --allow-fs-read flag is used.
This flaw arises from an inadequate permission model that fails to restrict file stats through the fs.lstat API. As a result, malicious actors can retrieve stats from files that they do not have explicit read access to.
This vulnerability affects all users using the experimental permission model in Node.js 20 and Node.js 21.
Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2024-22018|2024-08-01T22:35:34.862Z</guid>
      <pubDate>Wed, 10 Jul 2024 01:00:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22017|2024-08-15T18:17:49.440Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22017</link>
      <description>setuid() does not affect libuv's internal io_uring operations if initialized before the call to setuid().
This allows the process to perform privileged operations despite presumably having dropped such privileges through a call to setuid().
This vulnerability affects all users using version greater or equal than Node.js 18.18.0, Node.js 20.4.0 and Node.js 21.</description>
      <guid isPermaLink="false">CVE-2024-22017|2024-08-15T18:17:49.440Z</guid>
      <pubDate>Tue, 19 Mar 2024 04:32:34 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22025|2024-08-21T20:39:21.144Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-22025</link>
      <description>A vulnerability in Node.js has been identified, allowing for a Denial of Service (DoS) attack through resource exhaustion when using the fetch() function to retrieve content from an untrusted URL.
The vulnerability stems from the fact that the fetch() function in Node.js always decodes Brotli, making it possible for an attacker to cause resource exhaustion when fetching content from an untrusted URL.
An attacker controlling the URL passed into fetch() can exploit this vulnerability to exhaust memory, potentially leading to process termination, depending on the system configuration.</description>
      <guid isPermaLink="false">CVE-2024-22025|2024-08-21T20:39:21.144Z</guid>
      <pubDate>Tue, 19 Mar 2024 04:32:34 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-30583|2024-09-07T16:00:35.918Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-30583</link>
      <description>fs.openAsBlob() can bypass the experimental permission model when using the file system read restriction with the `--allow-fs-read` flag in Node.js 20. This flaw arises from a missing check in the `fs.openAsBlob()` API.

Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2023-30583|2024-09-07T16:00:35.918Z</guid>
      <pubDate>Sat, 07 Sep 2024 16:00:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-30582|2024-09-07T16:00:35.978Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-30582</link>
      <description>A vulnerability has been identified in Node.js version 20, affecting users of the experimental permission model when the --allow-fs-read flag is used with a non-* argument. This flaw arises from an inadequate permission model that fails to restrict file watching through the fs.watchFile API. As a result, malicious actors can monitor files that they do not have explicit read access to.

Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2023-30582|2024-09-07T16:00:35.978Z</guid>
      <pubDate>Sat, 07 Sep 2024 16:00:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-30587|2024-09-07T16:00:35.920Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-30587</link>
      <description>A vulnerability in Node.js version 20 allows for bypassing restrictions set by the --experimental-permission flag using the built-in inspector module (node:inspector).

By exploiting the Worker class's ability to create an "internal worker" with the kIsInternal Symbol, attackers can modify the isInternal value when an inspector is attached within the Worker constructor before initializing a new WorkerImpl. This vulnerability exclusively affects Node.js users employing the permission model mechanism.

Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2023-30587|2024-09-07T16:00:35.920Z</guid>
      <pubDate>Sat, 07 Sep 2024 16:00:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-30584|2024-09-07T16:00:35.915Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-30584</link>
      <description>A vulnerability has been discovered in Node.js version 20, specifically within the experimental permission model. This flaw relates to improper handling of path traversal bypass when verifying file permissions.

Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2023-30584|2024-09-07T16:00:35.915Z</guid>
      <pubDate>Sat, 07 Sep 2024 16:00:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-39333|2024-09-07T16:02:39.849Z -- node.js -- node.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39333</link>
      <description>Maliciously crafted export names in an imported WebAssembly module can inject JavaScript code. The injected code may be able to access data and functions that the WebAssembly module itself does not have access to, similar to as if the WebAssembly module was a JavaScript module.

This vulnerability affects users of any active release line of Node.js. The vulnerable feature is only available if Node.js is started with the `--experimental-wasm-modules` command line option.</description>
      <guid isPermaLink="false">CVE-2023-39333|2024-09-07T16:02:39.849Z</guid>
      <pubDate>Sat, 07 Sep 2024 16:00:36 +0000</pubDate>
    </item>
  </channel>
</rss>
