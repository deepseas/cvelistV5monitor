<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Node.js -- Node.js</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/node.js/node.js.rss</link>
    <description>The latest CVEs for Node.js -- Node.js</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 21 Jun 2024 23:20:43 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-30588|2023-11-28T19:15:19.430Z -- node.js -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-30588</link>
      <description>When an invalid public key is used to create an x509 certificate using the crypto.X509Certificate() API a non-expect termination occurs making it susceptible to DoS attacks when the attacker could force interruptions of application processing, as the process terminates when accessing public key info of provided certificates from user code. The current context of the users will be gone, and that will cause a DoS scenario. This vulnerability affects all active Node.js versions v16, v18, and, v20.</description>
      <guid isPermaLink="false">CVE-2023-30588|2023-11-28T19:15:19.430Z</guid>
      <pubDate>Tue, 28 Nov 2023 19:15:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22019|2024-06-04T17:52:49.946Z -- node.js -- node.js</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22019</link>
      <description>A vulnerability in Node.js HTTP servers allows an attacker to send a specially crafted HTTP request with chunked encoding, leading to resource exhaustion and denial of service (DoS). The server reads an unbounded number of bytes from a single connection, exploiting the lack of limitations on chunk extension bytes. The issue can cause CPU and network bandwidth exhaustion, bypassing standard safeguards like timeouts and body size limits.</description>
      <guid isPermaLink="false">CVE-2024-22019|2024-06-04T17:52:49.946Z</guid>
      <pubDate>Tue, 20 Feb 2024 01:31:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22025|2024-03-19T04:32:34.211Z -- node.js -- node.js</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22025</link>
      <description>A vulnerability in Node.js has been identified, allowing for a Denial of Service (DoS) attack through resource exhaustion when using the fetch() function to retrieve content from an untrusted URL.
The vulnerability stems from the fact that the fetch() function in Node.js always decodes Brotli, making it possible for an attacker to cause resource exhaustion when fetching content from an untrusted URL.
An attacker controlling the URL passed into fetch() can exploit this vulnerability to exhaust memory, potentially leading to process termination, depending on the system configuration.</description>
      <guid isPermaLink="false">CVE-2024-22025|2024-03-19T04:32:34.211Z</guid>
      <pubDate>Tue, 19 Mar 2024 04:32:34 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-22017|2024-03-19T04:32:34.137Z -- node.js -- node.js</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22017</link>
      <description>setuid() does not affect libuv's internal io_uring operations if initialized before the call to setuid().
This allows the process to perform privileged operations despite presumably having dropped such privileges through a call to setuid().
This vulnerability affects all users using version greater or equal than Node.js 18.18.0, Node.js 20.4.0 and Node.js 21.</description>
      <guid isPermaLink="false">CVE-2024-22017|2024-03-19T04:32:34.137Z</guid>
      <pubDate>Tue, 19 Mar 2024 04:32:34 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-21896|2024-02-20T01:31:08.176Z -- node.js -- node.js</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-21896</link>
      <description>The permission model protects itself against path traversal attacks by calling path.resolve() on any paths given by the user. If the path is to be treated as a Buffer, the implementation uses Buffer.from() to obtain a Buffer from the result of path.resolve(). By monkey-patching Buffer internals, namely, Buffer.prototype.utf8Write, the application can modify the result of path.resolve(), which leads to a path traversal vulnerability.
This vulnerability affects all users using the experimental permission model in Node.js 20 and Node.js 21.
Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2024-21896|2024-02-20T01:31:08.176Z</guid>
      <pubDate>Tue, 20 Feb 2024 01:31:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-21891|2024-06-04T17:38:01.954Z -- node.js -- node.js</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-21891</link>
      <description>Node.js depends on multiple built-in utility functions to normalize paths provided to node:fs functions, which can be overwitten with user-defined implementations leading to filesystem permission model bypass through path traversal attack.
This vulnerability affects all users using the experimental permission model in Node.js 20 and Node.js 21.
Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2024-21891|2024-06-04T17:38:01.954Z</guid>
      <pubDate>Tue, 20 Feb 2024 01:31:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-21890|2024-06-04T17:37:54.097Z -- node.js -- node.js</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-21890</link>
      <description>The Node.js Permission Model does not clarify in the documentation that wildcards should be only used as the last character of a file path. For example:
```
 --allow-fs-read=/home/node/.ssh/*.pub
```

will ignore `pub` and give access to everything after `.ssh/`.

This misleading documentation affects all users using the experimental permission model in Node.js 20 and Node.js 21.

Please note that at the time this CVE was issued, the permission model is an experimental feature of Node.js.</description>
      <guid isPermaLink="false">CVE-2024-21890|2024-06-04T17:37:54.097Z</guid>
      <pubDate>Tue, 20 Feb 2024 01:31:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-21892|2024-02-20T01:31:08.073Z -- node.js -- node.js</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-21892</link>
      <description>On Linux, Node.js ignores certain environment variables if those may have been set by an unprivileged user while the process is running with elevated privileges with the only exception of CAP_NET_BIND_SERVICE.
Due to a bug in the implementation of this exception, Node.js incorrectly applies this exception even when certain other capabilities have been set.
This allows unprivileged users to inject code that inherits the process's elevated privileges.</description>
      <guid isPermaLink="false">CVE-2024-21892|2024-02-20T01:31:08.073Z</guid>
      <pubDate>Tue, 20 Feb 2024 01:31:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3566|2024-04-10T15:26:52.009Z -- node.js -- node.js</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-3566</link>
      <description>A command inject vulnerability allows an attacker to perform command injection on Windows applications that indirectly depend on the CreateProcess function when the specific conditions are satisfied.</description>
      <guid isPermaLink="false">CVE-2024-3566|2024-04-10T15:26:52.009Z</guid>
      <pubDate>Wed, 10 Apr 2024 15:22:56 +0000</pubDate>
    </item>
  </channel>
</rss>
