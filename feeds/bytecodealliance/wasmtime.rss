<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for bytecodealliance -- wasmtime</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/bytecodealliance/wasmtime.rss</link>
    <description>The latest CVEs for bytecodealliance -- wasmtime</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 04:24:00 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-23636|2024-08-03T03:51:46.018Z -- bytecodealliance -- wasmtime
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23636</link>
      <description>Wasmtime is an open source runtime for WebAssembly &amp; WASI. Prior to versions 0.34.1 and 0.33.1, there exists a bug in the pooling instance allocator in Wasmtime's runtime where a failure to instantiate an instance for a module that defines an `externref` global will result in an invalid drop of a `VMExternRef` via an uninitialized pointer. A number of conditions listed in the GitHub Security Advisory must be true in order for an instance to be vulnerable to this issue. Maintainers believe that the effective impact of this bug is relatively small because the usage of `externref` is still uncommon and without a resource limiter configured on the `Store`, which is not the default configuration, it is only possible to trigger the bug from an error returned by `mprotect` or `VirtualAlloc`. Note that on Linux with the `uffd` feature enabled, it is only possible to trigger the bug from a resource limiter as the call to `mprotect` is skipped. The bug has been fixed in 0.34.1 and 0.33.1 and users are encouraged to upgrade as soon as possible. If it is not possible to upgrade to version 0.34.1 or 0.33.1 of the `wasmtime` crate, it is recommend that support for the reference types proposal be disabled by passing `false` to `Config::wasm_reference_types`. Doing so will prevent modules that use `externref` from being loaded entirely.</description>
      <guid isPermaLink="false">CVE-2022-23636|2024-08-03T03:51:46.018Z</guid>
      <pubDate>Wed, 16 Feb 2022 22:00:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-30266|2024-06-04T17:38:20.190Z -- bytecodealliance -- wasmtime</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-30266</link>
      <description>wasmtime is a runtime for WebAssembly. The 19.0.0 release of Wasmtime contains a regression introduced during its development which can lead to a guest WebAssembly module causing a panic in the host runtime. A valid WebAssembly module, when executed at runtime, may cause this panic. This vulnerability has been patched in version 19.0.1.</description>
      <guid isPermaLink="false">CVE-2024-30266|2024-06-04T17:38:20.190Z</guid>
      <pubDate>Thu, 04 Apr 2024 15:42:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-30266|2024-08-02T01:32:07.072Z -- bytecodealliance -- wasmtime</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-30266</link>
      <description>wasmtime is a runtime for WebAssembly. The 19.0.0 release of Wasmtime contains a regression introduced during its development which can lead to a guest WebAssembly module causing a panic in the host runtime. A valid WebAssembly module, when executed at runtime, may cause this panic. This vulnerability has been patched in version 19.0.1.</description>
      <guid isPermaLink="false">CVE-2024-30266|2024-08-02T01:32:07.072Z</guid>
      <pubDate>Thu, 04 Apr 2024 15:42:00 +0000</pubDate>
    </item>
  </channel>
</rss>
