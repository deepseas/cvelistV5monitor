<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for dotCMS -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/dotcms/all.rss</link>
    <description>The latest CVEs for dotCMS -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 30 Sep 2024 16:24:40 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-3042|2024-09-30T15:25:26.548Z -- dotcms -- dotcms%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-3042</link>
      <description>In dotCMS, versions mentioned, a flaw in the NormalizationFilter does not strip double slashes (//) from URLs, potentially enabling bypasses for XSS and access controls. An example affected URL is  https://demo.dotcms.com//html/portlet/ext/files/edit_text_inc.jsp , which should return a 404 response but didn't. 

The oversight in the default invalid URL character list can be viewed at the provided  GitHub link https://github.com/dotCMS/core/blob/master/dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java#L37 . 

To mitigate, users can block URLs with double slashes at firewalls or utilize dotCMS config variables.

Specifically, they can use the DOT_URI_NORMALIZATION_FORBIDDEN_STRINGS environmental variable to add // to the list of invalid strings. 

Additionally, the DOT_URI_NORMALIZATION_FORBIDDEN_REGEX variable offers more detailed control, for instance, to block //html.* URLs.

Fix Version:23.06+, LTS 22.03.7+, LTS 23.01.4+</description>
      <guid isPermaLink="false">CVE-2023-3042|2024-09-30T15:25:26.548Z</guid>
      <pubDate>Tue, 17 Oct 2023 22:52:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3164|2024-09-30T15:30:31.887Z -- dotcms -- dotcms%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3164</link>
      <description>In dotCMS dashboard, the Tools and Log Files tabs under System → Maintenance Portlet, which is and always has been an Admin portlet, is accessible to anyone with that portlet and not just to CMS Admins. Users that get site admin but not a system admin, should not have access to the System Maintenance → Tools portlet. This would share database username and password under Log Files and download DB Dump and other dotCMS Content under Tools. Nothing in the System → Maintenance should be displayed for users with site admin role. Only system admins must have access to System Maintenance.

OWASP Top 10 - A01) Broken Access Control

OWASP Top 10 - A04) Insecure Design</description>
      <guid isPermaLink="false">CVE-2024-3164|2024-09-30T15:30:31.887Z</guid>
      <pubDate>Mon, 01 Apr 2024 21:27:51 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3165|2024-09-30T15:27:54.804Z -- dotcms -- dotcms%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3165</link>
      <description>System-&gt;Maintenance-&gt; Log Files in dotCMS dashboard is providing the username/password for database connections in the log output. Nevertheless, this is a moderate issue as it requires a backend admin as well as that dbs are locked down by environment.  

OWASP Top 10 - A05) Insecure Design

OWASP Top 10 - A05) Security Misconfiguration

OWASP Top 10 - A09) Security Logging and Monitoring Failure</description>
      <guid isPermaLink="false">CVE-2024-3165|2024-09-30T15:27:54.804Z</guid>
      <pubDate>Mon, 01 Apr 2024 21:38:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3938|2024-07-26T17:33:25.468Z -- dotcms -- dotcms%20core</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3938</link>
      <description>The "reset password" login page accepted an HTML injection via URL parameters.

This has already been rectified via patch, and as such it cannot be demonstrated via Demo site link. Those interested to see the vulnerability may spin up a  http://localhost:8082/dotAdmin/#/public/login?resetEmailSent=true&amp;amp;resetEmail=%3Ch1%3E%3Ca%20href%3D%22https:%2F%2Fgoogle.com%22%3ECLICK%20ME%3C%2Fa%3E%3C%2Fh1%3E 

This will result in a view along these lines:





  *  OWASP Top 10 - A03: Injection
  *  CVSS Score: 5.4
  *   AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator 
  *   https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N&amp;... https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator</description>
      <guid isPermaLink="false">CVE-2024-3938|2024-07-26T17:33:25.468Z</guid>
      <pubDate>Thu, 25 Jul 2024 21:17:49 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4447|2024-07-26T13:09:54.754Z -- dotcms -- dotcms%20core</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4447</link>
      <description>In the System → Maintenance tool, the Logged Users tab surfaces sessionId data for all users via the Direct Web Remoting API (UserSessionAjax.getSessionList.dwr) calls. While this is information that would and should be available to admins who possess "Sign In As" powers, admins who otherwise lack this privilege would still be able to utilize the session IDs to imitate other users.


While this is a very small attack vector that requires very high permissions to execute, its danger lies principally in obfuscating attribution; all Sign In As operations are attributed appropriately in the log files, and a malicious administrator could use this information to render their dealings untraceable — including those admins who have not been granted this ability — such as by using a session ID to generate an API token.

Fixed in: 24.07.12 / 23.01.20 LTS / 23.10.24v13 LTS / 24.04.24v5 LTS</description>
      <guid isPermaLink="false">CVE-2024-4447|2024-07-26T13:09:54.754Z</guid>
      <pubDate>Fri, 26 Jul 2024 02:02:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3938|2024-07-26T13:09:31.162Z -- dotcms -- dotcms%20core</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3938</link>
      <description>The "reset password" login page accepted an HTML injection via URL parameters.

This has already been rectified via patch, and as such it cannot be demonstrated via Demo site link. Those interested to see the vulnerability may spin up a  http://localhost:8082/dotAdmin/#/public/login?resetEmailSent=true&amp;amp;resetEmail=%3Ch1%3E%3Ca%20href%3D%22https:%2F%2Fgoogle.com%22%3ECLICK%20ME%3C%2Fa%3E%3C%2Fh1%3E 

This will result in a view along these lines:





  *  OWASP Top 10 - A03: Injection
  *  CVSS Score: 5.4
  *   AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator 
  *   https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N&amp;... https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator</description>
      <guid isPermaLink="false">CVE-2024-3938|2024-07-26T13:09:31.162Z</guid>
      <pubDate>Thu, 25 Jul 2024 21:17:49 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3938|2024-07-25T21:17:49.359Z -- dotcms -- dotcms%20core</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3938</link>
      <description>The "reset password" login page accepted an HTML injection via URL parameters.

This has already been rectified via patch, and as such it cannot be demonstrated via Demo site link. Those interested to see the vulnerability may spin up a  http://localhost:8082/dotAdmin/#/public/login?resetEmailSent=true&amp;amp;resetEmail=%3Ch1%3E%3Ca%20href%3D%22https:%2F%2Fgoogle.com%22%3ECLICK%20ME%3C%2Fa%3E%3C%2Fh1%3E 

This will result in a view along these lines:





  *  OWASP Top 10 - A03: Injection
  *  CVSS Score: 5.4
  *   AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator 
  *   https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N&amp;... https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator</description>
      <guid isPermaLink="false">CVE-2024-3938|2024-07-25T21:17:49.359Z</guid>
      <pubDate>Thu, 25 Jul 2024 21:17:49 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4447|2024-07-26T02:02:32.506Z -- dotcms -- dotcms%20core</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4447</link>
      <description>In the System → Maintenance tool, the Logged Users tab surfaces sessionId data for all users via the Direct Web Remoting API (UserSessionAjax.getSessionList.dwr) calls. While this is information that would and should be available to admins who possess "Sign In As" powers, admins who otherwise lack this privilege would still be able to utilize the session IDs to imitate other users.


While this is a very small attack vector that requires very high permissions to execute, its danger lies principally in obfuscating attribution; all Sign In As operations are attributed appropriately in the log files, and a malicious administrator could use this information to render their dealings untraceable — including those admins who have not been granted this ability — such as by using a session ID to generate an API token.

Fixed in: 24.07.12 / 23.01.20 LTS / 23.10.24v13 LTS / 24.04.24v5 LTS</description>
      <guid isPermaLink="false">CVE-2024-4447|2024-07-26T02:02:32.506Z</guid>
      <pubDate>Fri, 26 Jul 2024 02:02:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4447|2024-07-26T15:22:09.063Z -- dotcms -- dotcms%20core</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4447</link>
      <description>In the System → Maintenance tool, the Logged Users tab surfaces sessionId data for all users via the Direct Web Remoting API (UserSessionAjax.getSessionList.dwr) calls. While this is information that would and should be available to admins who possess "Sign In As" powers, admins who otherwise lack this privilege would still be able to utilize the session IDs to imitate other users.


While this is a very small attack vector that requires very high permissions to execute, its danger lies principally in obfuscating attribution; all Sign In As operations are attributed appropriately in the log files, and a malicious administrator could use this information to render their dealings untraceable — including those admins who have not been granted this ability — such as by using a session ID to generate an API token.

Fixed in: 24.07.12 / 23.01.20 LTS / 23.10.24v13 LTS / 24.04.24v5 LTS</description>
      <guid isPermaLink="false">CVE-2024-4447|2024-07-26T15:22:09.063Z</guid>
      <pubDate>Fri, 26 Jul 2024 02:02:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3938|2024-08-01T20:26:57.098Z -- dotcms -- dotcms%20core</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3938</link>
      <description>The "reset password" login page accepted an HTML injection via URL parameters.

This has already been rectified via patch, and as such it cannot be demonstrated via Demo site link. Those interested to see the vulnerability may spin up a  http://localhost:8082/dotAdmin/#/public/login?resetEmailSent=true&amp;amp;resetEmail=%3Ch1%3E%3Ca%20href%3D%22https:%2F%2Fgoogle.com%22%3ECLICK%20ME%3C%2Fa%3E%3C%2Fh1%3E 

This will result in a view along these lines:





  *  OWASP Top 10 - A03: Injection
  *  CVSS Score: 5.4
  *   AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator 
  *   https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N&amp;... https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator</description>
      <guid isPermaLink="false">CVE-2024-3938|2024-08-01T20:26:57.098Z</guid>
      <pubDate>Thu, 25 Jul 2024 21:17:49 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4447|2024-08-01T20:40:47.160Z -- dotcms -- dotcms%20core</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4447</link>
      <description>In the System → Maintenance tool, the Logged Users tab surfaces sessionId data for all users via the Direct Web Remoting API (UserSessionAjax.getSessionList.dwr) calls. While this is information that would and should be available to admins who possess "Sign In As" powers, admins who otherwise lack this privilege would still be able to utilize the session IDs to imitate other users.


While this is a very small attack vector that requires very high permissions to execute, its danger lies principally in obfuscating attribution; all Sign In As operations are attributed appropriately in the log files, and a malicious administrator could use this information to render their dealings untraceable — including those admins who have not been granted this ability — such as by using a session ID to generate an API token.

Fixed in: 24.07.12 / 23.01.20 LTS / 23.10.24v13 LTS / 24.04.24v5 LTS</description>
      <guid isPermaLink="false">CVE-2024-4447|2024-08-01T20:40:47.160Z</guid>
      <pubDate>Fri, 26 Jul 2024 02:02:32 +0000</pubDate>
    </item>
  </channel>
</rss>
