<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for mermaid-js -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/mermaid-js/all.rss</link>
    <description>The latest CVEs for mermaid-js -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 20:22:22 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-31108|2024-08-03T07:11:39.481Z -- mermaid-js -- mermaid
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-31108</link>
      <description>Mermaid is a JavaScript based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams. An attacker is able to inject arbitrary `CSS` into the generated graph allowing them to change the styling of elements outside of the generated graph, and potentially exfiltrate sensitive information by using specially crafted `CSS` selectors. The following example shows how an attacker can exfiltrate the contents of an input field by bruteforcing the `value` attribute one character at a time. Whenever there is an actual match, an `http` request will be made by the browser in order to "load" a background image that will let an attacker know what's the value of the character. This issue may lead to `Information Disclosure` via CSS selectors and functions able to generate HTTP requests. This also allows an attacker to change the document in ways which may lead a user to perform unintended actions, such as clicking on a link, etc. This issue has been resolved in version 9.1.3. Users are advised to upgrade. Users unable to upgrade should ensure that user input is adequately escaped before embedding it in CSS blocks.</description>
      <guid isPermaLink="false">CVE-2022-31108|2024-08-03T07:11:39.481Z</guid>
      <pubDate>Tue, 28 Jun 2022 18:35:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38527|2024-06-27T19:04:37.531Z -- mermaid-js -- zenuml-core</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38527</link>
      <description>ZenUML is JavaScript-based diagramming tool that requires no server, using Markdown-inspired text definitions and a renderer to create and modify sequence diagrams. Markdown-based comments in the ZenUML diagram syntax are susceptible to Cross-site Scripting (XSS). The comment feature allows the user to attach small notes for reference. This feature allows the user to enter in their comment in markdown comment, allowing them to use common markdown features, such as `**` for bolded text. However, the markdown text is currently not sanitized before rendering, allowing an attacker to enter a malicious payload for the comment which leads to XSS. This puts existing applications that use ZenUML unsandboxed at risk of arbitrary JavaScript execution when rendering user-controlled diagrams. This vulnerability was patched in version 3.23.25,</description>
      <guid isPermaLink="false">CVE-2024-38527|2024-06-27T19:04:37.531Z</guid>
      <pubDate>Wed, 26 Jun 2024 19:33:46 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38527|2024-06-26T19:33:46.575Z -- mermaid-js -- zenuml-core</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38527</link>
      <description>ZenUML is JavaScript-based diagramming tool that requires no server, using Markdown-inspired text definitions and a renderer to create and modify sequence diagrams. Markdown-based comments in the ZenUML diagram syntax are susceptible to Cross-site Scripting (XSS). The comment feature allows the user to attach small notes for reference. This feature allows the user to enter in their comment in markdown comment, allowing them to use common markdown features, such as `**` for bolded text. However, the markdown text is currently not sanitized before rendering, allowing an attacker to enter a malicious payload for the comment which leads to XSS. This puts existing applications that use ZenUML unsandboxed at risk of arbitrary JavaScript execution when rendering user-controlled diagrams. This vulnerability was patched in version 3.23.25,</description>
      <guid isPermaLink="false">CVE-2024-38527|2024-06-26T19:33:46.575Z</guid>
      <pubDate>Wed, 26 Jun 2024 19:33:46 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38527|2024-08-02T04:12:25.179Z -- mermaid-js -- zenuml-core</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38527</link>
      <description>ZenUML is JavaScript-based diagramming tool that requires no server, using Markdown-inspired text definitions and a renderer to create and modify sequence diagrams. Markdown-based comments in the ZenUML diagram syntax are susceptible to Cross-site Scripting (XSS). The comment feature allows the user to attach small notes for reference. This feature allows the user to enter in their comment in markdown comment, allowing them to use common markdown features, such as `**` for bolded text. However, the markdown text is currently not sanitized before rendering, allowing an attacker to enter a malicious payload for the comment which leads to XSS. This puts existing applications that use ZenUML unsandboxed at risk of arbitrary JavaScript execution when rendering user-controlled diagrams. This vulnerability was patched in version 3.23.25,</description>
      <guid isPermaLink="false">CVE-2024-38527|2024-08-02T04:12:25.179Z</guid>
      <pubDate>Wed, 26 Jun 2024 19:33:46 +0000</pubDate>
    </item>
  </channel>
</rss>
