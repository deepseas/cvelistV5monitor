<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for open-telemetry -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/open-telemetry/all.rss</link>
    <description>The latest CVEs for open-telemetry -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Wed, 12 Jun 2024 11:24:22 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-39951|2023-08-08T21:02:36.968Z -- open-telemetry -- opentelemetry-java-instrumentation
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-39951</link>
      <description>OpenTelemetry Java Instrumentation provides OpenTelemetry auto-instrumentation and instrumentation libraries for Java. OpenTelemetry Java Instrumentation prior to version 1.28.0 contains an issue related to the instrumentation of Java applications using the AWS SDK v2 with Amazon Simple Email Service (SES) v1 API. When SES POST requests are instrumented, the query parameters of the request are inserted into the trace `url.path` field. This behavior leads to the http body, containing the email subject and message, to be present in the trace request url metadata. Any user using a version before 1.28.0 of OpenTelemetry Java Instrumentation to instrument AWS SDK v2 call to SESâ€™s v1 SendEmail API is affected. The e-mail content sent to SES may end up in telemetry backend. This exposes the e-mail content to unintended audiences. The issue can be mitigated by updating OpenTelemetry Java Instrumentation to version 1.28.0 or later.</description>
      <guid isPermaLink="false">CVE-2023-39951|2023-08-08T21:02:36.968Z</guid>
      <pubDate>Tue, 08 Aug 2023 21:02:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-47108|2023-11-10T18:31:33.730Z -- open-telemetry -- opentelemetry-go-contrib
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-47108</link>
      <description>OpenTelemetry-Go Contrib is a collection of third-party packages for OpenTelemetry-Go. Prior to version 0.46.0, the grpc Unary Server Interceptor out of the box adds labels `net.peer.sock.addr` and `net.peer.sock.port` that have unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent. An attacker can easily flood the peer address and port for requests. Version 0.46.0 contains a fix for this issue. As a workaround to stop being affected, a view removing the attributes can be used. The other possibility is to disable grpc metrics instrumentation by passing `otelgrpc.WithMeterProvider` option with `noop.NewMeterProvider`.</description>
      <guid isPermaLink="false">CVE-2023-47108|2023-11-10T18:31:33.730Z</guid>
      <pubDate>Fri, 10 Nov 2023 18:31:33 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-43810|2023-10-06T13:53:17.622Z -- open-telemetry -- opentelemetry-python-contrib
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-43810</link>
      <description>OpenTelemetry, also known as OTel for short, is a vendor-neutral open-source Observability framework for instrumenting, generating, collecting, and exporting telemetry data such as traces, metrics, logs. Autoinstrumentation out of the box adds the label `http_method` that has unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent. HTTP method for requests can be easily set by an attacker to be random and long. In order to be affected program has to be instrumented for HTTP handlers and does not filter any unknown HTTP methods on the level of CDN, LB, previous middleware, etc. This issue has been patched in version 0.41b0.</description>
      <guid isPermaLink="false">CVE-2023-43810|2023-10-06T13:53:17.622Z</guid>
      <pubDate>Fri, 06 Oct 2023 13:53:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-45142|2023-10-12T16:33:21.435Z -- open-telemetry -- opentelemetry-go-contrib
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-45142</link>
      <description>OpenTelemetry-Go Contrib is a collection of third-party packages for OpenTelemetry-Go. A handler wrapper out of the box adds labels `http.user_agent` and `http.method` that have unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent to it. HTTP header User-Agent or HTTP method for requests can be easily set by an attacker to be random and long. The library internally uses `httpconv.ServerRequest` that records every value for HTTP `method` and `User-Agent`. In order to be affected, a program has to use the `otelhttp.NewHandler` wrapper and not filter any unknown HTTP methods or User agents on the level of CDN, LB, previous middleware, etc. Version 0.44.0 fixed this issue when the values collected for attribute `http.request.method` were changed to be restricted to a set of well-known values and other high cardinality attributes were removed. As a workaround to stop being affected, `otelhttp.WithFilter()` can be used, but it requires manual careful configuration to not log certain requests entirely. For convenience and safe usage of this library, it should by default mark with the label `unknown` non-standard HTTP methods and User agents to show that such requests were made but do not increase cardinality. In case someone wants to stay with the current behavior, library API should allow to enable it.</description>
      <guid isPermaLink="false">CVE-2023-45142|2023-10-12T16:33:21.435Z</guid>
      <pubDate>Thu, 12 Oct 2023 16:33:21 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-25151|2023-02-08T19:21:37.401Z -- open-telemetry -- opentelemetry-go-contrib
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-25151</link>
      <description>opentelemetry-go-contrib is a collection of extensions for OpenTelemetry-Go. The v0.38.0 release of `go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp` uses the `httpconv.ServerRequest` function to annotate metric measurements for the `http.server.request_content_length`, `http.server.response_content_length`, and `http.server.duration` instruments. The `ServerRequest` function sets the `http.target` attribute value to be the whole request URI (including the query string)[^1]. The metric instruments do not "forget" previous measurement attributes when `cumulative` temporality is used, this means the cardinality of the measurements allocated is directly correlated with the unique URIs handled. If the query string is constantly random, this will result in a constant increase in memory allocation that can be used in a denial-of-service attack. This issue has been addressed in version 0.39.0. Users are advised to upgrade. There are no known workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2023-25151|2023-02-08T19:21:37.401Z</guid>
      <pubDate>Wed, 08 Feb 2023 19:21:37 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32028|2024-06-04T17:51:34.444Z -- open-telemetry -- opentelemetry-dotnet
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32028</link>
      <description>OpenTelemetry dotnet is a dotnet telemetry framework. In affected versions of `OpenTelemetry.Instrumentation.Http` and `OpenTelemetry.Instrumentation.AspNetCore` the `url.full` writes attribute/tag on spans (`Activity`) when tracing is enabled for outgoing http requests and `OpenTelemetry.Instrumentation.AspNetCore` writes the `url.query` attribute/tag on spans (`Activity`) when tracing is enabled for incoming http requests. These attributes are defined by the Semantic Conventions for HTTP Spans. Up until version `1.8.1` the values written by `OpenTelemetry.Instrumentation.Http` &amp; `OpenTelemetry.Instrumentation.AspNetCore` will pass-through the raw query string as was sent or received (respectively). This may lead to sensitive information (e.g. EUII - End User Identifiable Information, credentials, etc.) being leaked into telemetry backends (depending on the application(s) being instrumented) which could cause privacy and/or security incidents. Note: Older versions of `OpenTelemetry.Instrumentation.Http` &amp; `OpenTelemetry.Instrumentation.AspNetCore` may use different tag names but have the same vulnerability. The `1.8.1` versions of `OpenTelemetry.Instrumentation.Http` &amp; `OpenTelemetry.Instrumentation.AspNetCore` will now redact by default all values detected on transmitted or received query strings. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-32028|2024-06-04T17:51:34.444Z</guid>
      <pubDate>Fri, 12 Apr 2024 22:58:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-36129|2024-06-05T17:26:13.903Z -- open-telemetry -- opentelemetry-collector
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-36129</link>
      <description>The OpenTelemetry Collector offers a vendor-agnostic implementation on how to receive, process and export telemetry data. An unsafe decompression vulnerability allows unauthenticated attackers to crash the collector via excessive memory consumption. OTel Collector version 0.102.1 fixes this issue.  It is also fixed in the confighttp module version 0.102.0 and configgrpc module version 0.102.1.
</description>
      <guid isPermaLink="false">CVE-2024-36129|2024-06-05T17:26:13.903Z</guid>
      <pubDate>Wed, 05 Jun 2024 17:26:13 +0000</pubDate>
    </item>
  </channel>
</rss>
