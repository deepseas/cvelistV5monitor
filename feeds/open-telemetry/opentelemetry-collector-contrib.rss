<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for open-telemetry -- opentelemetry-collector-contrib</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/open-telemetry/opentelemetry-collector-contrib.rss</link>
    <description>The latest CVEs for open-telemetry -- opentelemetry-collector-contrib</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Wed, 28 Aug 2024 21:22:41 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-45043|2024-08-28T20:20:49.512Z -- open-telemetry -- opentelemetry-collector-contrib
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45043</link>
      <description>The OpenTelemetry Collector module AWS firehose receiver is for ingesting AWS Kinesis Data Firehose delivery stream messages and parsing the records received based on the configured record type. `awsfirehosereceiver` allows unauthenticated remote requests, even when configured to require a key. OpenTelemetry Collector can be configured to receive CloudWatch metrics via an AWS Firehose Stream. Firehose sets the header `X-Amz-Firehose-Access-Key` with an arbitrary configured string. The OpenTelemetry Collector awsfirehosereceiver can optionally be configured to require this key on incoming requests. However, when this is configured it **still accepts incoming requests with no key**. Only OpenTelemetry Collector users configured with the “alpha” `awsfirehosereceiver` module are affected. This module was added in version v0.49.0 of the “Contrib” distribution (or may be included in custom builds). There is a risk of unauthorized users writing metrics. Carefully crafted metrics could hide other malicious activity. There is no risk of exfiltrating data. It’s likely these endpoints will be exposed to the public internet, as Firehose does not support private HTTP endpoints. A fix was introduced in PR #34847 and released with v0.108.0. All users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-45043|2024-08-28T20:20:49.512Z</guid>
      <pubDate>Wed, 28 Aug 2024 20:06:34 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-42368|2024-08-13T19:31:16.814Z -- open-telemetry -- opentelemetry-collector-contrib</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-42368</link>
      <description>OpenTelemetry, also known as OTel, is a vendor-neutral open source Observability framework for instrumenting, generating, collecting, and exporting telemetry data such as traces, metrics, and logs. The bearertokenauth extension's server authenticator performs a simple, non-constant time string comparison of the received &amp; configured bearer tokens. This impacts anyone using the `bearertokenauth` server authenticator. Malicious clients with network access to the collector may perform a timing attack against a collector with this authenticator to guess the configured token, by iteratively sending tokens and comparing the response time. This would allow an attacker to introduce fabricated or bad data into the collector's telemetry pipeline. The observable timing vulnerability was fixed by using constant-time comparison in  0.107.0</description>
      <guid isPermaLink="false">CVE-2024-42368|2024-08-13T19:31:16.814Z</guid>
      <pubDate>Tue, 13 Aug 2024 19:31:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-42368|2024-08-14T13:38:51.917Z -- open-telemetry -- opentelemetry-collector-contrib</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-42368</link>
      <description>OpenTelemetry, also known as OTel, is a vendor-neutral open source Observability framework for instrumenting, generating, collecting, and exporting telemetry data such as traces, metrics, and logs. The bearertokenauth extension's server authenticator performs a simple, non-constant time string comparison of the received &amp; configured bearer tokens. This impacts anyone using the `bearertokenauth` server authenticator. Malicious clients with network access to the collector may perform a timing attack against a collector with this authenticator to guess the configured token, by iteratively sending tokens and comparing the response time. This would allow an attacker to introduce fabricated or bad data into the collector's telemetry pipeline. The observable timing vulnerability was fixed by using constant-time comparison in  0.107.0</description>
      <guid isPermaLink="false">CVE-2024-42368|2024-08-14T13:38:51.917Z</guid>
      <pubDate>Tue, 13 Aug 2024 19:31:16 +0000</pubDate>
    </item>
  </channel>
</rss>
