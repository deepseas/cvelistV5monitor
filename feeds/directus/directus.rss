<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for directus -- directus</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/directus/directus.rss</link>
    <description>The latest CVEs for directus -- directus</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 17 Sep 2024 07:21:52 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-23080|2024-09-17T02:22:06.874Z -- directus -- directus
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23080</link>
      <description>In directus versions v9.0.0-beta.2 through 9.6.0 are vulnerable to server-side request forgery (SSRF) in the media upload functionality which allows a low privileged user to perform internal network port scans.</description>
      <guid isPermaLink="false">CVE-2022-23080|2024-09-17T02:22:06.874Z</guid>
      <pubDate>Wed, 22 Jun 2022 15:40:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-22116|2024-09-17T03:13:41.409Z -- directus -- directus
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-22116</link>
      <description>In Directus, versions 9.0.0-alpha.4 through 9.4.1 are vulnerable to stored Cross-Site Scripting (XSS) vulnerability via SVG file upload in media upload functionality. A low privileged attacker can inject arbitrary javascript code which will be executed in a victim’s browser when they open the image URL.</description>
      <guid isPermaLink="false">CVE-2022-22116|2024-09-17T03:13:41.409Z</guid>
      <pubDate>Mon, 10 Jan 2022 15:26:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-45596|2024-09-10T19:20:32.884Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45596</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. An unauthenticated user can access credentials of last authenticated user via OpenID or OAuth2 where the authentication URL did not include redirect query string. This happens because on that endpoint for both OpenId and Oauth2 Directus is using the respond middleware, which by default will try to cache GET requests that met some conditions. Although, those conditions do not include this scenario, when an unauthenticated request returns user credentials. This vulnerability is fixed in 10.13.3 and 11.1.0.</description>
      <guid isPermaLink="false">CVE-2024-45596|2024-09-10T19:20:32.884Z</guid>
      <pubDate>Tue, 10 Sep 2024 18:43:33 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6533|2024-08-16T17:31:53.765Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6533</link>
      <description>Directus v10.13.0 allows an authenticated external attacker to execute arbitrary JavaScript on the client. This is possible because the application injects an attacker-controlled parameter that will be stored in the server and used by the client into an unsanitized DOM element. When chained with CVE-2024-6534, it could result in account takeover.</description>
      <guid isPermaLink="false">CVE-2024-6533|2024-08-16T17:31:53.765Z</guid>
      <pubDate>Thu, 15 Aug 2024 03:04:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6533|2024-08-15T03:04:08.250Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6533</link>
      <description>Directus v10.13.0 allows an authenticated external attacker to execute arbitrary JavaScript on the client. This is possible because the application injects an attacker-controlled parameter that will be stored in the server and used by the client into an unsanitized DOM element. When chained with CVE-2024-6534, it could result in account takeover.</description>
      <guid isPermaLink="false">CVE-2024-6533|2024-08-15T03:04:08.250Z</guid>
      <pubDate>Thu, 15 Aug 2024 03:04:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6534|2024-08-15T03:10:46.778Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6534</link>
      <description>Directus v10.13.0 allows an authenticated external attacker to modify presets created by the same user to assign them to another user. This is possible because the application only validates the user parameter in the 'POST /presets' request but not in the PATCH request. When chained with CVE-2024-6533, it could result in account takeover.</description>
      <guid isPermaLink="false">CVE-2024-6534|2024-08-15T03:10:46.778Z</guid>
      <pubDate>Thu, 15 Aug 2024 03:10:46 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-36128|2024-08-02T03:30:13.147Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-36128</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. Prior to 10.11.2, providing a non-numeric length value to the random string generation utility will create a memory issue breaking the capability to generate random strings platform wide. This creates a denial of service situation where logged in sessions can no longer be refreshed as sessions depend on the capability to generate a random session ID. This vulnerability is fixed in 10.11.2.</description>
      <guid isPermaLink="false">CVE-2024-36128|2024-08-02T03:30:13.147Z</guid>
      <pubDate>Mon, 03 Jun 2024 14:59:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39895|2024-07-10T16:40:10.539Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39895</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. A denial of service (DoS) attack by field duplication in GraphQL is a type of attack where an attacker exploits the flexibility of GraphQL to overwhelm a server by requesting the same field multiple times in a single query. This can cause the server to perform redundant computations and consume excessive resources, leading to a denial of service for legitimate users. Request to the endpoint /graphql are sent when visualizing graphs generated at a dashboard. By modifying the data sent and duplicating many times the fields a DoS attack is possible. This vulnerability is fixed in 10.12.0.</description>
      <guid isPermaLink="false">CVE-2024-39895|2024-07-10T16:40:10.539Z</guid>
      <pubDate>Mon, 08 Jul 2024 16:47:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39701|2024-07-10T16:38:47.405Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39701</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. Directus &gt;=9.23.0, &lt;=v10.5.3 improperly handles _in, _nin operators. It evaluates empty arrays as valid so expressions like {"role": {"_in": $CURRENT_USER.some_field}} would evaluate to true allowing the request to pass. This results in Broken Access Control because the rule fails to do what it was intended to do: Pass rule if **field** matches any of the **values**. This vulnerability is fixed in 10.6.0.</description>
      <guid isPermaLink="false">CVE-2024-39701|2024-07-10T16:38:47.405Z</guid>
      <pubDate>Mon, 08 Jul 2024 16:43:01 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39699|2024-07-08T18:13:58.460Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39699</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. There was already a reported SSRF vulnerability via file import. It was fixed by resolving all DNS names and checking if the requested IP is an internal IP address. However it is possible to bypass this security measure and execute a SSRF using redirects. Directus allows redirects when importing file from the URL and does not check the result URL. Thus, it is possible to execute a request to an internal IP, for example to 127.0.0.1. However, it is blind SSRF, because Directus also uses response interception technique to get the information about the connect from the socket directly and it does not show a response if the IP address is internal. This vulnerability is fixed in 10.9.3.</description>
      <guid isPermaLink="false">CVE-2024-39699|2024-07-08T18:13:58.460Z</guid>
      <pubDate>Mon, 08 Jul 2024 15:32:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39701|2024-07-08T16:43:01.595Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39701</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. Directus &gt;=9.23.0, &lt;=v10.5.3 improperly handles _in, _nin operators. It evaluates empty arrays as valid so expressions like {"role": {"_in": $CURRENT_USER.some_field}} would evaluate to true allowing the request to pass. This results in Broken Access Control because the rule fails to do what it was intended to do: Pass rule if **field** matches any of the **values**. This vulnerability is fixed in 10.6.0.</description>
      <guid isPermaLink="false">CVE-2024-39701|2024-07-08T16:43:01.595Z</guid>
      <pubDate>Mon, 08 Jul 2024 16:43:01 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39895|2024-07-08T16:47:44.673Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39895</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. A denial of service (DoS) attack by field duplication in GraphQL is a type of attack where an attacker exploits the flexibility of GraphQL to overwhelm a server by requesting the same field multiple times in a single query. This can cause the server to perform redundant computations and consume excessive resources, leading to a denial of service for legitimate users. Request to the endpoint /graphql are sent when visualizing graphs generated at a dashboard. By modifying the data sent and duplicating many times the fields a DoS attack is possible. This vulnerability is fixed in 10.12.0.</description>
      <guid isPermaLink="false">CVE-2024-39895|2024-07-08T16:47:44.673Z</guid>
      <pubDate>Mon, 08 Jul 2024 16:47:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34709|2024-06-12T19:00:40.071Z -- directus -- directus</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34709</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. Prior to 10.11.0, session tokens function like the other JWT tokens where they are not actually invalidated when logging out. The `directus_session` gets destroyed and the cookie gets deleted but if the cookie value is captured, it will still work for the entire expiry time which is set to 1 day by default. Making it effectively a long lived unrevokable stateless token instead of the stateful session token it was meant to be. This vulnerability is fixed in 10.11.0.</description>
      <guid isPermaLink="false">CVE-2024-34709|2024-06-12T19:00:40.071Z</guid>
      <pubDate>Mon, 13 May 2024 19:39:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34708|2024-06-04T17:42:21.964Z -- directus -- directus</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34708</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. A user with permission to view any collection using redacted hashed fields can get access the raw stored version using the `alias` functionality on the API. Normally, these redacted fields will return `**********` however  if we change the request to `?alias[workaround]=redacted` we can instead retrieve the plain text value for the field. This can be avoided by removing permission to view the sensitive fields entirely from users or roles that should not be able to see them. This vulnerability is fixed in 10.11.0.</description>
      <guid isPermaLink="false">CVE-2024-34708|2024-06-04T17:42:21.964Z</guid>
      <pubDate>Mon, 13 May 2024 19:33:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34709|2024-05-13T19:39:32.313Z -- directus -- directus</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34709</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. Prior to 10.11.0, session tokens function like the other JWT tokens where they are not actually invalidated when logging out. The `directus_session` gets destroyed and the cookie gets deleted but if the cookie value is captured, it will still work for the entire expiry time which is set to 1 day by default. Making it effectively a long lived unrevokable stateless token instead of the stateful session token it was meant to be. This vulnerability is fixed in 10.11.0.</description>
      <guid isPermaLink="false">CVE-2024-34709|2024-05-13T19:39:32.313Z</guid>
      <pubDate>Mon, 13 May 2024 19:39:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-36128|2024-06-04T17:48:05.315Z -- directus -- directus</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-36128</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. Prior to 10.11.2, providing a non-numeric length value to the random string generation utility will create a memory issue breaking the capability to generate random strings platform wide. This creates a denial of service situation where logged in sessions can no longer be refreshed as sessions depend on the capability to generate a random session ID. This vulnerability is fixed in 10.11.2.</description>
      <guid isPermaLink="false">CVE-2024-36128|2024-06-04T17:48:05.315Z</guid>
      <pubDate>Mon, 03 Jun 2024 14:59:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39699|2024-07-08T15:32:04.556Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39699</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. There was already a reported SSRF vulnerability via file import. It was fixed by resolving all DNS names and checking if the requested IP is an internal IP address. However it is possible to bypass this security measure and execute a SSRF using redirects. Directus allows redirects when importing file from the URL and does not check the result URL. Thus, it is possible to execute a request to an internal IP, for example to 127.0.0.1. However, it is blind SSRF, because Directus also uses response interception technique to get the information about the connect from the socket directly and it does not show a response if the IP address is internal. This vulnerability is fixed in 10.9.3.</description>
      <guid isPermaLink="false">CVE-2024-39699|2024-07-08T15:32:04.556Z</guid>
      <pubDate>Mon, 08 Jul 2024 15:32:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39896|2024-07-08T17:27:56.032Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39896</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. When relying on SSO providers in combination with local authentication it can be possible to enumerate existing SSO users in the instance. This is possible because if an email address exists in Directus and belongs to a known SSO provider then it will throw a "helpful" error that the user belongs to another provider. This vulnerability is fixed in 10.13.0.</description>
      <guid isPermaLink="false">CVE-2024-39896|2024-07-08T17:27:56.032Z</guid>
      <pubDate>Mon, 08 Jul 2024 17:27:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39895|2024-07-09T13:26:34.287Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39895</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. A denial of service (DoS) attack by field duplication in GraphQL is a type of attack where an attacker exploits the flexibility of GraphQL to overwhelm a server by requesting the same field multiple times in a single query. This can cause the server to perform redundant computations and consume excessive resources, leading to a denial of service for legitimate users. Request to the endpoint /graphql are sent when visualizing graphs generated at a dashboard. By modifying the data sent and duplicating many times the fields a DoS attack is possible. This vulnerability is fixed in 10.12.0.</description>
      <guid isPermaLink="false">CVE-2024-39895|2024-07-09T13:26:34.287Z</guid>
      <pubDate>Mon, 08 Jul 2024 16:47:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39896|2024-07-30T18:35:32.088Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39896</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. When relying on SSO providers in combination with local authentication it can be possible to enumerate existing SSO users in the instance. This is possible because if an email address exists in Directus and belongs to a known SSO provider then it will throw a "helpful" error that the user belongs to another provider. This vulnerability is fixed in 10.13.0.</description>
      <guid isPermaLink="false">CVE-2024-39896|2024-07-30T18:35:32.088Z</guid>
      <pubDate>Mon, 08 Jul 2024 17:27:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34709|2024-08-02T02:59:22.093Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-34709</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. Prior to 10.11.0, session tokens function like the other JWT tokens where they are not actually invalidated when logging out. The `directus_session` gets destroyed and the cookie gets deleted but if the cookie value is captured, it will still work for the entire expiry time which is set to 1 day by default. Making it effectively a long lived unrevokable stateless token instead of the stateful session token it was meant to be. This vulnerability is fixed in 10.11.0.</description>
      <guid isPermaLink="false">CVE-2024-34709|2024-08-02T02:59:22.093Z</guid>
      <pubDate>Mon, 13 May 2024 19:39:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34708|2024-08-02T02:59:21.863Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-34708</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. A user with permission to view any collection using redacted hashed fields can get access the raw stored version using the `alias` functionality on the API. Normally, these redacted fields will return `**********` however  if we change the request to `?alias[workaround]=redacted` we can instead retrieve the plain text value for the field. This can be avoided by removing permission to view the sensitive fields entirely from users or roles that should not be able to see them. This vulnerability is fixed in 10.11.0.</description>
      <guid isPermaLink="false">CVE-2024-34708|2024-08-02T02:59:21.863Z</guid>
      <pubDate>Mon, 13 May 2024 19:33:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39699|2024-08-02T04:26:15.949Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39699</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. There was already a reported SSRF vulnerability via file import. It was fixed by resolving all DNS names and checking if the requested IP is an internal IP address. However it is possible to bypass this security measure and execute a SSRF using redirects. Directus allows redirects when importing file from the URL and does not check the result URL. Thus, it is possible to execute a request to an internal IP, for example to 127.0.0.1. However, it is blind SSRF, because Directus also uses response interception technique to get the information about the connect from the socket directly and it does not show a response if the IP address is internal. This vulnerability is fixed in 10.9.3.</description>
      <guid isPermaLink="false">CVE-2024-39699|2024-08-02T04:26:15.949Z</guid>
      <pubDate>Mon, 08 Jul 2024 15:32:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39701|2024-08-02T04:26:16.090Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39701</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. Directus &gt;=9.23.0, &lt;=v10.5.3 improperly handles _in, _nin operators. It evaluates empty arrays as valid so expressions like {"role": {"_in": $CURRENT_USER.some_field}} would evaluate to true allowing the request to pass. This results in Broken Access Control because the rule fails to do what it was intended to do: Pass rule if **field** matches any of the **values**. This vulnerability is fixed in 10.6.0.</description>
      <guid isPermaLink="false">CVE-2024-39701|2024-08-02T04:26:16.090Z</guid>
      <pubDate>Mon, 08 Jul 2024 16:43:01 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39896|2024-08-02T04:33:11.337Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39896</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. When relying on SSO providers in combination with local authentication it can be possible to enumerate existing SSO users in the instance. This is possible because if an email address exists in Directus and belongs to a known SSO provider then it will throw a "helpful" error that the user belongs to another provider. This vulnerability is fixed in 10.13.0.</description>
      <guid isPermaLink="false">CVE-2024-39896|2024-08-02T04:33:11.337Z</guid>
      <pubDate>Mon, 08 Jul 2024 17:27:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39895|2024-08-02T04:33:11.240Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39895</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. A denial of service (DoS) attack by field duplication in GraphQL is a type of attack where an attacker exploits the flexibility of GraphQL to overwhelm a server by requesting the same field multiple times in a single query. This can cause the server to perform redundant computations and consume excessive resources, leading to a denial of service for legitimate users. Request to the endpoint /graphql are sent when visualizing graphs generated at a dashboard. By modifying the data sent and duplicating many times the fields a DoS attack is possible. This vulnerability is fixed in 10.12.0.</description>
      <guid isPermaLink="false">CVE-2024-39895|2024-08-02T04:33:11.240Z</guid>
      <pubDate>Mon, 08 Jul 2024 16:47:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6534|2024-08-15T14:11:40.435Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6534</link>
      <description>Directus v10.13.0 allows an authenticated external attacker to modify presets created by the same user to assign them to another user. This is possible because the application only validates the user parameter in the 'POST /presets' request but not in the PATCH request. When chained with CVE-2024-6533, it could result in account takeover.</description>
      <guid isPermaLink="false">CVE-2024-6534|2024-08-15T14:11:40.435Z</guid>
      <pubDate>Thu, 15 Aug 2024 03:10:46 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-45596|2024-09-10T18:43:33.413Z -- directus -- directus</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45596</link>
      <description>Directus is a real-time API and App dashboard for managing SQL database content. An unauthenticated user can access credentials of last authenticated user via OpenID or OAuth2 where the authentication URL did not include redirect query string. This happens because on that endpoint for both OpenId and Oauth2 Directus is using the respond middleware, which by default will try to cache GET requests that met some conditions. Although, those conditions do not include this scenario, when an unauthenticated request returns user credentials. This vulnerability is fixed in 10.13.3 and 11.1.0.</description>
      <guid isPermaLink="false">CVE-2024-45596|2024-09-10T18:43:33.413Z</guid>
      <pubDate>Tue, 10 Sep 2024 18:43:33 +0000</pubDate>
    </item>
  </channel>
</rss>
