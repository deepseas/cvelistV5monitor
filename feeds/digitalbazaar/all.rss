<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for digitalbazaar -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/digitalbazaar/all.rss</link>
    <description>The latest CVEs for digitalbazaar -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 22:22:21 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-24772|2024-08-03T04:20:50.492Z -- digitalbazaar -- forge
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-24772</link>
      <description>Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.</description>
      <guid isPermaLink="false">CVE-2022-24772|2024-08-03T04:20:50.492Z</guid>
      <pubDate>Fri, 18 Mar 2022 13:30:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-24773|2024-08-03T04:20:50.554Z -- digitalbazaar -- forge
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-24773</link>
      <description>Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not properly check `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.</description>
      <guid isPermaLink="false">CVE-2022-24773|2024-08-03T04:20:50.554Z</guid>
      <pubDate>Fri, 18 Mar 2022 13:30:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-24771|2024-08-03T04:20:50.502Z -- digitalbazaar -- forge
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-24771</link>
      <description>Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.</description>
      <guid isPermaLink="false">CVE-2022-24771|2024-08-03T04:20:50.502Z</guid>
      <pubDate>Fri, 18 Mar 2022 13:25:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31995|2024-08-02T01:59:50.785Z -- digitalbazaar -- zcap</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31995</link>
      <description>`@digitalbazaar/zcap` provides JavaScript reference implementation for Authorization Capabilities. Prior to version 9.0.1, when invoking a capability with a chain depth of 2, i.e., it is delegated directly from the root capability, the `expires` property is not properly checked against the current date or other `date` param.  This can allow invocations outside of the original intended time period.  A zcap still cannot be invoked without being able to use the associated private key material. `@digitalbazaar/zcap` v9.0.1 fixes expiration checking. As a workaround, one may revoke a zcap at any time.</description>
      <guid isPermaLink="false">CVE-2024-31995|2024-08-02T01:59:50.785Z</guid>
      <pubDate>Wed, 10 Apr 2024 21:57:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31995|2024-06-04T17:36:54.576Z -- digitalbazaar -- zcap</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31995</link>
      <description>`@digitalbazaar/zcap` provides JavaScript reference implementation for Authorization Capabilities. Prior to version 9.0.1, when invoking a capability with a chain depth of 2, i.e., it is delegated directly from the root capability, the `expires` property is not properly checked against the current date or other `date` param.  This can allow invocations outside of the original intended time period.  A zcap still cannot be invoked without being able to use the associated private key material. `@digitalbazaar/zcap` v9.0.1 fixes expiration checking. As a workaround, one may revoke a zcap at any time.</description>
      <guid isPermaLink="false">CVE-2024-31995|2024-06-04T17:36:54.576Z</guid>
      <pubDate>Wed, 10 Apr 2024 21:57:41 +0000</pubDate>
    </item>
  </channel>
</rss>
