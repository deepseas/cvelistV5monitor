<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for paritytech -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/paritytech/all.rss</link>
    <description>The latest CVEs for paritytech -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 20:23:50 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-34449|2024-08-02T16:10:07.115Z -- paritytech -- ink
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-34449</link>
      <description>ink! is an embedded domain specific language to write smart contracts in Rust for blockchains built on the Substrate framework. Starting in version 4.0.0 and prior to version 4.2.1, the return value when using delegate call mechanics, either through `CallBuilder::delegate` or `ink_env::invoke_contract_delegate`, is decoded incorrectly. This bug was related to the mechanics around decoding a call's return buffer, which was changed as part of pull request 1450. Since this feature was only released in ink! 4.0.0, no previous versions are affected. Users who have an ink! 4.x series contract should upgrade to 4.2.1 to receive a patch.</description>
      <guid isPermaLink="false">CVE-2023-34449|2024-08-02T16:10:07.115Z</guid>
      <pubDate>Wed, 14 Jun 2023 20:10:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-28431|2024-08-02T12:38:25.463Z -- paritytech -- frontier
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-28431</link>
      <description>Frontier is an Ethereum compatibility layer for Substrate. Frontier's `modexp` precompile uses `num-bigint` crate under the hood. In the implementation prior to pull request 1017, the cases for modulus being even and modulus being odd are treated separately. Odd modulus uses the fast Montgomery multiplication, and even modulus uses the slow plain power algorithm. This gas cost discrepancy was not accounted for in the `modexp` precompile, leading to possible denial of service attacks.

No fixes for `num-bigint` are currently available, and thus this issue is fixed in the short term by raising the gas costs for even modulus, and in the long term fixing it in `num-bigint` or switching to another modexp implementation. The short-term fix for Frontier is deployed at pull request 1017. There are no known workarounds aside from applying the fix.</description>
      <guid isPermaLink="false">CVE-2023-28431|2024-08-02T12:38:25.463Z</guid>
      <pubDate>Wed, 22 Mar 2023 20:11:43 +0000</pubDate>
    </item>
  </channel>
</rss>
