<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for nghttp2 -- nghttp2</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/nghttp2/nghttp2.rss</link>
    <description>The latest CVEs for nghttp2 -- nghttp2</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 23:23:15 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-11080|2024-08-04T11:21:14.514Z -- nghttp2 -- nghttp2
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-11080</link>
      <description>In nghttp2 before version 1.41.0, the overly large HTTP/2 SETTINGS frame payload causes denial of service. The proof of concept attack involves a malicious client constructing a SETTINGS frame with a length of 14,400 bytes (2400 individual settings entries) over and over again. The attack causes the CPU to spike at 100%. nghttp2 v1.41.0 fixes this vulnerability. There is a workaround to this vulnerability. Implement nghttp2_on_frame_recv_callback callback, and if received frame is SETTINGS frame and the number of settings entries are large (e.g., &gt; 32), then drop the connection.</description>
      <guid isPermaLink="false">CVE-2020-11080|2024-08-04T11:21:14.514Z</guid>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-28182|2024-08-02T00:48:49.547Z -- nghttp2 -- nghttp2</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-28182</link>
      <description>nghttp2 is an implementation of the Hypertext Transfer Protocol version 2 in C. The nghttp2 library prior to version 1.61.0 keeps reading the unbounded number of HTTP/2 CONTINUATION frames even after a stream is reset to keep HPACK context in sync.  This causes excessive CPU usage to decode HPACK stream. nghttp2 v1.61.0 mitigates this vulnerability by limiting the number of CONTINUATION frames it accepts per stream. There is no workaround for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-28182|2024-08-02T00:48:49.547Z</guid>
      <pubDate>Thu, 04 Apr 2024 14:41:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-28182|2024-04-04T14:41:36.587Z -- nghttp2 -- nghttp2</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-28182</link>
      <description>nghttp2 is an implementation of the Hypertext Transfer Protocol version 2 in C. The nghttp2 library prior to version 1.61.0 keeps reading the unbounded number of HTTP/2 CONTINUATION frames even after a stream is reset to keep HPACK context in sync.  This causes excessive CPU usage to decode HPACK stream. nghttp2 v1.61.0 mitigates this vulnerability by limiting the number of CONTINUATION frames it accepts per stream. There is no workaround for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-28182|2024-04-04T14:41:36.587Z</guid>
      <pubDate>Thu, 04 Apr 2024 14:41:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-28182|2024-07-15T15:54:31.848Z -- nghttp2 -- nghttp2</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-28182</link>
      <description>nghttp2 is an implementation of the Hypertext Transfer Protocol version 2 in C. The nghttp2 library prior to version 1.61.0 keeps reading the unbounded number of HTTP/2 CONTINUATION frames even after a stream is reset to keep HPACK context in sync.  This causes excessive CPU usage to decode HPACK stream. nghttp2 v1.61.0 mitigates this vulnerability by limiting the number of CONTINUATION frames it accepts per stream. There is no workaround for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-28182|2024-07-15T15:54:31.848Z</guid>
      <pubDate>Thu, 04 Apr 2024 14:41:36 +0000</pubDate>
    </item>
  </channel>
</rss>
