<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for denoland -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/denoland/all.rss</link>
    <description>The latest CVEs for denoland -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 16:24:40 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-28445|2024-08-02T12:38:25.372Z -- denoland -- deno
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-28445</link>
      <description>Deno is a runtime for JavaScript and TypeScript that uses V8 and is built in Rust. Resizable ArrayBuffers passed to asynchronous functions that are shrunk during the asynchronous operation could result in an out-of-bound read/write. It is unlikely that this has been exploited in the wild, as the only version affected is Deno 1.32.0. Deno Deploy users are not affected. The problem has been resolved by disabling resizable ArrayBuffers temporarily in Deno 1.32.1. Deno 1.32.2 will re-enable resizable ArrayBuffers with a proper fix. As a workaround, run with `--v8-flags=--no-harmony-rab-gsab` to disable resizable ArrayBuffers.</description>
      <guid isPermaLink="false">CVE-2023-28445|2024-08-02T12:38:25.372Z</guid>
      <pubDate>Thu, 23 Mar 2023 23:23:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-33966|2024-08-02T15:54:14.202Z -- denoland -- deno
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-33966</link>
      <description>Deno is a runtime for JavaScript and TypeScript. In deno 1.34.0 and deno_runtime 0.114.0, outbound HTTP requests made using the built-in `node:http` or `node:https` modules are incorrectly not checked against the network permission allow list (`--allow-net`). Dependencies relying on these built-in modules are subject to the vulnerability too. Users of Deno versions prior to 1.34.0 are unaffected. Deno Deploy users are unaffected. This problem has been patched in Deno v1.34.1 and deno_runtime 0.114.1 and all users are recommended to update to this version. No workaround is available for this issue.
</description>
      <guid isPermaLink="false">CVE-2023-33966|2024-08-02T15:54:14.202Z</guid>
      <pubDate>Wed, 31 May 2023 17:15:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-28446|2024-08-02T12:38:25.379Z -- denoland -- deno
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-28446</link>
      <description>Deno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 and is built in Rust. Arbitrary program names without any ANSI filtering allows any malicious program to clear the first 2 lines of a `op_spawn_child` or `op_kill` prompt and replace it with any desired text. This works with any command on the respective platform, giving the program the full ability to choose what program they wanted to run. This problem can not be exploited on systems that do not attach an interactive prompt (for example headless servers). This issue has been patched in version 1.31.2.
</description>
      <guid isPermaLink="false">CVE-2023-28446|2024-08-02T12:38:25.379Z</guid>
      <pubDate>Fri, 24 Mar 2023 19:46:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-22499|2024-08-02T10:13:48.492Z -- denoland -- deno
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-22499</link>
      <description>Deno is a runtime for JavaScript and TypeScript that uses V8 and is built in Rust. Multi-threaded programs were able to spoof interactive permission prompt by rewriting the prompt to suggest that program is waiting on user confirmation to unrelated action. A malicious program could clear the terminal screen after permission prompt was shown and write a generic message. This situation impacts users who use Web Worker API and relied on interactive permission prompt. The reproduction is very timing sensitive and canâ€™t be reliably reproduced on every try. This problem can not be exploited on systems that do not attach an interactive prompt (for example headless servers). The problem has been fixed in Deno v1.29.3; it is recommended all users update to this version. Users are advised to upgrade. Users unable to upgrade may run with --no-prompt flag to disable interactive permission prompts.</description>
      <guid isPermaLink="false">CVE-2023-22499|2024-08-02T10:13:48.492Z</guid>
      <pubDate>Tue, 17 Jan 2023 20:23:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37150|2024-08-02T03:50:54.672Z -- denoland -- deno</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37150</link>
      <description>An issue in `.npmrc` support in Deno 1.44.0 was discovered where Deno would send `.npmrc` credentials for the scope to the tarball URL when the registry provided URLs for a tarball on a different domain. All users relying on .npmrc are potentially affected by this vulnerability if their private registry references tarball URLs at a different domain. This includes usage of deno install subcommand, auto-install for npm: specifiers and LSP usage. It is recommended to upgrade to Deno 1.44.1 and if your private registry ever serves tarballs at a different domain to rotate your registry credentials.</description>
      <guid isPermaLink="false">CVE-2024-37150|2024-08-02T03:50:54.672Z</guid>
      <pubDate>Thu, 06 Jun 2024 15:28:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32477|2024-08-02T02:13:39.109Z -- denoland -- deno</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32477</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. By using ANSI escape sequences and a race between `libc::tcflush(0, libc::TCIFLUSH)` and reading standard input, it's possible to manipulate the permission prompt and force it to allow an unsafe action regardless of the user input. Some ANSI escape sequences act as a info request to the master terminal emulator and the terminal emulator sends back the reply in the PTY channel. standard streams also use this channel to send and get data. For example the `\033[6n` sequence requests the current cursor position. These sequences allow us to append data to the standard input of Deno. This vulnerability allows an attacker to bypass Deno permission policy.  This vulnerability is fixed in 1.42.2.</description>
      <guid isPermaLink="false">CVE-2024-32477|2024-08-02T02:13:39.109Z</guid>
      <pubDate>Thu, 18 Apr 2024 19:58:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27931|2024-07-23T17:52:12.034Z -- denoland -- deno</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-27931</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. Insufficient validation of parameters in `Deno.makeTemp*` APIs would allow for creation of files outside of the allowed directories. This may allow the user to overwrite important files on the system that may affect other systems. A user may provide a prefix or suffix to a `Deno.makeTemp*` API containing path traversal characters. This is fixed in Deno 1.41.1.</description>
      <guid isPermaLink="false">CVE-2024-27931|2024-07-23T17:52:12.034Z</guid>
      <pubDate>Tue, 05 Mar 2024 16:43:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32477|2024-06-04T17:50:38.033Z -- denoland -- deno</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32477</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. By using ANSI escape sequences and a race between `libc::tcflush(0, libc::TCIFLUSH)` and reading standard input, it's possible to manipulate the permission prompt and force it to allow an unsafe action regardless of the user input. Some ANSI escape sequences act as a info request to the master terminal emulator and the terminal emulator sends back the reply in the PTY channel. standard streams also use this channel to send and get data. For example the `\033[6n` sequence requests the current cursor position. These sequences allow us to append data to the standard input of Deno. This vulnerability allows an attacker to bypass Deno permission policy.  This vulnerability is fixed in 1.42.2.</description>
      <guid isPermaLink="false">CVE-2024-32477|2024-06-04T17:50:38.033Z</guid>
      <pubDate>Thu, 18 Apr 2024 19:58:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27934|2024-03-06T20:56:39.368Z -- denoland -- deno</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27934</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime. Starting in version 1.36.2 and prior to version 1.40.3, use of inherently unsafe `*const c_void` and `ExternalPointer` leads to use-after-free access of the underlying structure, resulting in arbitrary code execution. Use of inherently unsafe `*const c_void` and `ExternalPointer` leads to use-after-free access of the underlying structure, which is exploitable by an attacker controlling the code executed inside a Deno runtime to obtain arbitrary code execution on the host machine regardless of permissions. This bug is known to be exploitable for both `*const c_void` and `ExternalPointer` implementations. Version 1.40.3 fixes this issue.</description>
      <guid isPermaLink="false">CVE-2024-27934|2024-03-06T20:56:39.368Z</guid>
      <pubDate>Wed, 06 Mar 2024 20:56:39 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27935|2024-03-06T21:02:14.359Z -- denoland -- deno</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27935</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime. Starting in version 1.35.1 and prior to version 1.36.3, a vulnerability in Deno's Node.js compatibility runtime allows for cross-session data contamination during simultaneous asynchronous reads from Node.js streams sourced from sockets or files. The issue arises from the re-use of a global buffer (BUF) in stream_wrap.ts used as a performance optimization to limit allocations during these asynchronous read operations. This can lead to data intended for one session being received by another session, potentially resulting in data corruption and unexpected behavior. This affects all users of Deno that use the node.js compatibility layer for network communication or other streams, including packages that may require node.js libraries indirectly. Version 1.36.3 contains a patch for this issue.</description>
      <guid isPermaLink="false">CVE-2024-27935|2024-03-06T21:02:14.359Z</guid>
      <pubDate>Wed, 06 Mar 2024 21:02:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27932|2024-03-06T20:45:16.373Z -- denoland -- deno</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27932</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime. Starting in version 1.8.0 and prior to version 1.40.4, Deno improperly checks that an import specifier's hostname is equal to or a child of a token's hostname, which can cause tokens to be sent to servers they shouldn't be sent to. An auth token intended for `example[.]com` may be sent to `notexample[.]com`. Anyone who uses DENO_AUTH_TOKENS and imports potentially untrusted code is affected. Version 1.40.0 contains a patch for this issue</description>
      <guid isPermaLink="false">CVE-2024-27932|2024-03-06T20:45:16.373Z</guid>
      <pubDate>Wed, 06 Mar 2024 20:45:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27933|2024-03-06T20:52:17.599Z -- denoland -- deno</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27933</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime. In version 1.39.0, use of raw file descriptors in `op_node_ipc_pipe()` leads to premature close of arbitrary file descriptors, allowing standard input to be re-opened as a different resource resulting in permission prompt bypass. Node child_process IPC relies on the JS side to pass the raw IPC file descriptor to `op_node_ipc_pipe()`, which returns a `IpcJsonStreamResource` ID associated with the file descriptor. On closing the resource, the raw file descriptor is closed together.

Use of raw file descriptors in `op_node_ipc_pipe()` leads to premature close of arbitrary file descriptors. This allow standard input (fd 0) to be closed and re-opened for a different resource, which allows a silent permission prompt bypass. This is exploitable by an attacker controlling the code executed inside a Deno runtime to obtain arbitrary code execution on the host machine regardless of permissions.

This bug is known to be exploitable. There is a working exploit that achieves arbitrary code execution by bypassing prompts from zero permissions, additionally abusing the fact that Cache API lacks filesystem permission checks. The attack can be conducted silently as stderr can also be closed, suppressing all prompt outputs.

Version 1.39.1 fixes the bug.</description>
      <guid isPermaLink="false">CVE-2024-27933|2024-03-06T20:52:17.599Z</guid>
      <pubDate>Wed, 06 Mar 2024 20:52:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27931|2024-03-05T16:43:11.934Z -- denoland -- deno</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27931</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. Insufficient validation of parameters in `Deno.makeTemp*` APIs would allow for creation of files outside of the allowed directories. This may allow the user to overwrite important files on the system that may affect other systems. A user may provide a prefix or suffix to a `Deno.makeTemp*` API containing path traversal characters. This is fixed in Deno 1.41.1.</description>
      <guid isPermaLink="false">CVE-2024-27931|2024-03-05T16:43:11.934Z</guid>
      <pubDate>Tue, 05 Mar 2024 16:43:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27936|2024-06-10T12:42:08.776Z -- denoland -- deno</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27936</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. Starting in version 1.32.1 and prior to version 1.41.0 of the deno library, maliciously crafted permission request can show the spoofed permission prompt by inserting a broken ANSI escape sequence into the request contents. Deno is stripping any ANSI escape sequences from the permission prompt, but permissions given to the program are based on the contents that contain the ANSI escape sequences. Any Deno program can spoof the content of the interactive permission prompt by inserting a broken ANSI code, which allows a malicious Deno program to display the wrong file path or program name to the user. Version 1.41.0 of the deno library contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-27936|2024-06-10T12:42:08.776Z</guid>
      <pubDate>Wed, 06 Mar 2024 21:05:59 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37150|2024-06-06T17:33:35.582Z -- denoland -- deno</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-37150</link>
      <description>An issue in `.npmrc` support in Deno 1.44.0 was discovered where Deno would send `.npmrc` credentials for the scope to the tarball URL when the registry provided URLs for a tarball on a different domain. All users relying on .npmrc are potentially affected by this vulnerability if their private registry references tarball URLs at a different domain. This includes usage of deno install subcommand, auto-install for npm: specifiers and LSP usage. It is recommended to upgrade to Deno 1.44.1 and if your private registry ever serves tarballs at a different domain to rotate your registry credentials.</description>
      <guid isPermaLink="false">CVE-2024-37150|2024-06-06T17:33:35.582Z</guid>
      <pubDate>Thu, 06 Jun 2024 15:28:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34346|2024-06-06T18:25:43.423Z -- denoland -- deno</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34346</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. The Deno sandbox may be unexpectedly weakened by allowing file read/write access to privileged files in various locations on Unix and Windows platforms. For example, reading `/proc/self/environ` may provide access equivalent to `--allow-env`, and writing `/proc/self/mem` may provide access equivalent to `--allow-all`. Users who grant read and write access to the entire filesystem may not realize that these access to these files may have additional, unintended consequences. The documentation did not reflect that this practice should be undertaken to increase the strength of the security sandbox. Users who run code with `--allow-read` or `--allow-write` may unexpectedly end up granting additional permissions via file-system operations. Deno 1.43 and above require explicit `--allow-all` access to read or write `/etc`, `/dev` on unix platform (as well as `/proc` and `/sys` on linux platforms), and any path starting with `\\` on Windows.</description>
      <guid isPermaLink="false">CVE-2024-34346|2024-06-06T18:25:43.423Z</guid>
      <pubDate>Tue, 07 May 2024 21:02:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27936|2024-07-09T20:26:36.870Z -- denoland -- deno</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-27936</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. Starting in version 1.32.1 and prior to version 1.41.0 of the deno library, maliciously crafted permission request can show the spoofed permission prompt by inserting a broken ANSI escape sequence into the request contents. Deno is stripping any ANSI escape sequences from the permission prompt, but permissions given to the program are based on the contents that contain the ANSI escape sequences. Any Deno program can spoof the content of the interactive permission prompt by inserting a broken ANSI code, which allows a malicious Deno program to display the wrong file path or program name to the user. Version 1.41.0 of the deno library contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-27936|2024-07-09T20:26:36.870Z</guid>
      <pubDate>Wed, 06 Mar 2024 21:05:59 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27931|2024-08-02T00:41:55.851Z -- denoland -- deno</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-27931</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. Insufficient validation of parameters in `Deno.makeTemp*` APIs would allow for creation of files outside of the allowed directories. This may allow the user to overwrite important files on the system that may affect other systems. A user may provide a prefix or suffix to a `Deno.makeTemp*` API containing path traversal characters. This is fixed in Deno 1.41.1.</description>
      <guid isPermaLink="false">CVE-2024-27931|2024-08-02T00:41:55.851Z</guid>
      <pubDate>Tue, 05 Mar 2024 16:43:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27933|2024-08-02T00:41:55.828Z -- denoland -- deno</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-27933</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime. In version 1.39.0, use of raw file descriptors in `op_node_ipc_pipe()` leads to premature close of arbitrary file descriptors, allowing standard input to be re-opened as a different resource resulting in permission prompt bypass. Node child_process IPC relies on the JS side to pass the raw IPC file descriptor to `op_node_ipc_pipe()`, which returns a `IpcJsonStreamResource` ID associated with the file descriptor. On closing the resource, the raw file descriptor is closed together.

Use of raw file descriptors in `op_node_ipc_pipe()` leads to premature close of arbitrary file descriptors. This allow standard input (fd 0) to be closed and re-opened for a different resource, which allows a silent permission prompt bypass. This is exploitable by an attacker controlling the code executed inside a Deno runtime to obtain arbitrary code execution on the host machine regardless of permissions.

This bug is known to be exploitable. There is a working exploit that achieves arbitrary code execution by bypassing prompts from zero permissions, additionally abusing the fact that Cache API lacks filesystem permission checks. The attack can be conducted silently as stderr can also be closed, suppressing all prompt outputs.

Version 1.39.1 fixes the bug.</description>
      <guid isPermaLink="false">CVE-2024-27933|2024-08-02T00:41:55.828Z</guid>
      <pubDate>Wed, 06 Mar 2024 20:52:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27932|2024-08-02T00:41:55.783Z -- denoland -- deno</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-27932</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime. Starting in version 1.8.0 and prior to version 1.40.4, Deno improperly checks that an import specifier's hostname is equal to or a child of a token's hostname, which can cause tokens to be sent to servers they shouldn't be sent to. An auth token intended for `example[.]com` may be sent to `notexample[.]com`. Anyone who uses DENO_AUTH_TOKENS and imports potentially untrusted code is affected. Version 1.40.0 contains a patch for this issue</description>
      <guid isPermaLink="false">CVE-2024-27932|2024-08-02T00:41:55.783Z</guid>
      <pubDate>Wed, 06 Mar 2024 20:45:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27934|2024-08-02T00:41:55.960Z -- denoland -- deno</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-27934</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime. Starting in version 1.36.2 and prior to version 1.40.3, use of inherently unsafe `*const c_void` and `ExternalPointer` leads to use-after-free access of the underlying structure, resulting in arbitrary code execution. Use of inherently unsafe `*const c_void` and `ExternalPointer` leads to use-after-free access of the underlying structure, which is exploitable by an attacker controlling the code executed inside a Deno runtime to obtain arbitrary code execution on the host machine regardless of permissions. This bug is known to be exploitable for both `*const c_void` and `ExternalPointer` implementations. Version 1.40.3 fixes this issue.</description>
      <guid isPermaLink="false">CVE-2024-27934|2024-08-02T00:41:55.960Z</guid>
      <pubDate>Wed, 06 Mar 2024 20:56:39 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27936|2024-08-02T00:41:55.809Z -- denoland -- deno</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-27936</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. Starting in version 1.32.1 and prior to version 1.41.0 of the deno library, maliciously crafted permission request can show the spoofed permission prompt by inserting a broken ANSI escape sequence into the request contents. Deno is stripping any ANSI escape sequences from the permission prompt, but permissions given to the program are based on the contents that contain the ANSI escape sequences. Any Deno program can spoof the content of the interactive permission prompt by inserting a broken ANSI code, which allows a malicious Deno program to display the wrong file path or program name to the user. Version 1.41.0 of the deno library contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-27936|2024-08-02T00:41:55.809Z</guid>
      <pubDate>Wed, 06 Mar 2024 21:05:59 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27935|2024-08-02T00:41:55.847Z -- denoland -- deno</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-27935</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime. Starting in version 1.35.1 and prior to version 1.36.3, a vulnerability in Deno's Node.js compatibility runtime allows for cross-session data contamination during simultaneous asynchronous reads from Node.js streams sourced from sockets or files. The issue arises from the re-use of a global buffer (BUF) in stream_wrap.ts used as a performance optimization to limit allocations during these asynchronous read operations. This can lead to data intended for one session being received by another session, potentially resulting in data corruption and unexpected behavior. This affects all users of Deno that use the node.js compatibility layer for network communication or other streams, including packages that may require node.js libraries indirectly. Version 1.36.3 contains a patch for this issue.</description>
      <guid isPermaLink="false">CVE-2024-27935|2024-08-02T00:41:55.847Z</guid>
      <pubDate>Wed, 06 Mar 2024 21:02:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34346|2024-08-02T02:51:11.237Z -- denoland -- deno</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-34346</link>
      <description>Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. The Deno sandbox may be unexpectedly weakened by allowing file read/write access to privileged files in various locations on Unix and Windows platforms. For example, reading `/proc/self/environ` may provide access equivalent to `--allow-env`, and writing `/proc/self/mem` may provide access equivalent to `--allow-all`. Users who grant read and write access to the entire filesystem may not realize that these access to these files may have additional, unintended consequences. The documentation did not reflect that this practice should be undertaken to increase the strength of the security sandbox. Users who run code with `--allow-read` or `--allow-write` may unexpectedly end up granting additional permissions via file-system operations. Deno 1.43 and above require explicit `--allow-all` access to read or write `/etc`, `/dev` on unix platform (as well as `/proc` and `/sys` on linux platforms), and any path starting with `\\` on Windows.</description>
      <guid isPermaLink="false">CVE-2024-34346|2024-08-02T02:51:11.237Z</guid>
      <pubDate>Tue, 07 May 2024 21:02:16 +0000</pubDate>
    </item>
  </channel>
</rss>
