<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>CVE Feed for denoland -- all</title><link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/denoland/all.rss</link><description>The latest CVEs for denoland -- all</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><lastBuildDate>Fri, 31 May 2024 16:28:18 +0000</lastBuildDate><ttl>60</ttl><item><title>CVE-2024-32477|2024-04-18T19:58:25.993Z -- denoland -- deno
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32477</link><description>Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. By using ANSI escape sequences and a race between `libc::tcflush(0, libc::TCIFLUSH)` and reading standard input, it's possible to manipulate the permission prompt and force it to allow an unsafe action regardless of the user input. Some ANSI escape sequences act as a info request to the master terminal emulator and the terminal emulator sends back the reply in the PTY channel. standard streams also use this channel to send and get data. For example the `\033[6n` sequence requests the current cursor position. These sequences allow us to append data to the standard input of Deno. This vulnerability allows an attacker to bypass Deno permission policy.  This vulnerability is fixed in 1.42.2.
</description><guid isPermaLink="false">CVE-2024-32477|2024-04-18T19:58:25.993Z</guid><pubDate>Thu, 18 Apr 2024 19:58:25 +0000</pubDate></item><item><title>CVE-2024-27934|2024-03-06T20:56:39.368Z -- denoland -- deno
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27934</link><description>Deno is a JavaScript, TypeScript, and WebAssembly runtime. Starting in version 1.36.2 and prior to version 1.40.3, use of inherently unsafe `*const c_void` and `ExternalPointer` leads to use-after-free access of the underlying structure, resulting in arbitrary code execution. Use of inherently unsafe `*const c_void` and `ExternalPointer` leads to use-after-free access of the underlying structure, which is exploitable by an attacker controlling the code executed inside a Deno runtime to obtain arbitrary code execution on the host machine regardless of permissions. This bug is known to be exploitable for both `*const c_void` and `ExternalPointer` implementations. Version 1.40.3 fixes this issue.</description><guid isPermaLink="false">CVE-2024-27934|2024-03-06T20:56:39.368Z</guid><pubDate>Wed, 06 Mar 2024 20:56:39 +0000</pubDate></item><item><title>CVE-2024-27935|2024-03-06T21:02:14.359Z -- denoland -- deno
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27935</link><description>Deno is a JavaScript, TypeScript, and WebAssembly runtime. Starting in version 1.35.1 and prior to version 1.36.3, a vulnerability in Deno's Node.js compatibility runtime allows for cross-session data contamination during simultaneous asynchronous reads from Node.js streams sourced from sockets or files. The issue arises from the re-use of a global buffer (BUF) in stream_wrap.ts used as a performance optimization to limit allocations during these asynchronous read operations. This can lead to data intended for one session being received by another session, potentially resulting in data corruption and unexpected behavior. This affects all users of Deno that use the node.js compatibility layer for network communication or other streams, including packages that may require node.js libraries indirectly. Version 1.36.3 contains a patch for this issue.
</description><guid isPermaLink="false">CVE-2024-27935|2024-03-06T21:02:14.359Z</guid><pubDate>Wed, 06 Mar 2024 21:02:14 +0000</pubDate></item><item><title>CVE-2024-27932|2024-03-06T20:45:16.373Z -- denoland -- deno
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27932</link><description>Deno is a JavaScript, TypeScript, and WebAssembly runtime. Starting in version 1.8.0 and prior to version 1.40.4, Deno improperly checks that an import specifier's hostname is equal to or a child of a token's hostname, which can cause tokens to be sent to servers they shouldn't be sent to. An auth token intended for `example[.]com` may be sent to `notexample[.]com`. Anyone who uses DENO_AUTH_TOKENS and imports potentially untrusted code is affected. Version 1.40.0 contains a patch for this issue</description><guid isPermaLink="false">CVE-2024-27932|2024-03-06T20:45:16.373Z</guid><pubDate>Wed, 06 Mar 2024 20:45:16 +0000</pubDate></item><item><title>CVE-2024-27933|2024-03-06T20:52:17.599Z -- denoland -- deno
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27933</link><description>Deno is a JavaScript, TypeScript, and WebAssembly runtime. In version 1.39.0, use of raw file descriptors in `op_node_ipc_pipe()` leads to premature close of arbitrary file descriptors, allowing standard input to be re-opened as a different resource resulting in permission prompt bypass. Node child_process IPC relies on the JS side to pass the raw IPC file descriptor to `op_node_ipc_pipe()`, which returns a `IpcJsonStreamResource` ID associated with the file descriptor. On closing the resource, the raw file descriptor is closed together.

Use of raw file descriptors in `op_node_ipc_pipe()` leads to premature close of arbitrary file descriptors. This allow standard input (fd 0) to be closed and re-opened for a different resource, which allows a silent permission prompt bypass. This is exploitable by an attacker controlling the code executed inside a Deno runtime to obtain arbitrary code execution on the host machine regardless of permissions.

This bug is known to be exploitable. There is a working exploit that achieves arbitrary code execution by bypassing prompts from zero permissions, additionally abusing the fact that Cache API lacks filesystem permission checks. The attack can be conducted silently as stderr can also be closed, suppressing all prompt outputs.

Version 1.39.1 fixes the bug.
</description><guid isPermaLink="false">CVE-2024-27933|2024-03-06T20:52:17.599Z</guid><pubDate>Wed, 06 Mar 2024 20:52:17 +0000</pubDate></item><item><title>CVE-2024-27931|2024-03-05T16:43:11.934Z -- denoland -- deno
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27931</link><description>Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. Insufficient validation of parameters in `Deno.makeTemp*` APIs would allow for creation of files outside of the allowed directories. This may allow the user to overwrite important files on the system that may affect other systems. A user may provide a prefix or suffix to a `Deno.makeTemp*` API containing path traversal characters. This is fixed in Deno 1.41.1.

</description><guid isPermaLink="false">CVE-2024-27931|2024-03-05T16:43:11.934Z</guid><pubDate>Tue, 05 Mar 2024 16:43:11 +0000</pubDate></item><item><title>CVE-2024-27936|2024-03-06T21:05:59.251Z -- denoland -- deno
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27936</link><description>Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. Starting in version 1.32.1 and prior to version 1.41 of the deno_runtime library, maliciously crafted permission request can show the spoofed permission prompt by inserting a broken ANSI escape sequence into the request contents. Deno is stripping any ANSI escape sequences from the permission prompt, but permissions given to the program are based on the contents that contain the ANSI escape sequences. Any Deno program can spoof the content of the interactive permission prompt by inserting a broken ANSI code, which allows a malicious Deno program to display the wrong file path or program name to the user. Version 1.41 of the deno_runtime library contains a patch for the issue.</description><guid isPermaLink="false">CVE-2024-27936|2024-03-06T21:05:59.251Z</guid><pubDate>Wed, 06 Mar 2024 21:05:59 +0000</pubDate></item><item><title>CVE-2024-34346|2024-05-07T21:02:16.809Z -- denoland -- deno
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34346</link><description>Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. The Deno sandbox may be unexpectedly weakened by allowing file read/write access to privileged files in various locations on Unix and Windows platforms. For example, reading `/proc/self/environ` may provide access equivalent to `--allow-env`, and writing `/proc/self/mem` may provide access equivalent to `--allow-all`. Users who grant read and write access to the entire filesystem may not realize that these access to these files may have additional, unintended consequences. The documentation did not reflect that this practice should be undertaken to increase the strength of the security sandbox. Users who run code with `--allow-read` or `--allow-write` may unexpectedly end up granting additional permissions via file-system operations. Deno 1.43 and above require explicit `--allow-all` access to read or write `/etc`, `/dev` on unix platform (as well as `/proc` and `/sys` on linux platforms), and any path starting with `\\` on Windows.
</description><guid isPermaLink="false">CVE-2024-34346|2024-05-07T21:02:16.809Z</guid><pubDate>Tue, 07 May 2024 21:02:16 +0000</pubDate></item></channel></rss>