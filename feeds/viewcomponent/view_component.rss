<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for ViewComponent -- view_component</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/viewcomponent/view_component.rss</link>
    <description>The latest CVEs for ViewComponent -- view_component</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 01 Aug 2024 23:22:42 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-21636|2024-08-01T22:27:35.781Z -- viewcomponent -- view_component
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-21636</link>
      <description>view_component is a framework for building reusable, testable, and encapsulated view components in Ruby on Rails. Versions prior to 3.9.0 and 2.83.0 have a cross-site scripting vulnerability that has the potential to impact anyone rendering a component directly from a controller with the view_component gem. Note that only components that define a `#call` method (i.e. instead of using a sidecar template) are affected. The return value of the `#call` method is not sanitized and can include user-defined content. In addition, the return value of the `#output_postamble` methodis not sanitized, which can also lead to cross-site scripting issues. Versions 3.9.0 and 2.83.0 have been released and fully mitigate both the `#call` and the `#output_postamble` vulnerabilities. As a workaround, sanitize the return value of `#call`.</description>
      <guid isPermaLink="false">CVE-2024-21636|2024-08-01T22:27:35.781Z</guid>
      <pubDate>Thu, 04 Jan 2024 20:09:08 +0000</pubDate>
    </item>
  </channel>
</rss>
