<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for OP-TEE -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/op-tee/all.rss</link>
    <description>The latest CVEs for OP-TEE -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Wed, 25 Sep 2024 22:23:22 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-41325|2024-09-25T18:49:09.428Z -- op-tee -- optee_os
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-41325</link>
      <description>OP-TEE is a Trusted Execution Environment (TEE) designed as companion to a non-secure Linux kernel running on Arm; Cortex-A cores using the TrustZone technology. Starting in version 3.20 and prior to version 3.22, `shdr_verify_signature` can make a double free. `shdr_verify_signature` used to verify a TA binary before it is loaded. To verify a signature of it, allocate a memory for RSA key. RSA key allocate function (`sw_crypto_acipher_alloc_rsa_public_key`) will try to allocate a memory (which is optee’s heap memory). RSA key is consist of exponent and modulus (represent as variable `e`, `n`) and it allocation is not atomic way, so it may succeed in `e` but fail in `n`. In this case sw_crypto_acipher_alloc_rsa_public_key` will free on `e` and return as it is failed but variable ‘e’ is remained as already freed memory address . `shdr_verify_signature` will free again that memory (which is `e`) even it is freed when it failed allocate RSA key. A patch is available in version 3.22. No known workarounds are available.</description>
      <guid isPermaLink="false">CVE-2023-41325|2024-09-25T18:49:09.428Z</guid>
      <pubDate>Fri, 15 Sep 2023 19:40:58 +0000</pubDate>
    </item>
  </channel>
</rss>
