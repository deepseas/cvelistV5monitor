<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Go standard library -- net/textproto</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/go%20standard%20library/net%2Ftextproto.rss</link>
    <description>The latest CVEs for Go standard library -- net/textproto</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Wed, 12 Jun 2024 11:24:32 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-24534|2023-06-12T19:08:10.543Z -- go%20standard%20library -- net%2Ftextproto
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-24534</link>
      <description>HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.</description>
      <guid isPermaLink="false">CVE-2023-24534|2023-06-12T19:08:10.543Z</guid>
      <pubDate>Thu, 06 Apr 2023 15:50:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-45290|2024-06-04T17:19:53.634Z -- go%20standard%20library -- net%2Ftextproto
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-45290</link>
      <description>When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion. With fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.</description>
      <guid isPermaLink="false">CVE-2023-45290|2024-06-04T17:19:53.634Z</guid>
      <pubDate>Tue, 05 Mar 2024 22:22:28 +0000</pubDate>
    </item>
  </channel>
</rss>
