<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for mlflow -- mlflow/mlflow</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/mlflow/mlflow%2Fmlflow.rss</link>
    <description>The latest CVEs for mlflow -- mlflow/mlflow</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 12:25:34 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-6909|2024-08-02T08:42:08.521Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6909</link>
      <description>Path Traversal: '\..\filename' in GitHub repository mlflow/mlflow prior to 2.9.2.</description>
      <guid isPermaLink="false">CVE-2023-6909|2024-08-02T08:42:08.521Z</guid>
      <pubDate>Mon, 18 Dec 2023 00:00:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-4033|2024-08-02T07:17:11.026Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-4033</link>
      <description>OS Command Injection in GitHub repository mlflow/mlflow prior to 2.6.0.</description>
      <guid isPermaLink="false">CVE-2023-4033|2024-08-02T07:17:11.026Z</guid>
      <pubDate>Tue, 01 Aug 2023 00:00:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6974|2024-08-02T08:50:08.017Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6974</link>
      <description>A malicious user could use this issue to access internal HTTP(s) servers and in the worst case (ie: aws instance) it could be abuse to get a remote code execution on the victim machine.</description>
      <guid isPermaLink="false">CVE-2023-6974|2024-08-02T08:50:08.017Z</guid>
      <pubDate>Wed, 20 Dec 2023 05:25:42 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-2780|2024-08-02T06:33:05.745Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-2780</link>
      <description>Path Traversal: '\..\filename' in GitHub repository mlflow/mlflow prior to 2.3.1.</description>
      <guid isPermaLink="false">CVE-2023-2780|2024-08-02T06:33:05.745Z</guid>
      <pubDate>Wed, 17 May 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6976|2024-08-02T08:50:06.839Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6976</link>
      <description>This vulnerability is capable of writing arbitrary files into arbitrary locations on the remote filesystem in the context of the server process.</description>
      <guid isPermaLink="false">CVE-2023-6976|2024-08-02T08:50:06.839Z</guid>
      <pubDate>Wed, 20 Dec 2023 05:30:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6977|2024-08-02T08:50:06.994Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6977</link>
      <description>This vulnerability enables malicious users to read sensitive files on the server.</description>
      <guid isPermaLink="false">CVE-2023-6977|2024-08-02T08:50:06.994Z</guid>
      <pubDate>Wed, 20 Dec 2023 05:37:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6709|2024-08-02T08:35:14.940Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6709</link>
      <description>Improper Neutralization of Special Elements Used in a Template Engine in GitHub repository mlflow/mlflow prior to 2.9.2.</description>
      <guid isPermaLink="false">CVE-2023-6709|2024-08-02T08:35:14.940Z</guid>
      <pubDate>Tue, 12 Dec 2023 04:05:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6018|2024-08-02T08:21:17.069Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6018</link>
      <description>An attacker can overwrite any file on the server hosting MLflow without any authentication.</description>
      <guid isPermaLink="false">CVE-2023-6018|2024-08-02T08:21:17.069Z</guid>
      <pubDate>Thu, 16 Nov 2023 16:05:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6940|2024-08-02T08:42:08.542Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6940</link>
      <description>with only one user interaction(download a malicious config), attackers can gain full command execution on the victim system.</description>
      <guid isPermaLink="false">CVE-2023-6940|2024-08-02T08:42:08.542Z</guid>
      <pubDate>Tue, 19 Dec 2023 01:41:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6015|2024-08-02T08:21:17.131Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6015</link>
      <description>MLflow allowed arbitrary files to be PUT onto the server.</description>
      <guid isPermaLink="false">CVE-2023-6015|2024-08-02T08:21:17.131Z</guid>
      <pubDate>Thu, 16 Nov 2023 16:06:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6831|2024-08-02T08:42:07.635Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6831</link>
      <description>Path Traversal: '\..\filename' in GitHub repository mlflow/mlflow prior to 2.9.2.</description>
      <guid isPermaLink="false">CVE-2023-6831|2024-08-02T08:42:07.635Z</guid>
      <pubDate>Fri, 15 Dec 2023 00:00:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6014|2024-08-02T08:21:17.031Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6014</link>
      <description>An attacker is able to arbitrarily create an account in MLflow bypassing any authentication requirment.</description>
      <guid isPermaLink="false">CVE-2023-6014|2024-08-02T08:21:17.031Z</guid>
      <pubDate>Thu, 16 Nov 2023 21:07:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6753|2024-08-02T08:42:07.229Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6753</link>
      <description>Path Traversal in GitHub repository mlflow/mlflow prior to 2.9.2.</description>
      <guid isPermaLink="false">CVE-2023-6753|2024-08-02T08:42:07.229Z</guid>
      <pubDate>Wed, 13 Dec 2023 00:00:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-3765|2024-08-02T07:08:50.075Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-3765</link>
      <description>Absolute Path Traversal in GitHub repository mlflow/mlflow prior to 2.5.0.</description>
      <guid isPermaLink="false">CVE-2023-3765|2024-08-02T07:08:50.075Z</guid>
      <pubDate>Wed, 19 Jul 2023 00:53:33 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-1176|2024-08-02T05:40:58.081Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-1176</link>
      <description>Absolute Path Traversal in GitHub repository mlflow/mlflow prior to 2.2.2.</description>
      <guid isPermaLink="false">CVE-2023-1176|2024-08-02T05:40:58.081Z</guid>
      <pubDate>Fri, 24 Mar 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6568|2024-08-02T08:35:14.502Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6568</link>
      <description>A reflected Cross-Site Scripting (XSS) vulnerability exists in the mlflow/mlflow repository, specifically within the handling of the Content-Type header in POST requests. An attacker can inject malicious JavaScript code into the Content-Type header, which is then improperly reflected back to the user without adequate sanitization or escaping, leading to arbitrary JavaScript execution in the context of the victim's browser. The vulnerability is present in the mlflow/server/auth/__init__.py file, where the user-supplied Content-Type header is directly injected into a Python formatted string and returned to the user, facilitating the XSS attack.</description>
      <guid isPermaLink="false">CVE-2023-6568|2024-08-02T08:35:14.502Z</guid>
      <pubDate>Thu, 07 Dec 2023 04:54:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6975|2024-08-02T08:50:06.824Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6975</link>
      <description>A malicious user could use this issue to get command execution on the vulnerable machine and get access to data &amp; models information.</description>
      <guid isPermaLink="false">CVE-2023-6975|2024-08-02T08:50:06.824Z</guid>
      <pubDate>Wed, 20 Dec 2023 05:26:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-1177|2024-08-02T05:40:58.232Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-1177</link>
      <description>Path Traversal: '\..\filename' in GitHub repository mlflow/mlflow prior to 2.2.1.

</description>
      <guid isPermaLink="false">CVE-2023-1177|2024-08-02T05:40:58.232Z</guid>
      <pubDate>Fri, 24 Mar 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-2356|2024-08-02T06:19:14.699Z -- mlflow -- mlflow%2Fmlflow
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-2356</link>
      <description>Relative Path Traversal in GitHub repository mlflow/mlflow prior to 2.3.1.</description>
      <guid isPermaLink="false">CVE-2023-2356|2024-08-02T06:19:14.699Z</guid>
      <pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2928|2024-08-01T19:32:42.225Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-2928</link>
      <description>A Local File Inclusion (LFI) vulnerability was identified in mlflow/mlflow, specifically in version 2.9.2, which was fixed in version 2.11.3. This vulnerability arises from the application's failure to properly validate URI fragments for directory traversal sequences such as '../'. An attacker can exploit this flaw by manipulating the fragment part of the URI to read arbitrary files on the local file system, including sensitive files like '/etc/passwd'. The vulnerability is a bypass to a previous patch that only addressed similar manipulation within the URI's query string, highlighting the need for comprehensive validation of all parts of a URI to prevent LFI attacks.</description>
      <guid isPermaLink="false">CVE-2024-2928|2024-08-01T19:32:42.225Z</guid>
      <pubDate>Thu, 06 Jun 2024 18:29:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3099|2024-08-01T19:32:42.675Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3099</link>
      <description>A vulnerability in mlflow/mlflow version 2.11.1 allows attackers to create multiple models with the same name by exploiting URL encoding. This flaw can lead to Denial of Service (DoS) as an authenticated user might not be able to use the intended model, as it will open a different model each time. Additionally, an attacker can exploit this vulnerability to perform data model poisoning by creating a model with the same name, potentially causing an authenticated user to become a victim by using the poisoned model. The issue stems from inadequate validation of model names, allowing for the creation of models with URL-encoded names that are treated as distinct from their URL-decoded counterparts.</description>
      <guid isPermaLink="false">CVE-2024-3099|2024-08-01T19:32:42.675Z</guid>
      <pubDate>Thu, 06 Jun 2024 18:08:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3573|2024-07-24T17:16:49.625Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3573</link>
      <description>mlflow/mlflow is vulnerable to Local File Inclusion (LFI) due to improper parsing of URIs, allowing attackers to bypass checks and read arbitrary files on the system. The issue arises from the 'is_local_uri' function's failure to properly handle URIs with empty or 'file' schemes, leading to the misclassification of URIs as non-local. Attackers can exploit this by crafting malicious model versions with specially crafted 'source' parameters, enabling the reading of sensitive files within at least two directory levels from the server's root.</description>
      <guid isPermaLink="false">CVE-2024-3573|2024-07-24T17:16:49.625Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1593|2024-07-24T17:16:06.273Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1593</link>
      <description>A path traversal vulnerability exists in the mlflow/mlflow repository due to improper handling of URL parameters. By smuggling path traversal sequences using the ';' character in URLs, attackers can manipulate the 'params' portion of the URL to gain unauthorized access to files or directories. This vulnerability allows for arbitrary data smuggling into the 'params' part of the URL, enabling attacks similar to those described in previous reports but utilizing the ';' character for parameter smuggling. Successful exploitation could lead to unauthorized information disclosure or server compromise.</description>
      <guid isPermaLink="false">CVE-2024-1593|2024-07-24T17:16:06.273Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2928|2024-07-24T17:23:22.838Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-2928</link>
      <description>A Local File Inclusion (LFI) vulnerability was identified in mlflow/mlflow, specifically in version 2.9.2, which was fixed in version 2.11.3. This vulnerability arises from the application's failure to properly validate URI fragments for directory traversal sequences such as '../'. An attacker can exploit this flaw by manipulating the fragment part of the URI to read arbitrary files on the local file system, including sensitive files like '/etc/passwd'. The vulnerability is a bypass to a previous patch that only addressed similar manipulation within the URI's query string, highlighting the need for comprehensive validation of all parts of a URI to prevent LFI attacks.</description>
      <guid isPermaLink="false">CVE-2024-2928|2024-07-24T17:23:22.838Z</guid>
      <pubDate>Thu, 06 Jun 2024 18:29:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3099|2024-07-24T17:22:16.990Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3099</link>
      <description>A vulnerability in mlflow/mlflow version 2.11.1 allows attackers to create multiple models with the same name by exploiting URL encoding. This flaw can lead to Denial of Service (DoS) as an authenticated user might not be able to use the intended model, as it will open a different model each time. Additionally, an attacker can exploit this vulnerability to perform data model poisoning by creating a model with the same name, potentially causing an authenticated user to become a victim by using the poisoned model. The issue stems from inadequate validation of model names, allowing for the creation of models with URL-encoded names that are treated as distinct from their URL-decoded counterparts.</description>
      <guid isPermaLink="false">CVE-2024-3099|2024-07-24T17:22:16.990Z</guid>
      <pubDate>Thu, 06 Jun 2024 18:08:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1483|2024-07-03T16:20:01.509Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1483</link>
      <description>A path traversal vulnerability exists in mlflow/mlflow version 2.9.2, allowing attackers to access arbitrary files on the server. By crafting a series of HTTP POST requests with specially crafted 'artifact_location' and 'source' parameters, using a local URI with '#' instead of '?', an attacker can traverse the server's directory structure. The issue occurs due to insufficient validation of user-supplied input in the server's handlers.</description>
      <guid isPermaLink="false">CVE-2024-1483|2024-07-03T16:20:01.509Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3573|2024-06-17T19:42:14.923Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3573</link>
      <description>mlflow/mlflow is vulnerable to Local File Inclusion (LFI) due to improper parsing of URIs, allowing attackers to bypass checks and read arbitrary files on the system. The issue arises from the 'is_local_uri' function's failure to properly handle URIs with empty or 'file' schemes, leading to the misclassification of URIs as non-local. Attackers can exploit this by crafting malicious model versions with specially crafted 'source' parameters, enabling the reading of sensitive files within at least two directory levels from the server's root.</description>
      <guid isPermaLink="false">CVE-2024-3573|2024-06-17T19:42:14.923Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2928|2024-06-06T19:39:55.440Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2928</link>
      <description>A Local File Inclusion (LFI) vulnerability was identified in mlflow/mlflow, specifically in version 2.9.2, which was fixed in version 2.11.3. This vulnerability arises from the application's failure to properly validate URI fragments for directory traversal sequences such as '../'. An attacker can exploit this flaw by manipulating the fragment part of the URI to read arbitrary files on the local file system, including sensitive files like '/etc/passwd'. The vulnerability is a bypass to a previous patch that only addressed similar manipulation within the URI's query string, highlighting the need for comprehensive validation of all parts of a URI to prevent LFI attacks.</description>
      <guid isPermaLink="false">CVE-2024-2928|2024-06-06T19:39:55.440Z</guid>
      <pubDate>Thu, 06 Jun 2024 18:29:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3573|2024-04-16T11:10:56.255Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-3573</link>
      <description>mlflow/mlflow is vulnerable to Local File Inclusion (LFI) due to improper parsing of URIs, allowing attackers to bypass checks and read arbitrary files on the system. The issue arises from the 'is_local_uri' function's failure to properly handle URIs with empty or 'file' schemes, leading to the misclassification of URIs as non-local. Attackers can exploit this by crafting malicious model versions with specially crafted 'source' parameters, enabling the reading of sensitive files within at least two directory levels from the server's root.</description>
      <guid isPermaLink="false">CVE-2024-3573|2024-04-16T11:10:56.255Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3099|2024-06-07T12:54:32.844Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-3099</link>
      <description>A vulnerability in mlflow/mlflow version 2.11.1 allows attackers to create multiple models with the same name by exploiting URL encoding. This flaw can lead to Denial of Service (DoS) as an authenticated user might not be able to use the intended model, as it will open a different model each time. Additionally, an attacker can exploit this vulnerability to perform data model poisoning by creating a model with the same name, potentially causing an authenticated user to become a victim by using the poisoned model. The issue stems from inadequate validation of model names, allowing for the creation of models with URL-encoded names that are treated as distinct from their URL-decoded counterparts.</description>
      <guid isPermaLink="false">CVE-2024-3099|2024-06-07T12:54:32.844Z</guid>
      <pubDate>Thu, 06 Jun 2024 18:08:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3848|2024-05-16T09:03:47.178Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-3848</link>
      <description>A path traversal vulnerability exists in mlflow/mlflow version 2.11.0, identified as a bypass for the previously addressed CVE-2023-6909. The vulnerability arises from the application's handling of artifact URLs, where a '#' character can be used to insert a path into the fragment, effectively skipping validation. This allows an attacker to construct a URL that, when processed, ignores the protocol scheme and uses the provided path for filesystem access. As a result, an attacker can read arbitrary files, including sensitive information such as SSH and cloud keys, by exploiting the way the application converts the URL into a filesystem path. The issue stems from insufficient validation of the fragment portion of the URL, leading to arbitrary file read through path traversal.</description>
      <guid isPermaLink="false">CVE-2024-3848|2024-05-16T09:03:47.178Z</guid>
      <pubDate>Thu, 16 May 2024 09:03:47 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4263|2024-06-04T17:53:33.255Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4263</link>
      <description>A broken access control vulnerability exists in mlflow/mlflow versions before 2.10.1, where low privilege users with only EDIT permissions on an experiment can delete any artifacts. This issue arises due to the lack of proper validation for DELETE requests by users with EDIT permissions, allowing them to perform unauthorized deletions of artifacts. The vulnerability specifically affects the handling of artifact deletions within the application, as demonstrated by the ability of a low privilege user to delete a directory inside an artifact using a DELETE request, despite the official documentation stating that users with EDIT permission can only read and update artifacts, not delete them.</description>
      <guid isPermaLink="false">CVE-2024-4263|2024-06-04T17:53:33.255Z</guid>
      <pubDate>Thu, 16 May 2024 09:03:48 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-0520|2024-06-06T20:17:58.996Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-0520</link>
      <description>A vulnerability in mlflow/mlflow version 8.2.1 allows for remote code execution due to improper neutralization of special elements used in an OS command ('Command Injection') within the `mlflow.data.http_dataset_source.py` module. Specifically, when loading a dataset from a source URL with an HTTP scheme, the filename extracted from the `Content-Disposition` header or the URL path is used to generate the final file path without proper sanitization. This flaw enables an attacker to control the file path fully by utilizing path traversal or absolute path techniques, such as '../../tmp/poc.txt' or '/tmp/poc.txt', leading to arbitrary file write. Exploiting this vulnerability could allow a malicious user to execute commands on the vulnerable machine, potentially gaining access to data and model information. The issue is fixed in version 2.9.0.</description>
      <guid isPermaLink="false">CVE-2024-0520|2024-06-06T20:17:58.996Z</guid>
      <pubDate>Thu, 06 Jun 2024 18:19:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1558|2024-06-04T17:59:42.679Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1558</link>
      <description>A path traversal vulnerability exists in the `_create_model_version()` function within `server/handlers.py` of the mlflow/mlflow repository, due to improper validation of the `source` parameter. Attackers can exploit this vulnerability by crafting a `source` parameter that bypasses the `_validate_non_local_source_contains_relative_paths(source)` function's checks, allowing for arbitrary file read access on the server. The issue arises from the handling of unquoted URL characters and the subsequent misuse of the original `source` value for model version creation, leading to the exposure of sensitive files when interacting with the `/model-versions/get-artifact` handler.</description>
      <guid isPermaLink="false">CVE-2024-1558|2024-06-04T17:59:42.679Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1483|2024-04-16T11:10:53.707Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1483</link>
      <description>A path traversal vulnerability exists in mlflow/mlflow version 2.9.2, allowing attackers to access arbitrary files on the server. By crafting a series of HTTP POST requests with specially crafted 'artifact_location' and 'source' parameters, using a local URI with '#' instead of '?', an attacker can traverse the server's directory structure. The issue occurs due to insufficient validation of user-supplied input in the server's handlers.</description>
      <guid isPermaLink="false">CVE-2024-1483|2024-04-16T11:10:53.707Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1593|2024-04-16T11:10:53.439Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1593</link>
      <description>A path traversal vulnerability exists in the mlflow/mlflow repository due to improper handling of URL parameters. By smuggling path traversal sequences using the ';' character in URLs, attackers can manipulate the 'params' portion of the URL to gain unauthorized access to files or directories. This vulnerability allows for arbitrary data smuggling into the 'params' part of the URL, enabling attacks similar to those described in previous reports but utilizing the ';' character for parameter smuggling. Successful exploitation could lead to unauthorized information disclosure or server compromise.</description>
      <guid isPermaLink="false">CVE-2024-1593|2024-04-16T11:10:53.439Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1594|2024-06-04T18:01:03.906Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1594</link>
      <description>A path traversal vulnerability exists in the mlflow/mlflow repository, specifically within the handling of the `artifact_location` parameter when creating an experiment. Attackers can exploit this vulnerability by using a fragment component `#` in the artifact location URI to read arbitrary files on the server in the context of the server's process. This issue is similar to CVE-2023-6909 but utilizes a different component of the URI to achieve the same effect.</description>
      <guid isPermaLink="false">CVE-2024-1594|2024-06-04T18:01:03.906Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1560|2024-04-16T11:10:51.689Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1560</link>
      <description>A path traversal vulnerability exists in the mlflow/mlflow repository, specifically within the artifact deletion functionality. Attackers can bypass path validation by exploiting the double decoding process in the `_delete_artifact_mlflow_artifacts` handler and `local_file_uri_to_path` function, allowing for the deletion of arbitrary directories on the server's filesystem. This vulnerability is due to an extra unquote operation in the `delete_artifacts` function of `local_artifact_repo.py`, which fails to properly sanitize user-supplied paths. The issue is present up to version 2.9.2, despite attempts to fix a similar issue in CVE-2023-6831.</description>
      <guid isPermaLink="false">CVE-2024-1560|2024-04-16T11:10:51.689Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1593|2024-07-03T15:53:34.168Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1593</link>
      <description>A path traversal vulnerability exists in the mlflow/mlflow repository due to improper handling of URL parameters. By smuggling path traversal sequences using the ';' character in URLs, attackers can manipulate the 'params' portion of the URL to gain unauthorized access to files or directories. This vulnerability allows for arbitrary data smuggling into the 'params' part of the URL, enabling attacks similar to those described in previous reports but utilizing the ';' character for parameter smuggling. Successful exploitation could lead to unauthorized information disclosure or server compromise.</description>
      <guid isPermaLink="false">CVE-2024-1593|2024-07-03T15:53:34.168Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3848|2024-07-24T15:45:57.489Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3848</link>
      <description>A path traversal vulnerability exists in mlflow/mlflow version 2.11.0, identified as a bypass for the previously addressed CVE-2023-6909. The vulnerability arises from the application's handling of artifact URLs, where a '#' character can be used to insert a path into the fragment, effectively skipping validation. This allows an attacker to construct a URL that, when processed, ignores the protocol scheme and uses the provided path for filesystem access. As a result, an attacker can read arbitrary files, including sensitive information such as SSH and cloud keys, by exploiting the way the application converts the URL into a filesystem path. The issue stems from insufficient validation of the fragment portion of the URL, leading to arbitrary file read through path traversal.</description>
      <guid isPermaLink="false">CVE-2024-3848|2024-07-24T15:45:57.489Z</guid>
      <pubDate>Thu, 16 May 2024 09:03:47 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1558|2024-07-24T15:47:04.358Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1558</link>
      <description>A path traversal vulnerability exists in the `_create_model_version()` function within `server/handlers.py` of the mlflow/mlflow repository, due to improper validation of the `source` parameter. Attackers can exploit this vulnerability by crafting a `source` parameter that bypasses the `_validate_non_local_source_contains_relative_paths(source)` function's checks, allowing for arbitrary file read access on the server. The issue arises from the handling of unquoted URL characters and the subsequent misuse of the original `source` value for model version creation, leading to the exposure of sensitive files when interacting with the `/model-versions/get-artifact` handler.</description>
      <guid isPermaLink="false">CVE-2024-1558|2024-07-24T15:47:04.358Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1594|2024-07-24T15:46:39.320Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1594</link>
      <description>A path traversal vulnerability exists in the mlflow/mlflow repository, specifically within the handling of the `artifact_location` parameter when creating an experiment. Attackers can exploit this vulnerability by using a fragment component `#` in the artifact location URI to read arbitrary files on the server in the context of the server's process. This issue is similar to CVE-2023-6909 but utilizes a different component of the URI to achieve the same effect.</description>
      <guid isPermaLink="false">CVE-2024-1594|2024-07-24T15:46:39.320Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1560|2024-08-01T18:40:21.396Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1560</link>
      <description>A path traversal vulnerability exists in the mlflow/mlflow repository, specifically within the artifact deletion functionality. Attackers can bypass path validation by exploiting the double decoding process in the `_delete_artifact_mlflow_artifacts` handler and `local_file_uri_to_path` function, allowing for the deletion of arbitrary directories on the server's filesystem. This vulnerability is due to an extra unquote operation in the `delete_artifacts` function of `local_artifact_repo.py`, which fails to properly sanitize user-supplied paths. The issue is present up to version 2.9.2, despite attempts to fix a similar issue in CVE-2023-6831.</description>
      <guid isPermaLink="false">CVE-2024-1560|2024-08-01T18:40:21.396Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1483|2024-08-01T18:40:21.239Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1483</link>
      <description>A path traversal vulnerability exists in mlflow/mlflow version 2.9.2, allowing attackers to access arbitrary files on the server. By crafting a series of HTTP POST requests with specially crafted 'artifact_location' and 'source' parameters, using a local URI with '#' instead of '?', an attacker can traverse the server's directory structure. The issue occurs due to insufficient validation of user-supplied input in the server's handlers.</description>
      <guid isPermaLink="false">CVE-2024-1483|2024-08-01T18:40:21.239Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1558|2024-08-01T18:40:21.526Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1558</link>
      <description>A path traversal vulnerability exists in the `_create_model_version()` function within `server/handlers.py` of the mlflow/mlflow repository, due to improper validation of the `source` parameter. Attackers can exploit this vulnerability by crafting a `source` parameter that bypasses the `_validate_non_local_source_contains_relative_paths(source)` function's checks, allowing for arbitrary file read access on the server. The issue arises from the handling of unquoted URL characters and the subsequent misuse of the original `source` value for model version creation, leading to the exposure of sensitive files when interacting with the `/model-versions/get-artifact` handler.</description>
      <guid isPermaLink="false">CVE-2024-1558|2024-08-01T18:40:21.526Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-0520|2024-08-01T18:11:35.193Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-0520</link>
      <description>A vulnerability in mlflow/mlflow version 8.2.1 allows for remote code execution due to improper neutralization of special elements used in an OS command ('Command Injection') within the `mlflow.data.http_dataset_source.py` module. Specifically, when loading a dataset from a source URL with an HTTP scheme, the filename extracted from the `Content-Disposition` header or the URL path is used to generate the final file path without proper sanitization. This flaw enables an attacker to control the file path fully by utilizing path traversal or absolute path techniques, such as '../../tmp/poc.txt' or '/tmp/poc.txt', leading to arbitrary file write. Exploiting this vulnerability could allow a malicious user to execute commands on the vulnerable machine, potentially gaining access to data and model information. The issue is fixed in version 2.9.0.</description>
      <guid isPermaLink="false">CVE-2024-0520|2024-08-01T18:11:35.193Z</guid>
      <pubDate>Thu, 06 Jun 2024 18:19:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1594|2024-08-01T18:48:20.634Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1594</link>
      <description>A path traversal vulnerability exists in the mlflow/mlflow repository, specifically within the handling of the `artifact_location` parameter when creating an experiment. Attackers can exploit this vulnerability by using a fragment component `#` in the artifact location URI to read arbitrary files on the server in the context of the server's process. This issue is similar to CVE-2023-6909 but utilizes a different component of the URI to achieve the same effect.</description>
      <guid isPermaLink="false">CVE-2024-1594|2024-08-01T18:48:20.634Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1593|2024-08-01T18:48:20.648Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1593</link>
      <description>A path traversal vulnerability exists in the mlflow/mlflow repository due to improper handling of URL parameters. By smuggling path traversal sequences using the ';' character in URLs, attackers can manipulate the 'params' portion of the URL to gain unauthorized access to files or directories. This vulnerability allows for arbitrary data smuggling into the 'params' part of the URL, enabling attacks similar to those described in previous reports but utilizing the ';' character for parameter smuggling. Successful exploitation could lead to unauthorized information disclosure or server compromise.</description>
      <guid isPermaLink="false">CVE-2024-1593|2024-08-01T18:48:20.648Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3848|2024-08-01T20:26:57.075Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3848</link>
      <description>A path traversal vulnerability exists in mlflow/mlflow version 2.11.0, identified as a bypass for the previously addressed CVE-2023-6909. The vulnerability arises from the application's handling of artifact URLs, where a '#' character can be used to insert a path into the fragment, effectively skipping validation. This allows an attacker to construct a URL that, when processed, ignores the protocol scheme and uses the provided path for filesystem access. As a result, an attacker can read arbitrary files, including sensitive information such as SSH and cloud keys, by exploiting the way the application converts the URL into a filesystem path. The issue stems from insufficient validation of the fragment portion of the URL, leading to arbitrary file read through path traversal.</description>
      <guid isPermaLink="false">CVE-2024-3848|2024-08-01T20:26:57.075Z</guid>
      <pubDate>Thu, 16 May 2024 09:03:47 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4263|2024-08-01T20:33:53.063Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4263</link>
      <description>A broken access control vulnerability exists in mlflow/mlflow versions before 2.10.1, where low privilege users with only EDIT permissions on an experiment can delete any artifacts. This issue arises due to the lack of proper validation for DELETE requests by users with EDIT permissions, allowing them to perform unauthorized deletions of artifacts. The vulnerability specifically affects the handling of artifact deletions within the application, as demonstrated by the ability of a low privilege user to delete a directory inside an artifact using a DELETE request, despite the official documentation stating that users with EDIT permission can only read and update artifacts, not delete them.</description>
      <guid isPermaLink="false">CVE-2024-4263|2024-08-01T20:33:53.063Z</guid>
      <pubDate>Thu, 16 May 2024 09:03:48 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3573|2024-08-01T20:12:07.901Z -- mlflow -- mlflow%2Fmlflow</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3573</link>
      <description>mlflow/mlflow is vulnerable to Local File Inclusion (LFI) due to improper parsing of URIs, allowing attackers to bypass checks and read arbitrary files on the system. The issue arises from the 'is_local_uri' function's failure to properly handle URIs with empty or 'file' schemes, leading to the misclassification of URIs as non-local. Attackers can exploit this by crafting malicious model versions with specially crafted 'source' parameters, enabling the reading of sensitive files within at least two directory levels from the server's root.</description>
      <guid isPermaLink="false">CVE-2024-3573|2024-08-01T20:12:07.901Z</guid>
      <pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate>
    </item>
  </channel>
</rss>
