<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>CVE Feed for mlflow -- mlflow/mlflow</title><link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/mlflow/mlflow%2Fmlflow.rss</link><description>The latest CVEs for mlflow -- mlflow/mlflow</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><lastBuildDate>Fri, 24 May 2024 21:24:10 +0000</lastBuildDate><ttl>60</ttl><item><title>CVE-2024-1560|2024-04-16T11:10:51.689Z -- mlflow -- mlflow/mlflow
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1560</link><description>A path traversal vulnerability exists in the mlflow/mlflow repository, specifically within the artifact deletion functionality. Attackers can bypass path validation by exploiting the double decoding process in the `_delete_artifact_mlflow_artifacts` handler and `local_file_uri_to_path` function, allowing for the deletion of arbitrary directories on the server's filesystem. This vulnerability is due to an extra unquote operation in the `delete_artifacts` function of `local_artifact_repo.py`, which fails to properly sanitize user-supplied paths. The issue is present up to version 2.9.2, despite attempts to fix a similar issue in CVE-2023-6831.</description><guid isPermaLink="false">CVE-2024-1560|2024-04-16T11:10:51.689Z</guid><pubDate>Tue, 16 Apr 2024 00:00:13 +0000</pubDate></item><item><title>CVE-2024-1594|2024-04-16T11:10:51.070Z -- mlflow -- mlflow/mlflow
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1594</link><description>A path traversal vulnerability exists in the mlflow/mlflow repository, specifically within the handling of the `artifact_location` parameter when creating an experiment. Attackers can exploit this vulnerability by using a fragment component `#` in the artifact location URI to read arbitrary files on the server in the context of the server's process. This issue is similar to CVE-2023-6909 but utilizes a different component of the URI to achieve the same effect. </description><guid isPermaLink="false">CVE-2024-1594|2024-04-16T11:10:51.070Z</guid><pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate></item><item><title>CVE-2024-1593|2024-04-16T11:10:53.439Z -- mlflow -- mlflow/mlflow
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1593</link><description>A path traversal vulnerability exists in the mlflow/mlflow repository due to improper handling of URL parameters. By smuggling path traversal sequences using the ';' character in URLs, attackers can manipulate the 'params' portion of the URL to gain unauthorized access to files or directories. This vulnerability allows for arbitrary data smuggling into the 'params' part of the URL, enabling attacks similar to those described in previous reports but utilizing the ';' character for parameter smuggling. Successful exploitation could lead to unauthorized information disclosure or server compromise.</description><guid isPermaLink="false">CVE-2024-1593|2024-04-16T11:10:53.439Z</guid><pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate></item><item><title>CVE-2024-1483|2024-04-16T11:10:53.707Z -- mlflow -- mlflow/mlflow
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1483</link><description>A path traversal vulnerability exists in mlflow/mlflow version 2.9.2, allowing attackers to access arbitrary files on the server. By crafting a series of HTTP POST requests with specially crafted 'artifact_location' and 'source' parameters, using a local URI with '#' instead of '?', an attacker can traverse the server's directory structure. The issue occurs due to insufficient validation of user-supplied input in the server's handlers.</description><guid isPermaLink="false">CVE-2024-1483|2024-04-16T11:10:53.707Z</guid><pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate></item><item><title>CVE-2024-1558|2024-04-16T11:10:51.858Z -- mlflow -- mlflow/mlflow
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1558</link><description>A path traversal vulnerability exists in the `_create_model_version()` function within `server/handlers.py` of the mlflow/mlflow repository, due to improper validation of the `source` parameter. Attackers can exploit this vulnerability by crafting a `source` parameter that bypasses the `_validate_non_local_source_contains_relative_paths(source)` function's checks, allowing for arbitrary file read access on the server. The issue arises from the handling of unquoted URL characters and the subsequent misuse of the original `source` value for model version creation, leading to the exposure of sensitive files when interacting with the `/model-versions/get-artifact` handler.</description><guid isPermaLink="false">CVE-2024-1558|2024-04-16T11:10:51.858Z</guid><pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate></item><item><title>CVE-2024-4263|2024-05-16T09:03:48.053Z -- mlflow -- mlflow/mlflow
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4263</link><description>A broken access control vulnerability exists in mlflow/mlflow versions before 2.10.1, where low privilege users with only EDIT permissions on an experiment can delete any artifacts. This issue arises due to the lack of proper validation for DELETE requests by users with EDIT permissions, allowing them to perform unauthorized deletions of artifacts. The vulnerability specifically affects the handling of artifact deletions within the application, as demonstrated by the ability of a low privilege user to delete a directory inside an artifact using a DELETE request, despite the official documentation stating that users with EDIT permission can only read and update artifacts, not delete them.</description><guid isPermaLink="false">CVE-2024-4263|2024-05-16T09:03:48.053Z</guid><pubDate>Thu, 16 May 2024 09:03:48 +0000</pubDate></item><item><title>CVE-2024-3848|2024-05-16T09:03:47.178Z -- mlflow -- mlflow/mlflow
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-3848</link><description>A path traversal vulnerability exists in mlflow/mlflow version 2.11.0, identified as a bypass for the previously addressed CVE-2023-6909. The vulnerability arises from the application's handling of artifact URLs, where a '#' character can be used to insert a path into the fragment, effectively skipping validation. This allows an attacker to construct a URL that, when processed, ignores the protocol scheme and uses the provided path for filesystem access. As a result, an attacker can read arbitrary files, including sensitive information such as SSH and cloud keys, by exploiting the way the application converts the URL into a filesystem path. The issue stems from insufficient validation of the fragment portion of the URL, leading to arbitrary file read through path traversal.</description><guid isPermaLink="false">CVE-2024-3848|2024-05-16T09:03:47.178Z</guid><pubDate>Thu, 16 May 2024 09:03:47 +0000</pubDate></item><item><title>CVE-2024-3573|2024-04-16T11:10:56.255Z -- mlflow -- mlflow/mlflow
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-3573</link><description>mlflow/mlflow is vulnerable to Local File Inclusion (LFI) due to improper parsing of URIs, allowing attackers to bypass checks and read arbitrary files on the system. The issue arises from the 'is_local_uri' function's failure to properly handle URIs with empty or 'file' schemes, leading to the misclassification of URIs as non-local. Attackers can exploit this by crafting malicious model versions with specially crafted 'source' parameters, enabling the reading of sensitive files within at least two directory levels from the server's root.</description><guid isPermaLink="false">CVE-2024-3573|2024-04-16T11:10:56.255Z</guid><pubDate>Tue, 16 Apr 2024 00:00:14 +0000</pubDate></item></channel></rss>