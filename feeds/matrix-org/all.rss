<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>CVE Feed for matrix-org -- all</title><link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/matrix-org/all.rss</link><description>The latest CVEs for matrix-org -- all</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><lastBuildDate>Tue, 28 May 2024 21:54:25 +0000</lastBuildDate><ttl>60</ttl><item><title>CVE-2024-32000|2024-04-12T20:02:51.987Z -- matrix-org -- matrix-appservice-irc
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32000</link><description>matrix-appservice-irc is a Node.js IRC bridge for the Matrix messaging protocol. matrix-appservice-irc before version 2.0.0 can be exploited to leak the truncated body of a message if a malicious user sends a Matrix reply to an event ID they don't have access to. As a precondition to the attack, the malicious user needs to know the event ID of the message they want to leak, as well as to be joined to both the Matrix room and the IRC channel it is bridged to. The message reply containing the leaked message content is visible to IRC channel members when this happens. matrix-appservice-irc 2.0.0 checks whether the user has permission to view an event before constructing a reply. Administrators should upgrade to this version. It's possible to limit the amount of information leaked by setting a reply template that doesn't contain the original message. See these lines `601-604` in the configuration file linked.</description><guid isPermaLink="false">CVE-2024-32000|2024-04-12T20:02:51.987Z</guid><pubDate>Fri, 12 Apr 2024 20:02:51 +0000</pubDate></item><item><title>CVE-2024-34353|2024-05-14T20:13:41.721Z -- matrix-org -- matrix-sdk-crypto
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34353</link><description>The matrix-sdk-crypto crate, part of the Matrix Rust SDK project, is an implementation of a Matrix end-to-end encryption state machine in Rust. In Matrix, the server-side `key backup` stores encrypted copies of Matrix message keys. This facilitates key sharing between a user's devices and provides a redundant copy in case all devices are lost. The key backup uses asymmetric
cryptography, with each server-side key backup assigned a unique public-private key pair. Due to a logic bug introduced in commit 71136e44c03c79f80d6d1a2446673bc4d53a2067, matrix-sdk-crypto version 0.7.0 will sometimes log the private part of the backup key pair to Rust debug logs (using the `tracing` crate). This issue has been resolved in matrix-sdk-crypto version 0.7.1. No known workarounds are available.</description><guid isPermaLink="false">CVE-2024-34353|2024-05-14T20:13:41.721Z</guid><pubDate>Mon, 13 May 2024 15:43:10 +0000</pubDate></item><item><title>CVE-2024-34063|2024-05-03T09:52:28.758Z -- matrix-org -- vodozemac
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34063</link><description>vodozemac is an implementation of Olm and Megolm in pure Rust. Versions 0.5.0 and 0.5.1 of vodozemac have degraded secret zeroization capabilities, due to changes in third-party cryptographic dependencies (the Dalek crates), which moved secret zeroization capabilities behind a feature flag and defaulted this feature to off. The degraded zeroization capabilities could result in the production of more memory copies of encryption secrets and secrets could linger in memory longer than necessary. This marginally increases the risk of sensitive data exposure. This issue has been addressed in version 0.6.0 and users are advised to upgrade. There are no known workarounds for this vulnerability.</description><guid isPermaLink="false">CVE-2024-34063|2024-05-03T09:52:28.758Z</guid><pubDate>Fri, 03 May 2024 09:52:28 +0000</pubDate></item></channel></rss>