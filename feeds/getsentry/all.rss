<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for getsentry -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/getsentry/all.rss</link>
    <description>The latest CVEs for getsentry -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 07:20:28 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-23485|2024-08-03T03:43:46.116Z -- getsentry -- sentry
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23485</link>
      <description>Sentry is an error tracking and performance monitoring platform. In versions of the sentry python library prior to 22.11.0 an attacker with a known valid invite link could manipulate a cookie to allow the same invite link to be reused on multiple accounts when joining an organization. As a result an attacker with a valid invite link can create multiple users and join an organization they may not have been originally invited to. This issue was patched in version 22.11.0. Sentry SaaS customers do not need to take action. Self-hosted Sentry installs on systems which can not upgrade can disable the invite functionality until they are ready to deploy the patched version by editing their `sentry.conf.py` file (usually located at `~/.sentry/`).
</description>
      <guid isPermaLink="false">CVE-2022-23485|2024-08-03T03:43:46.116Z</guid>
      <pubDate>Sat, 10 Dec 2022 00:40:46 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35196|2024-08-02T03:07:46.866Z -- getsentry -- sentry</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-35196</link>
      <description>Sentry is a developer-first error tracking and performance monitoring platform. Sentry's Slack integration incorrectly records the incoming request body in logs. This request data can contain sensitive information, including the deprecated Slack verification token. With this verification token, it is possible under specific configurations, an attacker can forge requests and act as the Slack integration. The request body is leaked in log entries matching `event == "slack.*" &amp;&amp; name == "sentry.integrations.slack" &amp;&amp; request_data == *`. The deprecated slack verification token, will be found in the `request_data.token` key. **SaaS users** do not need to take any action. **Self-hosted users** should upgrade to version 24.5.0 or higher, rotate their Slack verification token, and use the Slack Signing Secret instead of the verification token. For users only using the `slack.signing-secret` in their self-hosted configuration, the legacy verification token is not used to verify the webhook payload. It is ignored. Users unable to upgrade should either set the `slack.signing-secret` instead of `slack.verification-token`. The signing secret is Slack's recommended way of authenticating webhooks. By having `slack.singing-secret` set, Sentry self-hosted will no longer use the verification token for authentication of the webhooks, regardless of whether `slack.verification-token` is set or not. Alternatively if the self-hosted instance is unable to be upgraded or re-configured to use the `slack.signing-secret`, the logging configuration can be adjusted to not generate logs from the integration. The default logging configuration can be found in `src/sentry/conf/server.py`. **Services should be restarted once the configuration change is saved.**</description>
      <guid isPermaLink="false">CVE-2024-35196|2024-08-02T03:07:46.866Z</guid>
      <pubDate>Fri, 31 May 2024 17:25:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41656|2024-07-24T13:35:31.458Z -- getsentry -- sentry</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41656</link>
      <description>Sentry is an error tracking and performance monitoring platform. Starting in version 10.0.0 and prior to version 24.7.1, an unsanitized payload sent by an Integration platform integration allows storing arbitrary HTML tags on the Sentry side with the subsequent rendering them on the Issues page. Self-hosted Sentry users may be impacted in case of untrustworthy Integration platform integrations sending external issues from their side to Sentry. A patch has been released in Sentry 24.7.1. For Sentry SaaS customers, no action is needed. This has been patched on July 23, and even prior to the fix, the exploitation was not possible due to the strict Content Security Policy deployed on sentry.io site. For self-hosted users, the maintainers of Sentry strongly recommend upgrading Sentry to the latest version. If it is not possible, one could enable CSP on one's self-hosted installation with `CSP_REPORT_ONLY = False` (enforcing mode). This will mitigate the risk of cross-site scripting.</description>
      <guid isPermaLink="false">CVE-2024-41656|2024-07-24T13:35:31.458Z</guid>
      <pubDate>Tue, 23 Jul 2024 21:30:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40647|2024-07-18T17:57:55.364Z -- getsentry -- sentry-python</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40647</link>
      <description>sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentry's Python SDK &lt; 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations.</description>
      <guid isPermaLink="false">CVE-2024-40647|2024-07-18T17:57:55.364Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:51:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-24829|2024-07-05T17:20:49.165Z -- getsentry -- sentry</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-24829</link>
      <description>Sentry is an error tracking and performance monitoring platform. Sentryâ€™s integration platform provides a way for external services to interact with Sentry. One of such integrations, the Phabricator integration (maintained by Sentry) with version &lt;=24.1.1 contains a constrained SSRF vulnerability. An attacker could make Sentry send POST HTTP requests to arbitrary URLs (including internal IP addresses) by providing an unsanitized input to the Phabricator integration. However, the body payload is constrained to a specific format. If an attacker has access to a Sentry instance, this allows them to: 1. interact with internal network; 2. scan local/remote ports. This issue has been fixed in Sentry self-hosted release 24.1.2, and has already been mitigated on sentry.io on February 8. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-24829|2024-07-05T17:20:49.165Z</guid>
      <pubDate>Thu, 08 Feb 2024 23:44:07 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35196|2024-06-06T18:04:18.333Z -- getsentry -- sentry</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35196</link>
      <description>Sentry is a developer-first error tracking and performance monitoring platform. Sentry's Slack integration incorrectly records the incoming request body in logs. This request data can contain sensitive information, including the deprecated Slack verification token. With this verification token, it is possible under specific configurations, an attacker can forge requests and act as the Slack integration. The request body is leaked in log entries matching `event == "slack.*" &amp;&amp; name == "sentry.integrations.slack" &amp;&amp; request_data == *`. The deprecated slack verification token, will be found in the `request_data.token` key. **SaaS users** do not need to take any action. **Self-hosted users** should upgrade to version 24.5.0 or higher, rotate their Slack verification token, and use the Slack Signing Secret instead of the verification token. For users only using the `slack.signing-secret` in their self-hosted configuration, the legacy verification token is not used to verify the webhook payload. It is ignored. Users unable to upgrade should either set the `slack.signing-secret` instead of `slack.verification-token`. The signing secret is Slack's recommended way of authenticating webhooks. By having `slack.singing-secret` set, Sentry self-hosted will no longer use the verification token for authentication of the webhooks, regardless of whether `slack.verification-token` is set or not. Alternatively if the self-hosted instance is unable to be upgraded or re-configured to use the `slack.signing-secret`, the logging configuration can be adjusted to not generate logs from the integration. The default logging configuration can be found in `src/sentry/conf/server.py`. **Services should be restarted once the configuration change is saved.**</description>
      <guid isPermaLink="false">CVE-2024-35196|2024-06-06T18:04:18.333Z</guid>
      <pubDate>Fri, 31 May 2024 17:25:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-24829|2024-02-08T23:44:07.676Z -- getsentry -- sentry</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-24829</link>
      <description>Sentry is an error tracking and performance monitoring platform. Sentryâ€™s integration platform provides a way for external services to interact with Sentry. One of such integrations, the Phabricator integration (maintained by Sentry) with version &lt;=24.1.1 contains a constrained SSRF vulnerability. An attacker could make Sentry send POST HTTP requests to arbitrary URLs (including internal IP addresses) by providing an unsanitized input to the Phabricator integration. However, the body payload is constrained to a specific format. If an attacker has access to a Sentry instance, this allows them to: 1. interact with internal network; 2. scan local/remote ports. This issue has been fixed in Sentry self-hosted release 24.1.2, and has already been mitigated on sentry.io on February 8. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-24829|2024-02-08T23:44:07.676Z</guid>
      <pubDate>Thu, 08 Feb 2024 23:44:07 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32474|2024-06-04T17:51:26.370Z -- getsentry -- sentry</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32474</link>
      <description>Sentry is an error tracking and performance monitoring platform. Prior to 24.4.1, when authenticating as a superuser to Sentry with a username and password, the password is leaked as cleartext in logs under the _event_: `auth-index.validate_superuser`. An attacker with access to the log data could use these leaked credentials to login to the Sentry system as superuser. Self-hosted users on affected versions should upgrade to 24.4.1 or later. Users can configure the logging level to exclude logs of the `INFO` level and only generate logs for levels at `WARNING` or more.</description>
      <guid isPermaLink="false">CVE-2024-32474|2024-06-04T17:51:26.370Z</guid>
      <pubDate>Thu, 18 Apr 2024 19:50:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40647|2024-07-18T16:51:23.539Z -- getsentry -- sentry-python</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40647</link>
      <description>sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentry's Python SDK &lt; 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations.</description>
      <guid isPermaLink="false">CVE-2024-40647|2024-07-18T16:51:23.539Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:51:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41656|2024-07-23T21:30:25.526Z -- getsentry -- sentry</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41656</link>
      <description>Sentry is an error tracking and performance monitoring platform. Starting in version 10.0.0 and prior to version 24.7.1, an unsanitized payload sent by an Integration platform integration allows storing arbitrary HTML tags on the Sentry side with the subsequent rendering them on the Issues page. Self-hosted Sentry users may be impacted in case of untrustworthy Integration platform integrations sending external issues from their side to Sentry. A patch has been released in Sentry 24.7.1. For Sentry SaaS customers, no action is needed. This has been patched on July 23, and even prior to the fix, the exploitation was not possible due to the strict Content Security Policy deployed on sentry.io site. For self-hosted users, the maintainers of Sentry strongly recommend upgrading Sentry to the latest version. If it is not possible, one could enable CSP on one's self-hosted installation with `CSP_REPORT_ONLY = False` (enforcing mode). This will mitigate the risk of cross-site scripting.</description>
      <guid isPermaLink="false">CVE-2024-41656|2024-07-23T21:30:25.526Z</guid>
      <pubDate>Tue, 23 Jul 2024 21:30:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32474|2024-08-02T02:13:39.118Z -- getsentry -- sentry</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32474</link>
      <description>Sentry is an error tracking and performance monitoring platform. Prior to 24.4.1, when authenticating as a superuser to Sentry with a username and password, the password is leaked as cleartext in logs under the _event_: `auth-index.validate_superuser`. An attacker with access to the log data could use these leaked credentials to login to the Sentry system as superuser. Self-hosted users on affected versions should upgrade to 24.4.1 or later. Users can configure the logging level to exclude logs of the `INFO` level and only generate logs for levels at `WARNING` or more.</description>
      <guid isPermaLink="false">CVE-2024-32474|2024-08-02T02:13:39.118Z</guid>
      <pubDate>Thu, 18 Apr 2024 19:50:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41656|2024-08-02T04:46:52.659Z -- getsentry -- sentry</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41656</link>
      <description>Sentry is an error tracking and performance monitoring platform. Starting in version 10.0.0 and prior to version 24.7.1, an unsanitized payload sent by an Integration platform integration allows storing arbitrary HTML tags on the Sentry side with the subsequent rendering them on the Issues page. Self-hosted Sentry users may be impacted in case of untrustworthy Integration platform integrations sending external issues from their side to Sentry. A patch has been released in Sentry 24.7.1. For Sentry SaaS customers, no action is needed. This has been patched on July 23, and even prior to the fix, the exploitation was not possible due to the strict Content Security Policy deployed on sentry.io site. For self-hosted users, the maintainers of Sentry strongly recommend upgrading Sentry to the latest version. If it is not possible, one could enable CSP on one's self-hosted installation with `CSP_REPORT_ONLY = False` (enforcing mode). This will mitigate the risk of cross-site scripting.</description>
      <guid isPermaLink="false">CVE-2024-41656|2024-08-02T04:46:52.659Z</guid>
      <pubDate>Tue, 23 Jul 2024 21:30:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40647|2024-08-02T04:33:11.814Z -- getsentry -- sentry-python</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40647</link>
      <description>sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentry's Python SDK &lt; 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations.</description>
      <guid isPermaLink="false">CVE-2024-40647|2024-08-02T04:33:11.814Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:51:23 +0000</pubDate>
    </item>
  </channel>
</rss>
