<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for getsentry -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/getsentry/all.rss</link>
    <description>The latest CVEs for getsentry -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 20:23:30 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-36826|2024-08-02T17:01:09.754Z -- getsentry -- sentry
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-36826</link>
      <description>Sentry is an error tracking and performance monitoring platform. Starting in version 8.21.0 and prior to version 23.5.2, an authenticated user can download a debug or artifact bundle from arbitrary organizations and projects with a known bundle ID. The user does not need to be a member of the organization or have permissions on the project. A patch was issued in version 23.5.2 to ensure authorization checks are properly scoped on requests to retrieve debug or artifact bundles. Authenticated users who do not have the necessary permissions on the particular project are no longer able to download them. Sentry SaaS users do not need to take any action. Self-Hosted Sentry users should upgrade to version 23.5.2 or higher.</description>
      <guid isPermaLink="false">CVE-2023-36826|2024-08-02T17:01:09.754Z</guid>
      <pubDate>Tue, 25 Jul 2023 18:50:42 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-39531|2024-08-02T18:10:21.377Z -- getsentry -- sentry
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39531</link>
      <description>Sentry is an error tracking and performance monitoring platform. Starting in version 10.0.0 and prior to version 23.7.2, an attacker with sufficient client-side exploits could retrieve a valid access token for another user during the OAuth token exchange due to incorrect credential validation. The client ID must be known and the API application must have already been authorized on the targeted user account. Sentry SaaS customers do not need to take any action. Self-hosted installations should upgrade to version 23.7.2 or higher. There are no direct workarounds, but users should review applications authorized on their account and remove any that are no longer needed.

</description>
      <guid isPermaLink="false">CVE-2023-39531|2024-08-02T18:10:21.377Z</guid>
      <pubDate>Wed, 09 Aug 2023 16:09:34 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-39349|2024-08-02T18:02:06.994Z -- getsentry -- sentry
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39349</link>
      <description>Sentry is an error tracking and performance monitoring platform. Starting in version 22.1.0 and prior to version 23.7.2, an attacker with access to a token with few or no scopes can query `/api/0/api-tokens/` for a list of all tokens created by a user, including tokens with greater scopes, and use those tokens in other requests. There is no evidence that the issue was exploited on `sentry.io`. For self-hosted users, it is advised to rotate user auth tokens. A fix is available in version 23.7.2 of `sentry` and `self-hosted`. There are no known workarounds.</description>
      <guid isPermaLink="false">CVE-2023-39349|2024-08-02T18:02:06.994Z</guid>
      <pubDate>Mon, 07 Aug 2023 18:27:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-36829|2024-08-02T17:01:09.196Z -- getsentry -- sentry
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-36829</link>
      <description>Sentry is an error tracking and performance monitoring platform. Starting in version 23.6.0 and prior to version 23.6.2, the Sentry API incorrectly returns the `access-control-allow-credentials: true` HTTP header if the `Origin` request header ends with the `system.base-hostname` option of Sentry installation. This only affects installations that have `system.base-hostname` option explicitly set, as it is empty by default. Impact is limited since recent versions of major browsers have cross-site cookie blocking enabled by default. However, this flaw could allow other multi-step attacks. The patch has been released in Sentry 23.6.2.</description>
      <guid isPermaLink="false">CVE-2023-36829|2024-08-02T17:01:09.196Z</guid>
      <pubDate>Thu, 06 Jul 2023 22:08:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-28117|2024-08-02T12:30:24.355Z -- getsentry -- sentry-python
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-28117</link>
      <description>Sentry SDK is the official Python SDK for Sentry, real-time crash reporting software. When using the Django integration of versions prior to 1.14.0 of the Sentry SDK in a specific configuration it is possible to leak sensitive cookies values, including the session cookie to Sentry. These sensitive cookies could then be used by someone with access to your Sentry issues to impersonate or escalate their privileges within your application.

In order for these sensitive values to be leaked, the Sentry SDK configuration must have `sendDefaultPII` set to `True`; one must use a custom name for either `SESSION_COOKIE_NAME` or `CSRF_COOKIE_NAME` in one's Django settings; and one must not be configured in one's organization or project settings to use Sentry's data scrubbing features to account for the custom cookie names.

As of version 1.14.0, the Django integration of the `sentry-sdk` will detect the custom cookie names based on one's Django settings and will remove the values from the payload before sending the data to Sentry. As a workaround, use the SDK's filtering mechanism to remove the cookies from the payload that is sent to Sentry. For error events, this can be done with the `before_send` callback method and for performance related events (transactions) one can use the `before_send_transaction` callback method. Those who want to handle filtering of these values on the server-side can also use Sentry's advanced data scrubbing feature to account for the custom cookie names. Look for the `$http.cookies`, `$http.headers`, `$request.cookies`, or `$request.headers` fields to target with a scrubbing rule.</description>
      <guid isPermaLink="false">CVE-2023-28117|2024-08-02T12:30:24.355Z</guid>
      <pubDate>Wed, 22 Mar 2023 19:37:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40647|2024-08-02T04:33:11.814Z -- getsentry -- sentry-python</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40647</link>
      <description>sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentry's Python SDK &lt; 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations.</description>
      <guid isPermaLink="false">CVE-2024-40647|2024-08-02T04:33:11.814Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:51:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41656|2024-08-02T04:46:52.659Z -- getsentry -- sentry</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41656</link>
      <description>Sentry is an error tracking and performance monitoring platform. Starting in version 10.0.0 and prior to version 24.7.1, an unsanitized payload sent by an Integration platform integration allows storing arbitrary HTML tags on the Sentry side with the subsequent rendering them on the Issues page. Self-hosted Sentry users may be impacted in case of untrustworthy Integration platform integrations sending external issues from their side to Sentry. A patch has been released in Sentry 24.7.1. For Sentry SaaS customers, no action is needed. This has been patched on July 23, and even prior to the fix, the exploitation was not possible due to the strict Content Security Policy deployed on sentry.io site. For self-hosted users, the maintainers of Sentry strongly recommend upgrading Sentry to the latest version. If it is not possible, one could enable CSP on one's self-hosted installation with `CSP_REPORT_ONLY = False` (enforcing mode). This will mitigate the risk of cross-site scripting.</description>
      <guid isPermaLink="false">CVE-2024-41656|2024-08-02T04:46:52.659Z</guid>
      <pubDate>Tue, 23 Jul 2024 21:30:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32474|2024-08-02T02:13:39.118Z -- getsentry -- sentry</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32474</link>
      <description>Sentry is an error tracking and performance monitoring platform. Prior to 24.4.1, when authenticating as a superuser to Sentry with a username and password, the password is leaked as cleartext in logs under the _event_: `auth-index.validate_superuser`. An attacker with access to the log data could use these leaked credentials to login to the Sentry system as superuser. Self-hosted users on affected versions should upgrade to 24.4.1 or later. Users can configure the logging level to exclude logs of the `INFO` level and only generate logs for levels at `WARNING` or more.</description>
      <guid isPermaLink="false">CVE-2024-32474|2024-08-02T02:13:39.118Z</guid>
      <pubDate>Thu, 18 Apr 2024 19:50:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41656|2024-07-23T21:30:25.526Z -- getsentry -- sentry</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41656</link>
      <description>Sentry is an error tracking and performance monitoring platform. Starting in version 10.0.0 and prior to version 24.7.1, an unsanitized payload sent by an Integration platform integration allows storing arbitrary HTML tags on the Sentry side with the subsequent rendering them on the Issues page. Self-hosted Sentry users may be impacted in case of untrustworthy Integration platform integrations sending external issues from their side to Sentry. A patch has been released in Sentry 24.7.1. For Sentry SaaS customers, no action is needed. This has been patched on July 23, and even prior to the fix, the exploitation was not possible due to the strict Content Security Policy deployed on sentry.io site. For self-hosted users, the maintainers of Sentry strongly recommend upgrading Sentry to the latest version. If it is not possible, one could enable CSP on one's self-hosted installation with `CSP_REPORT_ONLY = False` (enforcing mode). This will mitigate the risk of cross-site scripting.</description>
      <guid isPermaLink="false">CVE-2024-41656|2024-07-23T21:30:25.526Z</guid>
      <pubDate>Tue, 23 Jul 2024 21:30:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40647|2024-07-18T16:51:23.539Z -- getsentry -- sentry-python</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40647</link>
      <description>sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentry's Python SDK &lt; 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations.</description>
      <guid isPermaLink="false">CVE-2024-40647|2024-07-18T16:51:23.539Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:51:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32474|2024-06-04T17:51:26.370Z -- getsentry -- sentry</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32474</link>
      <description>Sentry is an error tracking and performance monitoring platform. Prior to 24.4.1, when authenticating as a superuser to Sentry with a username and password, the password is leaked as cleartext in logs under the _event_: `auth-index.validate_superuser`. An attacker with access to the log data could use these leaked credentials to login to the Sentry system as superuser. Self-hosted users on affected versions should upgrade to 24.4.1 or later. Users can configure the logging level to exclude logs of the `INFO` level and only generate logs for levels at `WARNING` or more.</description>
      <guid isPermaLink="false">CVE-2024-32474|2024-06-04T17:51:26.370Z</guid>
      <pubDate>Thu, 18 Apr 2024 19:50:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-24829|2024-02-08T23:44:07.676Z -- getsentry -- sentry</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-24829</link>
      <description>Sentry is an error tracking and performance monitoring platform. Sentry’s integration platform provides a way for external services to interact with Sentry. One of such integrations, the Phabricator integration (maintained by Sentry) with version &lt;=24.1.1 contains a constrained SSRF vulnerability. An attacker could make Sentry send POST HTTP requests to arbitrary URLs (including internal IP addresses) by providing an unsanitized input to the Phabricator integration. However, the body payload is constrained to a specific format. If an attacker has access to a Sentry instance, this allows them to: 1. interact with internal network; 2. scan local/remote ports. This issue has been fixed in Sentry self-hosted release 24.1.2, and has already been mitigated on sentry.io on February 8. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-24829|2024-02-08T23:44:07.676Z</guid>
      <pubDate>Thu, 08 Feb 2024 23:44:07 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35196|2024-06-06T18:04:18.333Z -- getsentry -- sentry</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35196</link>
      <description>Sentry is a developer-first error tracking and performance monitoring platform. Sentry's Slack integration incorrectly records the incoming request body in logs. This request data can contain sensitive information, including the deprecated Slack verification token. With this verification token, it is possible under specific configurations, an attacker can forge requests and act as the Slack integration. The request body is leaked in log entries matching `event == "slack.*" &amp;&amp; name == "sentry.integrations.slack" &amp;&amp; request_data == *`. The deprecated slack verification token, will be found in the `request_data.token` key. **SaaS users** do not need to take any action. **Self-hosted users** should upgrade to version 24.5.0 or higher, rotate their Slack verification token, and use the Slack Signing Secret instead of the verification token. For users only using the `slack.signing-secret` in their self-hosted configuration, the legacy verification token is not used to verify the webhook payload. It is ignored. Users unable to upgrade should either set the `slack.signing-secret` instead of `slack.verification-token`. The signing secret is Slack's recommended way of authenticating webhooks. By having `slack.singing-secret` set, Sentry self-hosted will no longer use the verification token for authentication of the webhooks, regardless of whether `slack.verification-token` is set or not. Alternatively if the self-hosted instance is unable to be upgraded or re-configured to use the `slack.signing-secret`, the logging configuration can be adjusted to not generate logs from the integration. The default logging configuration can be found in `src/sentry/conf/server.py`. **Services should be restarted once the configuration change is saved.**</description>
      <guid isPermaLink="false">CVE-2024-35196|2024-06-06T18:04:18.333Z</guid>
      <pubDate>Fri, 31 May 2024 17:25:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-24829|2024-07-05T17:20:49.165Z -- getsentry -- sentry</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-24829</link>
      <description>Sentry is an error tracking and performance monitoring platform. Sentry’s integration platform provides a way for external services to interact with Sentry. One of such integrations, the Phabricator integration (maintained by Sentry) with version &lt;=24.1.1 contains a constrained SSRF vulnerability. An attacker could make Sentry send POST HTTP requests to arbitrary URLs (including internal IP addresses) by providing an unsanitized input to the Phabricator integration. However, the body payload is constrained to a specific format. If an attacker has access to a Sentry instance, this allows them to: 1. interact with internal network; 2. scan local/remote ports. This issue has been fixed in Sentry self-hosted release 24.1.2, and has already been mitigated on sentry.io on February 8. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-24829|2024-07-05T17:20:49.165Z</guid>
      <pubDate>Thu, 08 Feb 2024 23:44:07 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40647|2024-07-18T17:57:55.364Z -- getsentry -- sentry-python</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40647</link>
      <description>sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentry's Python SDK &lt; 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations.</description>
      <guid isPermaLink="false">CVE-2024-40647|2024-07-18T17:57:55.364Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:51:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41656|2024-07-24T13:35:31.458Z -- getsentry -- sentry</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41656</link>
      <description>Sentry is an error tracking and performance monitoring platform. Starting in version 10.0.0 and prior to version 24.7.1, an unsanitized payload sent by an Integration platform integration allows storing arbitrary HTML tags on the Sentry side with the subsequent rendering them on the Issues page. Self-hosted Sentry users may be impacted in case of untrustworthy Integration platform integrations sending external issues from their side to Sentry. A patch has been released in Sentry 24.7.1. For Sentry SaaS customers, no action is needed. This has been patched on July 23, and even prior to the fix, the exploitation was not possible due to the strict Content Security Policy deployed on sentry.io site. For self-hosted users, the maintainers of Sentry strongly recommend upgrading Sentry to the latest version. If it is not possible, one could enable CSP on one's self-hosted installation with `CSP_REPORT_ONLY = False` (enforcing mode). This will mitigate the risk of cross-site scripting.</description>
      <guid isPermaLink="false">CVE-2024-41656|2024-07-24T13:35:31.458Z</guid>
      <pubDate>Tue, 23 Jul 2024 21:30:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35196|2024-08-02T03:07:46.866Z -- getsentry -- sentry</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-35196</link>
      <description>Sentry is a developer-first error tracking and performance monitoring platform. Sentry's Slack integration incorrectly records the incoming request body in logs. This request data can contain sensitive information, including the deprecated Slack verification token. With this verification token, it is possible under specific configurations, an attacker can forge requests and act as the Slack integration. The request body is leaked in log entries matching `event == "slack.*" &amp;&amp; name == "sentry.integrations.slack" &amp;&amp; request_data == *`. The deprecated slack verification token, will be found in the `request_data.token` key. **SaaS users** do not need to take any action. **Self-hosted users** should upgrade to version 24.5.0 or higher, rotate their Slack verification token, and use the Slack Signing Secret instead of the verification token. For users only using the `slack.signing-secret` in their self-hosted configuration, the legacy verification token is not used to verify the webhook payload. It is ignored. Users unable to upgrade should either set the `slack.signing-secret` instead of `slack.verification-token`. The signing secret is Slack's recommended way of authenticating webhooks. By having `slack.singing-secret` set, Sentry self-hosted will no longer use the verification token for authentication of the webhooks, regardless of whether `slack.verification-token` is set or not. Alternatively if the self-hosted instance is unable to be upgraded or re-configured to use the `slack.signing-secret`, the logging configuration can be adjusted to not generate logs from the integration. The default logging configuration can be found in `src/sentry/conf/server.py`. **Services should be restarted once the configuration change is saved.**</description>
      <guid isPermaLink="false">CVE-2024-35196|2024-08-02T03:07:46.866Z</guid>
      <pubDate>Fri, 31 May 2024 17:25:55 +0000</pubDate>
    </item>
  </channel>
</rss>
