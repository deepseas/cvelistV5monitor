<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for getsentry -- sentry-python</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/getsentry/sentry-python.rss</link>
    <description>The latest CVEs for getsentry -- sentry-python</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 05:23:18 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-40647|2024-08-02T04:33:11.814Z -- getsentry -- sentry-python
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40647</link>
      <description>sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentry's Python SDK &lt; 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations.
</description>
      <guid isPermaLink="false">CVE-2024-40647|2024-08-02T04:33:11.814Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:51:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40647|2024-07-18T16:51:23.539Z -- getsentry -- sentry-python</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40647</link>
      <description>sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentry's Python SDK &lt; 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations.</description>
      <guid isPermaLink="false">CVE-2024-40647|2024-07-18T16:51:23.539Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:51:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40647|2024-07-18T17:57:55.364Z -- getsentry -- sentry-python</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40647</link>
      <description>sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentry's Python SDK &lt; 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations.</description>
      <guid isPermaLink="false">CVE-2024-40647|2024-07-18T17:57:55.364Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:51:23 +0000</pubDate>
    </item>
  </channel>
</rss>
