<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for getsentry -- sentry-python</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/getsentry/sentry-python.rss</link>
    <description>The latest CVEs for getsentry -- sentry-python</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 19:20:10 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-28117|2024-08-02T12:30:24.355Z -- getsentry -- sentry-python
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-28117</link>
      <description>Sentry SDK is the official Python SDK for Sentry, real-time crash reporting software. When using the Django integration of versions prior to 1.14.0 of the Sentry SDK in a specific configuration it is possible to leak sensitive cookies values, including the session cookie to Sentry. These sensitive cookies could then be used by someone with access to your Sentry issues to impersonate or escalate their privileges within your application.

In order for these sensitive values to be leaked, the Sentry SDK configuration must have `sendDefaultPII` set to `True`; one must use a custom name for either `SESSION_COOKIE_NAME` or `CSRF_COOKIE_NAME` in one's Django settings; and one must not be configured in one's organization or project settings to use Sentry's data scrubbing features to account for the custom cookie names.

As of version 1.14.0, the Django integration of the `sentry-sdk` will detect the custom cookie names based on one's Django settings and will remove the values from the payload before sending the data to Sentry. As a workaround, use the SDK's filtering mechanism to remove the cookies from the payload that is sent to Sentry. For error events, this can be done with the `before_send` callback method and for performance related events (transactions) one can use the `before_send_transaction` callback method. Those who want to handle filtering of these values on the server-side can also use Sentry's advanced data scrubbing feature to account for the custom cookie names. Look for the `$http.cookies`, `$http.headers`, `$request.cookies`, or `$request.headers` fields to target with a scrubbing rule.</description>
      <guid isPermaLink="false">CVE-2023-28117|2024-08-02T12:30:24.355Z</guid>
      <pubDate>Wed, 22 Mar 2023 19:37:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40647|2024-07-18T17:57:55.364Z -- getsentry -- sentry-python</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40647</link>
      <description>sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentry's Python SDK &lt; 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations.</description>
      <guid isPermaLink="false">CVE-2024-40647|2024-07-18T17:57:55.364Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:51:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40647|2024-07-18T16:51:23.539Z -- getsentry -- sentry-python</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40647</link>
      <description>sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentry's Python SDK &lt; 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations.</description>
      <guid isPermaLink="false">CVE-2024-40647|2024-07-18T16:51:23.539Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:51:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40647|2024-08-02T04:33:11.814Z -- getsentry -- sentry-python</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40647</link>
      <description>sentry-sdk is the official Python SDK for Sentry.io. A bug in Sentry's Python SDK &lt; 2.8.0 allows the environment variables to be passed to subprocesses despite the `env={}` setting. In Python's `subprocess` calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use `env` argument in `subprocess` calls. Due to the bug in Sentry SDK, with the Stdlib integration enabled (which is enabled by default), this expectation is not fulfilled, and all environment variables are being passed to subprocesses instead. The issue has been patched in pull request #3251 and is included in sentry-sdk==2.8.0. We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, you can disable all default integrations.</description>
      <guid isPermaLink="false">CVE-2024-40647|2024-08-02T04:33:11.814Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:51:23 +0000</pubDate>
    </item>
  </channel>
</rss>
