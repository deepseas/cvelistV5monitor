<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for golang.org/x/crypto -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/golang.org%2Fx%2Fcrypto/all.rss</link>
    <description>The latest CVEs for golang.org/x/crypto -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 07:20:14 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-30636|2024-08-03T06:56:13.171Z -- golang.org%2Fx%2Fcrypto -- golang.org%2Fx%2Fcrypto%2Facme%2Fautocert
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-30636</link>
      <description>httpTokenCacheKey uses path.Base to extract the expected HTTP-01 token value to lookup in the DirCache implementation. On Windows, path.Base acts differently to filepath.Base, since Windows uses a different path separator (\ vs. /), allowing a user to provide a relative path, i.e. .well-known/acme-challenge/..\..\asd becomes ..\..\asd. The extracted path is then suffixed with +http-01, joined with the cache directory, and opened. Since the controlled path is suffixed with +http-01 before opening, the impact of this is significantly limited, since it only allows reading arbitrary files on the system if and only if they have this suffix.</description>
      <guid isPermaLink="false">CVE-2022-30636|2024-08-03T06:56:13.171Z</guid>
      <pubDate>Tue, 02 Jul 2024 19:51:46 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-30636|2024-07-02T19:51:46.635Z -- golang.org%2Fx%2Fcrypto -- golang.org%2Fx%2Fcrypto%2Facme%2Fautocert</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-30636</link>
      <description>httpTokenCacheKey uses path.Base to extract the expected HTTP-01 token value to lookup in the DirCache implementation. On Windows, path.Base acts differently to filepath.Base, since Windows uses a different path separator (\ vs. /), allowing a user to provide a relative path, i.e. .well-known/acme-challenge/..\..\asd becomes ..\..\asd. The extracted path is then suffixed with +http-01, joined with the cache directory, and opened. Since the controlled path is suffixed with +http-01 before opening, the impact of this is significantly limited, since it only allows reading arbitrary files on the system if and only if they have this suffix.</description>
      <guid isPermaLink="false">CVE-2022-30636|2024-07-02T19:51:46.635Z</guid>
      <pubDate>Tue, 02 Jul 2024 19:51:46 +0000</pubDate>
    </item>
  </channel>
</rss>
