<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for metal3-io -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/metal3-io/all.rss</link>
    <description>The latest CVEs for metal3-io -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 18:25:06 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-30841|2024-08-02T14:37:15.430Z -- metal3-io -- baremetal-operator
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-30841</link>
      <description>Baremetal Operator (BMO) is a bare metal host provisioning integration for Kubernetes. Prior to version 0.3.0, ironic and ironic-inspector deployed within Baremetal Operator using the included `deploy.sh` store their `.htpasswd` files as ConfigMaps instead of Secrets. This causes the plain-text username and hashed password to be readable by anyone having a cluster-wide read-access to the management cluster, or access to the management cluster's Etcd storage. This issue is patched in baremetal-operator PR#1241, and is included in BMO release 0.3.0 onwards. As a workaround, users may modify the kustomizations and redeploy the BMO, or recreate the required ConfigMaps as Secrets per instructions in baremetal-operator PR#1241.</description>
      <guid isPermaLink="false">CVE-2023-30841|2024-08-02T14:37:15.430Z</guid>
      <pubDate>Wed, 26 Apr 2023 18:24:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31463|2024-08-02T01:52:57.081Z -- metal3-io -- ironic-image</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31463</link>
      <description>Ironic-image is an OpenStack Ironic deployment packaged and configured by Metal3. When the reverse proxy mode is enabled by the `IRONIC_REVERSE_PROXY_SETUP` variable set to `true`, 1) HTTP basic credentials are validated on the HTTPD side in a separate container, not in the Ironic service itself and 2) Ironic listens in host network on a private port 6388 on localhost by default. As a result, when the reverse proxy mode is used, any Pod or local Unix user on the control plane Node can access the Ironic API on the private port without authentication. A similar problem affects Ironic Inspector (`INSPECTOR_REVERSE_PROXY_SETUP` set to `true`), although the attack potential is smaller there. This issue affects operators deploying ironic-image in the reverse proxy mode, which is the recommended mode when TLS is used (also recommended), with the `IRONIC_PRIVATE_PORT` variable unset or set to a numeric value. In this case, an attacker with enough privileges to launch a pod on the control plane with host networking can access Ironic API and use it to modify bare-metal machine, e.g. provision them with a new image or change their BIOS settings. This vulnerability is fixed in 24.1.1.</description>
      <guid isPermaLink="false">CVE-2024-31463|2024-08-02T01:52:57.081Z</guid>
      <pubDate>Wed, 17 Apr 2024 15:21:49 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31463|2024-04-17T15:21:49.384Z -- metal3-io -- ironic-image</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31463</link>
      <description>Ironic-image is an OpenStack Ironic deployment packaged and configured by Metal3. When the reverse proxy mode is enabled by the `IRONIC_REVERSE_PROXY_SETUP` variable set to `true`, 1) HTTP basic credentials are validated on the HTTPD side in a separate container, not in the Ironic service itself and 2) Ironic listens in host network on a private port 6388 on localhost by default. As a result, when the reverse proxy mode is used, any Pod or local Unix user on the control plane Node can access the Ironic API on the private port without authentication. A similar problem affects Ironic Inspector (`INSPECTOR_REVERSE_PROXY_SETUP` set to `true`), although the attack potential is smaller there. This issue affects operators deploying ironic-image in the reverse proxy mode, which is the recommended mode when TLS is used (also recommended), with the `IRONIC_PRIVATE_PORT` variable unset or set to a numeric value. In this case, an attacker with enough privileges to launch a pod on the control plane with host networking can access Ironic API and use it to modify bare-metal machine, e.g. provision them with a new image or change their BIOS settings. This vulnerability is fixed in 24.1.1.</description>
      <guid isPermaLink="false">CVE-2024-31463|2024-04-17T15:21:49.384Z</guid>
      <pubDate>Wed, 17 Apr 2024 15:21:49 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31463|2024-07-05T17:22:59.080Z -- metal3-io -- ironic-image</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31463</link>
      <description>Ironic-image is an OpenStack Ironic deployment packaged and configured by Metal3. When the reverse proxy mode is enabled by the `IRONIC_REVERSE_PROXY_SETUP` variable set to `true`, 1) HTTP basic credentials are validated on the HTTPD side in a separate container, not in the Ironic service itself and 2) Ironic listens in host network on a private port 6388 on localhost by default. As a result, when the reverse proxy mode is used, any Pod or local Unix user on the control plane Node can access the Ironic API on the private port without authentication. A similar problem affects Ironic Inspector (`INSPECTOR_REVERSE_PROXY_SETUP` set to `true`), although the attack potential is smaller there. This issue affects operators deploying ironic-image in the reverse proxy mode, which is the recommended mode when TLS is used (also recommended), with the `IRONIC_PRIVATE_PORT` variable unset or set to a numeric value. In this case, an attacker with enough privileges to launch a pod on the control plane with host networking can access Ironic API and use it to modify bare-metal machine, e.g. provision them with a new image or change their BIOS settings. This vulnerability is fixed in 24.1.1.</description>
      <guid isPermaLink="false">CVE-2024-31463|2024-07-05T17:22:59.080Z</guid>
      <pubDate>Wed, 17 Apr 2024 15:21:49 +0000</pubDate>
    </item>
  </channel>
</rss>
