<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>CVE Feed for argoproj -- all</title><link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/argoproj/all.rss</link><description>The latest CVEs for argoproj -- all</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><lastBuildDate>Fri, 24 May 2024 21:24:10 +0000</lastBuildDate><ttl>60</ttl><item><title>CVE-2024-28175|2024-03-13T20:48:05.363Z -- argoproj -- argo-cd
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-28175</link><description>Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. Due to the improper URL protocols filtering of links specified in the `link.argocd.argoproj.io` annotations in the application summary component, an attacker can achieve cross-site scripting with elevated permissions. All unpatched versions of Argo CD starting with v1.0.0 are vulnerable to a cross-site scripting (XSS) bug allowing a malicious user to inject a javascript: link in the UI. When clicked by a victim user, the script will execute with the victim's permissions (up to and including admin). This vulnerability allows an attacker to perform arbitrary actions on behalf of the victim via the API, such as creating, modifying, and deleting Kubernetes resources. A patch for this vulnerability has been released in Argo CD versions v2.10.3 v2.9.8, and v2.8.12. There are no completely-safe workarounds besides upgrading. The safest alternative, if upgrading is not possible, would be to create a Kubernetes admission controller to reject any resources with an annotation starting with link.argocd.argoproj.io or reject the resource if the value use an improper URL protocol. This validation will need to be applied in all clusters managed by ArgoCD.

</description><guid isPermaLink="false">CVE-2024-28175|2024-03-13T20:48:05.363Z</guid><pubDate>Wed, 13 Mar 2024 20:48:05 +0000</pubDate></item><item><title>CVE-2024-29893|2024-03-29T15:07:51.057Z -- argoproj -- argo-cd
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29893</link><description>Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. All versions of ArgoCD starting from v2.4 have a bug where the ArgoCD repo-server component is vulnerable to a Denial-of-Service attack vector. Specifically,  it's possible to crash the repo server component through an out of memory error by pointing it to a malicious Helm registry. The loadRepoIndex() function in the ArgoCD's helm package, does not limit the size nor time while fetching the data. It fetches it and creates a byte slice from the retrieved data in one go. If the registry is implemented to push data continuously, the repo server will keep allocating memory until it runs out of it. A patch for this vulnerability has been released in v2.10.3, v2.9.8, and v2.8.12.</description><guid isPermaLink="false">CVE-2024-29893|2024-03-29T15:07:51.057Z</guid><pubDate>Fri, 29 Mar 2024 15:07:51 +0000</pubDate></item><item><title>CVE-2024-22424|2024-01-19T00:25:44.946Z -- argoproj -- argo-cd
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22424</link><description>Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. The Argo CD API prior to versions 2.10-rc2, 2.9.4, 2.8.8, and 2.7.15 are vulnerable to a cross-server request forgery (CSRF) attack when the attacker has the ability to write HTML to a page on the same parent domain as Argo CD. A CSRF attack works by tricking an authenticated Argo CD user into loading a web page which contains code to call Argo CD API endpoints on the victim’s behalf. For example, an attacker could send an Argo CD user a link to a page which looks harmless but in the background calls an Argo CD API endpoint to create an application running malicious code. Argo CD uses the “Lax” SameSite cookie policy to prevent CSRF attacks where the attacker controls an external domain. The malicious external website can attempt to call the Argo CD API, but the web browser will refuse to send the Argo CD auth token with the request. Many companies host Argo CD on an internal subdomain. If an attacker can place malicious code on, for example, https://test.internal.example.com/, they can still perform a CSRF attack. In this case, the “Lax” SameSite cookie does not prevent the browser from sending the auth cookie, because the destination is a parent domain of the Argo CD API. Browsers generally block such attacks by applying CORS policies to sensitive requests with sensitive content types. Specifically, browsers will send a “preflight request” for POSTs with content type “application/json” asking the destination API “are you allowed to accept requests from my domain?” If the destination API does not answer “yes,” the browser will block the request. Before the patched versions, Argo CD did not validate that requests contained the correct content type header. So an attacker could bypass the browser’s CORS check by setting the content type to something which is considered “not sensitive” such as “text/plain.” The browser wouldn’t send the preflight request, and Argo CD would happily accept the contents (which are actually still JSON) and perform the requested action (such as running malicious code). A patch for this vulnerability has been released in the following Argo CD versions: 2.10-rc2, 2.9.4, 2.8.8, and 2.7.15. The patch contains a breaking API change. The Argo CD API will no longer accept non-GET requests which do not specify application/json as their Content-Type. The accepted content types list is configurable, and it is possible (but discouraged) to disable the content type check completely. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description><guid isPermaLink="false">CVE-2024-22424|2024-01-19T00:25:44.946Z</guid><pubDate>Fri, 19 Jan 2024 00:25:44 +0000</pubDate></item><item><title>CVE-2024-32476|2024-04-26T15:24:13.245Z -- argoproj -- argo-cd
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32476</link><description>Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. There is a Denial of Service (DoS) vulnerability via OOM using jq in ignoreDifferences. This vulnerability has been patched in version(s) 2.10.7, 2.9.12 and 2.8.16.</description><guid isPermaLink="false">CVE-2024-32476|2024-04-26T15:24:13.245Z</guid><pubDate>Fri, 26 Apr 2024 15:24:13 +0000</pubDate></item><item><title>CVE-2024-21662|2024-03-18T18:42:04.701Z -- argoproj -- argo-cd
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-21662</link><description>Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. Prior to versions 2.8.13, 2.9.9, and 2.10.4, an attacker can effectively bypass the rate limit and brute force protections by exploiting the application's weak cache-based mechanism. This loophole in security can be combined with other vulnerabilities to attack the default admin account. This flaw undermines a patch for CVE-2020-8827 intended to protect against brute-force attacks. The application's brute force protection relies on a cache mechanism that tracks login attempts for each user. This cache is limited to a `defaultMaxCacheSize` of 1000 entries. An attacker can overflow this cache by bombarding it with login attempts for different users, thereby pushing out the admin account's failed attempts and effectively resetting the rate limit for that account. This is a severe vulnerability that enables attackers to perform brute force attacks at an accelerated rate, especially targeting the default admin account. Users should upgrade to version 2.8.13, 2.9.9, or 2.10.4 to receive a patch.</description><guid isPermaLink="false">CVE-2024-21662|2024-03-18T18:42:04.701Z</guid><pubDate>Mon, 18 Mar 2024 18:42:04 +0000</pubDate></item><item><title>CVE-2024-21652|2024-03-18T17:14:02.995Z -- argoproj -- argo-cd
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-21652</link><description>Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. Prior to versions 2.8.13, 2.9.9, and 2.10.4, an attacker can exploit a chain of vulnerabilities, including a Denial of Service (DoS) flaw and in-memory data storage weakness, to effectively bypass the application's brute force login protection. This is a critical security vulnerability that allows attackers to bypass the brute force login protection mechanism. Not only can they crash the service affecting all users, but they can also make unlimited login attempts, increasing the risk of account compromise. Versions 2.8.13, 2.9.9, and 2.10.4 contain a patch for this issue.
</description><guid isPermaLink="false">CVE-2024-21652|2024-03-18T17:14:02.995Z</guid><pubDate>Mon, 18 Mar 2024 17:14:02 +0000</pubDate></item><item><title>CVE-2024-21661|2024-03-18T18:32:24.871Z -- argoproj -- argo-cd
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-21661</link><description>Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. Prior to versions 2.8.13, 2.9.9, and 2.10.4, an attacker can exploit a critical flaw in the application to initiate a Denial of Service (DoS) attack, rendering the application inoperable and affecting all users. The issue arises from unsafe manipulation of an array in a multi-threaded environment. The vulnerability is rooted in the application's code, where an array is being modified while it is being iterated over. This is a classic programming error but becomes critically unsafe when executed in a multi-threaded environment. When two threads interact with the same array simultaneously, the application crashes. This is a Denial of Service (DoS) vulnerability. Any attacker can crash the application continuously, making it impossible for legitimate users to access the service. The issue is exacerbated because it does not require authentication, widening the pool of potential attackers. Versions 2.8.13, 2.9.9, and 2.10.4 contain a patch for this issue.</description><guid isPermaLink="false">CVE-2024-21661|2024-03-18T18:32:24.871Z</guid><pubDate>Mon, 18 Mar 2024 18:32:24 +0000</pubDate></item><item><title>CVE-2024-31989|2024-05-21T19:08:48.102Z -- argoproj -- argo-cd
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31989</link><description>Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. It has been discovered that an unprivileged pod in a different namespace on the same cluster could connect to the Redis server on port 6379. Despite having installed the latest version of the VPC CNI plugin on the EKS cluster, it requires manual enablement through configuration to enforce network policies. This raises concerns that many clients might unknowingly have open access to their Redis servers. This vulnerability could lead to Privilege Escalation to the level of cluster controller, or to information leakage, affecting anyone who does not have strict access controls on their Redis instance. This issue has been patched in version(s) 2.8.19, 2.9.15 and 2.10.10.</description><guid isPermaLink="false">CVE-2024-31989|2024-05-21T19:08:48.102Z</guid><pubDate>Tue, 21 May 2024 19:08:48 +0000</pubDate></item><item><title>CVE-2024-31990|2024-04-15T19:52:55.718Z -- argoproj -- argo-cd
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31990</link><description>Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. The API server does not enforce project sourceNamespaces which allows attackers to use the UI to edit resources which should only be mutable via gitops. This vulenrability is fixed in 2.10.7, 2.9.12, and 2.8.16.
</description><guid isPermaLink="false">CVE-2024-31990|2024-04-15T19:52:55.718Z</guid><pubDate>Mon, 15 Apr 2024 19:52:55 +0000</pubDate></item></channel></rss>