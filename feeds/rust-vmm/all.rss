<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for rust-vmm -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/rust-vmm/all.rss</link>
    <description>The latest CVEs for rust-vmm -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Wed, 12 Jun 2024 11:24:29 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-41051|2023-09-01T18:22:53.404Z -- rust-vmm -- vm-memory
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-41051</link>
      <description>In a typical Virtual Machine Monitor (VMM) there are several components, such as boot loader, virtual device drivers, virtio backend drivers and vhost drivers, that need to access the VM physical memory. The vm-memory rust crate provides a set of traits to decouple VM memory consumers from VM memory providers. An issue was discovered in the default implementations of the `VolatileMemory::{get_atomic_ref, aligned_as_ref, aligned_as_mut, get_ref, get_array_ref}` trait functions, which allows out-of-bounds memory access if the `VolatileMemory::get_slice` function returns a `VolatileSlice` whose length is less than the functionâ€™s `count` argument. No implementations of `get_slice` provided in `vm_memory` are affected. Users of custom `VolatileMemory` implementations may be impacted if the custom implementation does not adhere to `get_slice`'s documentation. The issue started in version 0.1.0 but was fixed in version 0.12.2 by inserting a check that verifies that the `VolatileSlice` returned by `get_slice` is of the correct length. Users are advised to upgrade. There are no known workarounds for this issue.
</description>
      <guid isPermaLink="false">CVE-2023-41051|2023-09-01T18:22:53.404Z</guid>
      <pubDate>Fri, 01 Sep 2023 18:22:53 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-50711|2024-01-02T20:02:28.225Z -- rust-vmm -- vmm-sys-util
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-50711</link>
      <description>vmm-sys-util is a collection of modules that provides helpers and utilities used by multiple rust-vmm components. Starting in version 0.5.0 and prior to version 0.12.0, an issue in the `FamStructWrapper::deserialize` implementation provided by the crate for `vmm_sys_util::fam::FamStructWrapper` can lead to out of bounds memory accesses. The deserialization does not check that the length stored in the header matches the flexible array length. Mismatch in the lengths might allow out of bounds memory access through Rust-safe methods. The issue was corrected in version 0.12.0 by inserting a check that verifies the lengths of compared flexible arrays are equal for any deserialized header and aborting deserialization otherwise. Moreover, the API was changed so that header length can only be modified through Rust-unsafe code. This ensures that users cannot trigger out-of-bounds memory access from Rust-safe code.</description>
      <guid isPermaLink="false">CVE-2023-50711|2024-01-02T20:02:28.225Z</guid>
      <pubDate>Tue, 02 Jan 2024 20:02:28 +0000</pubDate>
    </item>
  </channel>
</rss>
