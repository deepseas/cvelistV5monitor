<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for  LF-Edge, Zededa -- EVE OS</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/lf-edge%2C%20zededa/eve%20os.rss</link>
    <description>The latest CVEs for  LF-Edge, Zededa -- EVE OS</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 24 Sep 2024 19:19:52 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-43633|2024-09-24T17:00:40.426Z -- lf-edge%2C%20zededa -- eve%20os
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-43633</link>
      <description>
On boot, the Pillar eve container checks for the existence and content of
“/config/GlobalConfig/global.json”.

If the file exists, it overrides the existing configuration on the device on boot.

This allows an attacker to change the system’s configuration, which also includes some
debug functions.

This could be used to unlock the ssh with custom “authorized_keys” via the
“debug.enable.ssh” key, similar to the “authorized_keys” finding that was noted before.

Other usages include unlocking the usb to enable the keyboard via the “debug.enable.usb”
key, allowing VNC access via the “app.allow.vnc” key, and more.

An attacker could easily enable these debug functionalities without triggering the “measured
boot” mechanism implemented by EVE OS, and without marking the device as “UUD”
(“Unknown Update Detected”).
This is because the “/config” partition is not protected by “measured boot”, it is mutable and it
is not encrypted in any way.





An attacker can gain full control over the device without changing the PCR values, thereby not
triggering the “measured boot” mechanism, and having full access to the vault.




Note:

This issue was partially fixed in these commits (after disclosure to Zededa), where the config
partition measurement was added to PCR13:

• aa3501d6c57206ced222c33aea15a9169d629141

• 5fef4d92e75838cc78010edaed5247dfbdae1889.

This issue was made viable in version 9.0.0 when the calculation was moved to PCR14 but it was not included in the measured boot.</description>
      <guid isPermaLink="false">CVE-2023-43633|2024-09-24T17:00:40.426Z</guid>
      <pubDate>Thu, 21 Sep 2023 13:08:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-43637|2024-09-24T17:48:30.086Z -- lf-edge%2C%20zededa -- eve%20os
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-43637</link>
      <description>
Due to the implementation of "deriveVaultKey", prior to version 7.10, the generated vault key
would always have the last 16 bytes predetermined to be "arfoobarfoobarfo".

This issue happens because "deriveVaultKey" calls "retrieveCloudKey" (which will always
return "foobarfoobarfoobarfoobarfoobarfo" as the key), and then merges the 32byte
randomly generated key with this key (by takeing 16bytes from each, see "mergeKeys").

This makes the key a lot weaker.

This issue does not persist in devices that were initialized on/after version 7.10, but devices
that were initialized before that and updated to a newer version still have this issue.



Roll an update that enforces the full 32bytes key usage.






</description>
      <guid isPermaLink="false">CVE-2023-43637|2024-09-24T17:48:30.086Z</guid>
      <pubDate>Thu, 21 Sep 2023 13:20:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-43636|2024-09-24T18:32:54.341Z -- lf-edge%2C%20zededa -- eve%20os
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-43636</link>
      <description>


In EVE OS, the “measured boot” mechanism prevents a compromised device from accessing
the encrypted data located in the vault.

As per the “measured boot” design, the PCR values calculated at different stages of the boot
process will change if any of their respective parts are changed.

This includes, among other things, the configuration of the bios, grub, the kernel cmdline,
initrd, and more.

However, this mechanism does not validate the entire rootfs, so an attacker can edit the
filesystem and gain control over the system.

As the default filesystem used by EVE OS is squashfs, this is somewhat harder than an ext4,
which is easily changeable.

This will not stop an attacker, as an attacker can repackage the squashfs with their changes
in it and replace the partition altogether.

This can also be done directly on the device, as the “003-storage-init” container contains the
“mksquashfs” and “unsquashfs” binaries (with the corresponding libs).







An attacker can gain full control over the device without changing the PCR values, thus not
triggering the “measured boot” mechanism, and having full access to the vault.



Note:

This issue was partially fixed in these commits (after disclosure to Zededa), where the config
partition measurement was added to PCR13:

• aa3501d6c57206ced222c33aea15a9169d629141

• 5fef4d92e75838cc78010edaed5247dfbdae1889.

This issue was made viable in version 9.0.0 when the calculation was moved to PCR14 but it was not included in the measured boot.</description>
      <guid isPermaLink="false">CVE-2023-43636|2024-09-24T18:32:54.341Z</guid>
      <pubDate>Wed, 20 Sep 2023 14:50:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-43634|2024-09-24T16:54:58.431Z -- lf-edge%2C%20zededa -- eve%20os
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-43634</link>
      <description>
When sealing/unsealing the “vault” key, a list of PCRs is used, which defines which PCRs
are used.

In a previous project, CYMOTIVE found that the configuration is not protected by the secure
boot, and in response Zededa implemented measurements on the config partition that was
mapped to PCR 13.

In that process, PCR 13 was added to the list of PCRs that seal/unseal the key.

In commit “56e589749c6ff58ded862d39535d43253b249acf”, the config partition
measurement moved from PCR 13 to PCR 14, but PCR 14 was not added to the list of
PCRs that seal/unseal the key.

This change makes the measurement of PCR 14 effectively redundant as it would not affect
the sealing/unsealing of the key.



An attacker could modify the config partition without triggering the measured boot, this could
result in the attacker gaining full control over the device with full access to the contents of the
encrypted “vault”




</description>
      <guid isPermaLink="false">CVE-2023-43634|2024-09-24T16:54:58.431Z</guid>
      <pubDate>Thu, 21 Sep 2023 13:05:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-43632|2024-09-24T17:09:26.069Z -- lf-edge%2C%20zededa -- eve%20os
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-43632</link>
      <description>
As noted in the “VTPM.md” file in the eve documentation, “VTPM is a server listening on port
8877 in EVE, exposing limited functionality of the TPM to the clients. 
VTPM allows clients to
execute tpm2-tools binaries from a list of hardcoded options”
The communication with this server is done using protobuf, and the data is comprised of 2
parts:

1. Header

2. Data

When a connection is made, the server is waiting for 4 bytes of data, which will be the header,
and these 4 bytes would be parsed as uint32 size of the actual data to come.

Then, in the function “handleRequest” this size is then used in order to allocate a payload on
the stack for the incoming data.

As this payload is allocated on the stack, this will allow overflowing the stack size allocated for
the relevant process with freely controlled data.

* An attacker can crash the system. 
* An attacker can gain control over the system, specifically on the “vtpm_server” process
which has very high privileges.


</description>
      <guid isPermaLink="false">CVE-2023-43632|2024-09-24T17:09:26.069Z</guid>
      <pubDate>Thu, 21 Sep 2023 13:13:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-43631|2024-09-24T17:41:19.204Z -- lf-edge%2C%20zededa -- eve%20os
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-43631</link>
      <description>
On boot, the Pillar eve container checks for the existence and content of
“/config/authorized_keys”.

If the file is present, and contains a supported public key, the container will go on to open
port 22 and enable sshd with the given keys as the authorized keys for root login.

An attacker could easily add their own keys and gain full control over the system without
triggering the “measured boot” mechanism implemented by EVE OS, and without marking
the device as “UUD” (“Unknown Update Detected”).

This is because the “/config” partition is not protected by “measured boot”, it is mutable, and
it is not encrypted in any way.




An attacker can gain full control over the device without changing the PCR values, thus not
triggering the “measured boot” mechanism, and having full access to the vault.



Note:

This issue was partially fixed in these commits (after disclosure to Zededa), where the config
partition measurement was added to PCR13:

• aa3501d6c57206ced222c33aea15a9169d629141

• 5fef4d92e75838cc78010edaed5247dfbdae1889.

This issue was made viable in version 9.0.0 when the calculation was moved to PCR14 but it was not included in the measured boot.</description>
      <guid isPermaLink="false">CVE-2023-43631|2024-09-24T17:41:19.204Z</guid>
      <pubDate>Thu, 21 Sep 2023 13:17:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-43630|2024-09-24T18:34:19.821Z -- lf-edge%2C%20zededa -- eve%20os
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-43630</link>
      <description>PCR14 is not in the list of PCRs that seal/unseal the “vault” key, but
due to the change that was implemented in commit
“7638364bc0acf8b5c481b5ce5fea11ad44ad7fd4”, fixing this issue alone would not solve the
problem of the config partition not being measured correctly.

Also, the “vault” key is sealed/unsealed with SHA1 PCRs instead of
SHA256. 
This issue was somewhat mitigated due to all of the PCR extend functions
updating both the values of SHA256 and SHA1 for a given PCR ID.

However, due to the change that was implemented in commit
“7638364bc0acf8b5c481b5ce5fea11ad44ad7fd4”, this is no longer the case for PCR14, as
the code in “measurefs.go” explicitly updates only the SHA256 instance of PCR14, which
means that even if PCR14 were to be added to the list of PCRs sealing/unsealing the “vault”
key, changes to the config partition would still not be measured.



An attacker could modify the config partition without triggering the measured boot, this could
result in the attacker gaining full control over the device with full access to the contents of the
encrypted “vault” 




</description>
      <guid isPermaLink="false">CVE-2023-43630|2024-09-24T18:34:19.821Z</guid>
      <pubDate>Wed, 20 Sep 2023 14:37:44 +0000</pubDate>
    </item>
  </channel>
</rss>
