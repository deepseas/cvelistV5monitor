<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for The Node.js Project -- Node.js</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/the%20node.js%20project/node.js.rss</link>
    <description>The latest CVEs for The Node.js Project -- Node.js</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 17 Sep 2024 16:24:23 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2018-7164|2024-09-17T00:56:13.228Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7164</link>
      <description>Node.js versions 9.7.0 and later and 10.x are vulnerable and the severity is MEDIUM. A bug introduced in 9.7.0 increases the memory consumed when reading from the network into JavaScript using the net.Socket object directly as a stream. An attacker could use this cause a denial of service by sending tiny chunks of data in short succession. This vulnerability was restored by reverting to the prior behaviour.</description>
      <guid isPermaLink="false">CVE-2018-7164|2024-09-17T00:56:13.228Z</guid>
      <pubDate>Wed, 13 Jun 2018 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-7160|2024-09-17T01:35:37.449Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7160</link>
      <description>The Node.js inspector, in 6.x and later is vulnerable to a DNS rebinding attack which could be exploited to perform remote code execution. An attack is possible from malicious websites open in a web browser on the same computer, or another computer with network access to the computer running the Node.js process. A malicious website could use a DNS rebinding attack to trick the web browser to bypass same-origin-policy checks and to allow HTTP connections to localhost or to hosts on the local network. If a Node.js process with the debug port active is running on localhost or on a host on the local network, the malicious website could connect to it as a debugger, and get full code execution access.</description>
      <guid isPermaLink="false">CVE-2018-7160|2024-09-17T01:35:37.449Z</guid>
      <pubDate>Thu, 17 May 2018 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-7159|2024-09-17T01:06:04.658Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7159</link>
      <description>The HTTP parser in all current versions of Node.js ignores spaces in the `Content-Length` header, allowing input such as `Content-Length: 1 2` to be interpreted as having a value of `12`. The HTTP specification does not allow for spaces in the `Content-Length` value and the Node.js HTTP parser has been brought into line on this particular difference. The security risk of this flaw to Node.js users is considered to be VERY LOW as it is difficult, and may be impossible, to craft an attack that makes use of this flaw in a way that could not already be achieved by supplying an incorrect value for `Content-Length`. Vulnerabilities may exist in user-code that make incorrect assumptions about the potential accuracy of this value compared to the actual length of the data supplied. Node.js users crafting lower-level HTTP utilities are advised to re-check the length of any input supplied after parsing is complete.</description>
      <guid isPermaLink="false">CVE-2018-7159|2024-09-17T01:06:04.658Z</guid>
      <pubDate>Thu, 17 May 2018 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-7167|2024-09-17T02:00:52.959Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7167</link>
      <description>Calling Buffer.fill() or Buffer.alloc() with some parameters can lead to a hang which could result in a Denial of Service. In order to address this vulnerability, the implementations of Buffer.alloc() and Buffer.fill() were updated so that they zero fill instead of hanging in these cases. All versions of Node.js 6.x (LTS "Boron"), 8.x (LTS "Carbon"), and 9.x are vulnerable. All versions of Node.js 10.x (Current) are NOT vulnerable.</description>
      <guid isPermaLink="false">CVE-2018-7167|2024-09-17T02:00:52.959Z</guid>
      <pubDate>Wed, 13 Jun 2018 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-7161|2024-09-17T01:06:27.892Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7161</link>
      <description>All versions of Node.js 8.x, 9.x, and 10.x are vulnerable and the severity is HIGH. An attacker can cause a denial of service (DoS) by causing a node server providing an http2 server to crash. This can be accomplished by interacting with the http2 server in a manner that triggers a cleanup bug where objects are used in native code after they are no longer available. This has been addressed by updating the http2 implementation.</description>
      <guid isPermaLink="false">CVE-2018-7161|2024-09-17T01:06:27.892Z</guid>
      <pubDate>Wed, 13 Jun 2018 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2017-15897|2024-09-17T03:42:59.193Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-15897</link>
      <description>Node.js had a bug in versions 8.X and 9.X which caused buffers to not be initialized when the encoding for the fill value did not match the encoding specified. For example, 'Buffer.alloc(0x100, "This is not correctly encoded", "hex");' The buffer implementation was updated such that the buffer will be initialized to all zeros in these cases.</description>
      <guid isPermaLink="false">CVE-2017-15897|2024-09-17T03:42:59.193Z</guid>
      <pubDate>Mon, 11 Dec 2017 21:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-7166|2024-09-17T00:26:00.258Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7166</link>
      <description>In all versions of Node.js 10 prior to 10.9.0, an argument processing flaw can cause `Buffer.alloc()` to return uninitialized memory. This method is intended to be safe and only return initialized, or cleared, memory. The third argument specifying `encoding` can be passed as a number, this is misinterpreted by `Buffer's` internal "fill" method as the `start` to a fill operation. This flaw may be abused where `Buffer.alloc()` arguments are derived from user input to return uncleared memory blocks that may contain sensitive information.</description>
      <guid isPermaLink="false">CVE-2018-7166|2024-09-17T00:26:00.258Z</guid>
      <pubDate>Tue, 21 Aug 2018 13:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
