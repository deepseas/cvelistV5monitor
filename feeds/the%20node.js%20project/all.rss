<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for The Node.js Project -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/the%20node.js%20project/all.rss</link>
    <description>The latest CVEs for The Node.js Project -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 05 Aug 2024 13:24:01 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2018-7159|2024-08-05T06:24:10.511Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7159</link>
      <description>The HTTP parser in all current versions of Node.js ignores spaces in the `Content-Length` header, allowing input such as `Content-Length: 1 2` to be interpreted as having a value of `12`. The HTTP specification does not allow for spaces in the `Content-Length` value and the Node.js HTTP parser has been brought into line on this particular difference. The security risk of this flaw to Node.js users is considered to be VERY LOW as it is difficult, and may be impossible, to craft an attack that makes use of this flaw in a way that could not already be achieved by supplying an incorrect value for `Content-Length`. Vulnerabilities may exist in user-code that make incorrect assumptions about the potential accuracy of this value compared to the actual length of the data supplied. Node.js users crafting lower-level HTTP utilities are advised to re-check the length of any input supplied after parsing is complete.</description>
      <guid isPermaLink="false">CVE-2018-7159|2024-08-05T06:24:10.511Z</guid>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-12120|2024-08-05T08:24:03.745Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-12120</link>
      <description>Node.js: All versions prior to Node.js 6.15.0: Debugger port 5858 listens on any interface by default: When the debugger is enabled with `node --debug` or `node debug`, it listens to port 5858 on all interfaces by default. This may allow remote computers to attach to the debug port and evaluate arbitrary JavaScript. The default interface is now localhost. It has always been possible to start the debugger on a specific interface, such as `node --debug=localhost`. The debugger was removed in Node.js 8 and replaced with the inspector, so no versions from 8 and later are vulnerable.</description>
      <guid isPermaLink="false">CVE-2018-12120|2024-08-05T08:24:03.745Z</guid>
      <pubDate>Wed, 28 Nov 2018 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-7164|2024-08-05T06:24:10.469Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7164</link>
      <description>Node.js versions 9.7.0 and later and 10.x are vulnerable and the severity is MEDIUM. A bug introduced in 9.7.0 increases the memory consumed when reading from the network into JavaScript using the net.Socket object directly as a stream. An attacker could use this cause a denial of service by sending tiny chunks of data in short succession. This vulnerability was restored by reverting to the prior behaviour.</description>
      <guid isPermaLink="false">CVE-2018-7164|2024-08-05T06:24:10.469Z</guid>
      <pubDate>Tue, 12 Jun 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-7160|2024-08-05T06:24:10.499Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7160</link>
      <description>The Node.js inspector, in 6.x and later is vulnerable to a DNS rebinding attack which could be exploited to perform remote code execution. An attack is possible from malicious websites open in a web browser on the same computer, or another computer with network access to the computer running the Node.js process. A malicious website could use a DNS rebinding attack to trick the web browser to bypass same-origin-policy checks and to allow HTTP connections to localhost or to hosts on the local network. If a Node.js process with the debug port active is running on localhost or on a host on the local network, the malicious website could connect to it as a debugger, and get full code execution access.</description>
      <guid isPermaLink="false">CVE-2018-7160|2024-08-05T06:24:10.499Z</guid>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-12122|2024-08-05T08:24:03.654Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-12122</link>
      <description>Node.js: All versions prior to Node.js 6.15.0, 8.14.0, 10.14.0 and 11.3.0: Slowloris HTTP Denial of Service: An attacker can cause a Denial of Service (DoS) by sending headers very slowly keeping HTTP or HTTPS connections and associated resources alive for a long period of time.</description>
      <guid isPermaLink="false">CVE-2018-12122|2024-08-05T08:24:03.654Z</guid>
      <pubDate>Wed, 28 Nov 2018 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-12123|2024-08-05T08:24:03.774Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-12123</link>
      <description>Node.js: All versions prior to Node.js 6.15.0, 8.14.0, 10.14.0 and 11.3.0: Hostname spoofing in URL parser for javascript protocol: If a Node.js application is using url.parse() to determine the URL hostname, that hostname can be spoofed by using a mixed case "javascript:" (e.g. "javAscript:") protocol (other protocols are not affected). If security decisions are made about the URL based on the hostname, they may be incorrect.</description>
      <guid isPermaLink="false">CVE-2018-12123|2024-08-05T08:24:03.774Z</guid>
      <pubDate>Wed, 28 Nov 2018 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-12116|2024-08-05T08:24:03.673Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-12116</link>
      <description>Node.js: All versions prior to Node.js 6.15.0 and 8.14.0: HTTP request splitting: If Node.js can be convinced to use unsanitized user-provided Unicode data for the `path` option of an HTTP request, then data can be provided which will trigger a second, unexpected, and user-defined HTTP request to made to the same server.</description>
      <guid isPermaLink="false">CVE-2018-12116|2024-08-05T08:24:03.673Z</guid>
      <pubDate>Wed, 28 Nov 2018 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-7167|2024-08-05T06:24:10.496Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7167</link>
      <description>Calling Buffer.fill() or Buffer.alloc() with some parameters can lead to a hang which could result in a Denial of Service. In order to address this vulnerability, the implementations of Buffer.alloc() and Buffer.fill() were updated so that they zero fill instead of hanging in these cases. All versions of Node.js 6.x (LTS "Boron"), 8.x (LTS "Carbon"), and 9.x are vulnerable. All versions of Node.js 10.x (Current) are NOT vulnerable.</description>
      <guid isPermaLink="false">CVE-2018-7167|2024-08-05T06:24:10.496Z</guid>
      <pubDate>Tue, 12 Jun 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-12115|2024-08-05T08:24:03.759Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-12115</link>
      <description>In all versions of Node.js prior to 6.14.4, 8.11.4 and 10.9.0 when used with UCS-2 encoding (recognized by Node.js under the names `'ucs2'`, `'ucs-2'`, `'utf16le'` and `'utf-16le'`), `Buffer#write()` can be abused to write outside of the bounds of a single `Buffer`. Writes that start from the second-to-last position of a buffer cause a miscalculation of the maximum length of the input bytes to be written.</description>
      <guid isPermaLink="false">CVE-2018-12115|2024-08-05T08:24:03.759Z</guid>
      <pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-7161|2024-08-05T06:24:10.503Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7161</link>
      <description>All versions of Node.js 8.x, 9.x, and 10.x are vulnerable and the severity is HIGH. An attacker can cause a denial of service (DoS) by causing a node server providing an http2 server to crash. This can be accomplished by interacting with the http2 server in a manner that triggers a cleanup bug where objects are used in native code after they are no longer available. This has been addressed by updating the http2 implementation.</description>
      <guid isPermaLink="false">CVE-2018-7161|2024-08-05T06:24:10.503Z</guid>
      <pubDate>Tue, 12 Jun 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-7162|2024-08-05T06:24:11.187Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7162</link>
      <description>All versions of Node.js 9.x and 10.x are vulnerable and the severity is HIGH. An attacker can cause a denial of service (DoS) by causing a node process which provides an http server supporting TLS server to crash. This can be accomplished by sending duplicate/unexpected messages during the handshake. This vulnerability has been addressed by updating the TLS implementation.</description>
      <guid isPermaLink="false">CVE-2018-7162|2024-08-05T06:24:11.187Z</guid>
      <pubDate>Tue, 12 Jun 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-12121|2024-08-05T08:24:03.906Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-12121</link>
      <description>Node.js: All versions prior to Node.js 6.15.0, 8.14.0, 10.14.0 and 11.3.0: Denial of Service with large HTTP headers: By using a combination of many requests with maximum sized headers (almost 80 KB per connection), and carefully timed completion of the headers, it is possible to cause the HTTP server to abort from heap allocation failure. Attack potential is mitigated by the use of a load balancer or other proxy layer.</description>
      <guid isPermaLink="false">CVE-2018-12121|2024-08-05T08:24:03.906Z</guid>
      <pubDate>Wed, 28 Nov 2018 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-7158|2024-08-05T06:24:10.491Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7158</link>
      <description>The `'path'` module in the Node.js 4.x release line contains a potential regular expression denial of service (ReDoS) vector. The code in question was replaced in Node.js 6.x and later so this vulnerability only impacts all versions of Node.js 4.x. The regular expression, `splitPathRe`, used within the `'path'` module for the various path parsing functions, including `path.dirname()`, `path.extname()` and `path.parse()` was structured in such a way as to allow an attacker to craft a string, that when passed through one of these functions, could take a significant amount of time to evaluate, potentially leading to a full denial of service.</description>
      <guid isPermaLink="false">CVE-2018-7158|2024-08-05T06:24:10.491Z</guid>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-7166|2024-08-05T06:24:11.399Z -- the%20node.js%20project -- node.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7166</link>
      <description>In all versions of Node.js 10 prior to 10.9.0, an argument processing flaw can cause `Buffer.alloc()` to return uninitialized memory. This method is intended to be safe and only return initialized, or cleared, memory. The third argument specifying `encoding` can be passed as a number, this is misinterpreted by `Buffer's` internal "fill" method as the `start` to a fill operation. This flaw may be abused where `Buffer.alloc()` arguments are derived from user input to return uncleared memory blocks that may contain sensitive information.</description>
      <guid isPermaLink="false">CVE-2018-7166|2024-08-05T06:24:11.399Z</guid>
      <pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
