<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for gradle -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/gradle/all.rss</link>
    <description>The latest CVEs for gradle -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 23:22:56 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-29429|2024-08-03T22:02:51.929Z -- gradle -- gradle
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-29429</link>
      <description>In Gradle before version 7.0, files created with open permissions in the system temporary directory can allow an attacker to access information downloaded by Gradle. Some builds could be vulnerable to a local information disclosure. Remote files accessed through TextResourceFactory are downloaded into the system temporary directory first. Sensitive information contained in these files can be exposed to other local users on the same system. If you do not use the `TextResourceFactory` API, you are not vulnerable. As of Gradle 7.0, uses of the system temporary directory have been moved to the Gradle User Home directory. By default, this directory is restricted to the user running the build. As a workaround, set a more restrictive umask that removes read access to other users. When files are created in the system temporary directory, they will not be accessible to other users. If you are unable to change your system's umask, you can move the Java temporary directory by setting the System Property `java.io.tmpdir`. The new path needs to limit permissions to the build user only.</description>
      <guid isPermaLink="false">CVE-2021-29429|2024-08-03T22:02:51.929Z</guid>
      <pubDate>Mon, 12 Apr 2021 21:30:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-23630|2024-08-03T03:51:45.670Z -- gradle -- gradle
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23630</link>
      <description>Gradle is a build tool with a focus on build automation and support for multi-language development. In some cases, Gradle may skip that verification and accept a dependency that would otherwise fail the build as an untrusted external artifact. This occurs when dependency verification is disabled on one or more configurations and those configurations have common dependencies with other configurations that have dependency verification enabled. If the configuration that has dependency verification disabled is resolved first, Gradle does not verify the common dependencies for the configuration that has dependency verification enabled. Gradle 7.4 fixes that issue by validating artifacts at least once if they are present in a resolved configuration that has dependency verification active. For users who cannot update either do not use `ResolutionStrategy.disableDependencyVerification()` and do not use plugins that use that method to disable dependency verification for a single configuration or make sure resolution of configuration that disable that feature do not happen in builds that resolve configuration where the feature is enabled.</description>
      <guid isPermaLink="false">CVE-2022-23630|2024-08-03T03:51:45.670Z</guid>
      <pubDate>Thu, 10 Feb 2022 20:10:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-31156|2024-08-03T07:11:39.622Z -- gradle -- gradle
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-31156</link>
      <description>Gradle is a build tool. Dependency verification is a security feature in Gradle Build Tool that was introduced to allow validation of external dependencies either through their checksum or cryptographic signatures. In versions 6.2 through 7.4.2, there are some cases in which Gradle may skip that verification and accept a dependency that would otherwise fail the build as an untrusted external artifact. This can occur in two ways. When signature verification is disabled but the verification metadata contains entries for dependencies that only have a `gpg` element but no `checksum` element. When signature verification is enabled, the verification metadata contains entries for dependencies with a `gpg` element but there is no signature file on the remote repository. In both cases, the verification will accept the dependency, skipping signature verification and not complaining that the dependency has no checksum entry. For builds that are vulnerable, there are two risks. Gradle could download a malicious binary from a repository outside your organization due to name squatting. For those still using HTTP only and not HTTPS for downloading dependencies, the build could download a malicious library instead of the expected one. Gradle 7.5 patches this issue by making sure to run checksum verification if signature verification cannot be completed, whatever the reason. Two workarounds are available: Remove all `gpg` elements from dependency verification metadata if you disable signature validation and/or avoid adding `gpg` entries for dependencies that do not have signature files.</description>
      <guid isPermaLink="false">CVE-2022-31156|2024-08-03T07:11:39.622Z</guid>
      <pubDate>Thu, 14 Jul 2022 20:05:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-29428|2024-08-03T22:02:51.887Z -- gradle -- gradle
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-29428</link>
      <description>In Gradle before version 7.0, on Unix-like systems, the system temporary directory can be created with open permissions that allow multiple users to create and delete files within it. Gradle builds could be vulnerable to a local privilege escalation from an attacker quickly deleting and recreating files in the system temporary directory. This vulnerability impacted builds using precompiled script plugins written in Kotlin DSL and tests for Gradle plugins written using ProjectBuilder or TestKit. If you are on Windows or modern versions of macOS, you are not vulnerable. If you are on a Unix-like operating system with the "sticky" bit set on your system temporary directory, you are not vulnerable. The problem has been patched and released with Gradle 7.0. As a workaround, on Unix-like operating systems, ensure that the "sticky" bit is set. This only allows the original user (or root) to delete a file. If you are unable to change the permissions of the system temporary directory, you can move the Java temporary directory by setting the System Property `java.io.tmpdir`. The new path needs to limit permissions to the build user only. For additional details refer to the referenced GitHub Security Advisory.</description>
      <guid isPermaLink="false">CVE-2021-29428|2024-08-03T22:02:51.887Z</guid>
      <pubDate>Tue, 13 Apr 2021 17:55:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-29427|2024-08-03T22:02:51.882Z -- gradle -- gradle
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-29427</link>
      <description>In Gradle from version 5.1 and before version 7.0 there is a vulnerability which can lead to information disclosure and/or dependency poisoning. Repository content filtering is a security control Gradle introduced to help users specify what repositories are used to resolve specific dependencies. This feature was introduced in the wake of the "A Confusing Dependency" blog post. In some cases, Gradle may ignore content filters and search all repositories for dependencies. This only occurs when repository content filtering is used from within a `pluginManagement` block in a settings file. This may change how dependencies are resolved for Gradle plugins and build scripts. For builds that are vulnerable, there are two risks: 1) Information disclosure: Gradle could make dependency requests to repositories outside your organization and leak internal package identifiers. 2) Dependency poisoning/Dependency confusion: Gradle could download a malicious binary from a repository outside your organization due to name squatting. For a full example and more details refer to the referenced GitHub Security Advisory. The problem has been patched and released with Gradle 7.0. Users relying on this feature should upgrade their build as soon as possible. As a workaround, users may use a company repository which has the right rules for fetching packages from public repositories, or use project level repository content filtering, inside `buildscript.repositories`. This option is available since Gradle 5.1 when the feature was introduced.</description>
      <guid isPermaLink="false">CVE-2021-29427|2024-08-03T22:02:51.882Z</guid>
      <pubDate>Tue, 13 Apr 2021 17:55:24 +0000</pubDate>
    </item>
  </channel>
</rss>
