<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for gradle -- gradle</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/gradle/gradle.rss</link>
    <description>The latest CVEs for gradle -- gradle</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 23:22:03 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-44387|2024-08-02T20:07:32.921Z -- gradle -- gradle
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-44387</link>
      <description>Gradle is a build tool with a focus on build automation and support for multi-language development. When copying or archiving symlinked files, Gradle resolves them but applies the permissions of the symlink itself instead of the permissions of the linked file to the resulting file. This leads to files having too much permissions given that symlinks usually are world readable and writeable. While it is unlikely this results in a direct vulnerability for the impacted build, it may open up attack vectors depending on where build artifacts end up being copied to or un-archived. In versions 7.6.3, 8.4 and above, Gradle will now properly use the permissions of the file pointed at by the symlink to set permissions of the copied or archived file.</description>
      <guid isPermaLink="false">CVE-2023-44387|2024-08-02T20:07:32.921Z</guid>
      <pubDate>Thu, 05 Oct 2023 17:51:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-26053|2024-08-02T11:39:06.583Z -- gradle -- gradle
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-26053</link>
      <description>Gradle is a build tool with a focus on build automation and support for multi-language development. This is a collision attack on long IDs (64bits) for PGP keys. Users of dependency verification in Gradle are vulnerable if they use long IDs for PGP keys in a `trusted-key` or `pgp` element in their dependency verification metadata file. The fix is to fail dependency verification if anything but a fingerprint is used in a trust element in dependency verification metadata. The problem is fixed in Gradle 8.0 and above. The problem is also patched in Gradle 6.9.4 and 7.6.1. As a workaround, use only full fingerprint IDs for `trusted-key` or `pgp` element in the metadata is a protection against this issue.</description>
      <guid isPermaLink="false">CVE-2023-26053|2024-08-02T11:39:06.583Z</guid>
      <pubDate>Thu, 02 Mar 2023 03:11:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-35947|2024-08-02T16:37:41.395Z -- gradle -- gradle
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-35947</link>
      <description>Gradle is a build tool with a focus on build automation and support for multi-language development. In affected versions when unpacking Tar archives, Gradle did not check that files could be written outside of the unpack location. This could lead to important files being overwritten anywhere the Gradle process has write permissions. For a build reading Tar entries from a Tar archive, this issue could allow Gradle to disclose information from sensitive files through an arbitrary file read. To exploit this behavior, an attacker needs to either control the source of an archive already used by the build or modify the build to interact with a malicious archive. It is unlikely that this would go unnoticed. A fix has been released in Gradle 7.6.2 and 8.2 to protect against this vulnerability. Starting from these versions, Gradle will refuse to handle Tar archives which contain path traversal elements in a Tar entry name. Users are advised to upgrade. There are no known workarounds for this vulnerability.



### Impact

This is a path traversal vulnerability when Gradle deals with Tar archives, often referenced as TarSlip, a variant of ZipSlip.

* When unpacking Tar archives, Gradle did not check that files could be written outside of the unpack location. This could lead to important files being overwritten anywhere the Gradle process has write permissions.
* For a build reading Tar entries from a Tar archive, this issue could allow Gradle to disclose information from sensitive files through an arbitrary file read.

To exploit this behavior, an attacker needs to either control the source of an archive already used by the build or modify the build to interact with a malicious archive. It is unlikely that this would go unnoticed.

Gradle uses Tar archives for its [Build Cache](https://docs.gradle.org/current/userguide/build_cache.html). These archives are safe when created by Gradle. But if an attacker had control of a remote build cache server, they could inject malicious build cache entries that leverage this vulnerability. This attack vector could also be exploited if a man-in-the-middle can be performed between the remote cache and the build.

### Patches

A fix has been released in Gradle 7.6.2 and 8.2 to protect against this vulnerability. Starting from these versions, Gradle will refuse to handle Tar archives which contain path traversal elements in a Tar entry name.

It is recommended that users upgrade to a patched version.

### Workarounds

There is no workaround.

* If your build deals with Tar archives that you do not fully trust, you need to inspect them to confirm they do not attempt to leverage this vulnerability.
* If you use the Gradle remote build cache, make sure only trusted parties have write access to it and that connections to the remote cache are properly secured.

### References

* [CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')](https://cwe.mitre.org/data/definitions/22.html)
* [Gradle Build Cache](https://docs.gradle.org/current/userguide/build_cache.html)
* [ZipSlip](https://security.snyk.io/research/zip-slip-vulnerability)
</description>
      <guid isPermaLink="false">CVE-2023-35947|2024-08-02T16:37:41.395Z</guid>
      <pubDate>Fri, 30 Jun 2023 20:18:06 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-35946|2024-08-02T16:37:41.227Z -- gradle -- gradle
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-35946</link>
      <description>Gradle is a build tool with a focus on build automation and support for multi-language development. When Gradle writes a dependency into its dependency cache, it uses the dependency's coordinates to compute a file location. With specially crafted dependency coordinates, Gradle can be made to write files into an unintended location. The file may be written outside the dependency cache or over another file in the dependency cache. This vulnerability could be used to poison the dependency cache or overwrite important files elsewhere on the filesystem where the Gradle process has write permissions. Exploiting this vulnerability requires an attacker to have control over a dependency repository used by the Gradle build or have the ability to modify the build's configuration. It is unlikely that this would go unnoticed. A fix has been released in Gradle 7.6.2 and 8.2 to protect against this vulnerability. Gradle will refuse to cache dependencies that have path traversal elements in their dependency coordinates. It is recommended that users upgrade to a patched version. If you are unable to upgrade to Gradle 7.6.2 or 8.2, `dependency verification` will make this vulnerability more difficult to exploit.</description>
      <guid isPermaLink="false">CVE-2023-35946|2024-08-02T16:37:41.227Z</guid>
      <pubDate>Fri, 30 Jun 2023 20:21:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-42445|2024-08-02T19:23:38.775Z -- gradle -- gradle
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-42445</link>
      <description>Gradle is a build tool with a focus on build automation and support for multi-language development. In some cases, when Gradle parses XML files, resolving XML external entities is not disabled. Combined with an Out Of Band XXE attack (OOB-XXE), just parsing XML can lead to exfiltration of local text files to a remote server. Gradle parses XML files for several purposes. Most of the time, Gradle parses XML files it generated or were already present locally. Only Ivy XML descriptors and Maven POM files can be fetched from remote repositories and parsed by Gradle. In Gradle 7.6.3 and 8.4, resolving XML external entities has been disabled for all use cases to protect against this vulnerability. Gradle will now refuse to parse XML files that have XML external entities.
</description>
      <guid isPermaLink="false">CVE-2023-42445|2024-08-02T19:23:38.775Z</guid>
      <pubDate>Fri, 06 Oct 2023 13:52:02 +0000</pubDate>
    </item>
  </channel>
</rss>
