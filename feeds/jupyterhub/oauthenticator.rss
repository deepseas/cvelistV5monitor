<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for jupyterhub -- oauthenticator</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/jupyterhub/oauthenticator.rss</link>
    <description>The latest CVEs for jupyterhub -- oauthenticator</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 13:22:31 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-31027|2024-08-03T07:03:40.302Z -- jupyterhub -- oauthenticator
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-31027</link>
      <description>OAuthenticator is an OAuth token library for the JupyerHub login handler. CILogonOAuthenticator is provided by the OAuthenticator package, and lets users log in to a JupyterHub via CILogon. This is primarily used to restrict a JupyterHub only to users of a given institute. The allowed_idps configuration trait of CILogonOAuthenticator is documented to be a list of domains that indicate the institutions whose users are authorized to access this JupyterHub. This authorization is validated by ensuring that the *email* field provided to us by CILogon has a *domain* that matches one of the domains listed in `allowed_idps`.If `allowed_idps` contains `berkeley.edu`, you might expect only users with valid current credentials provided by University of California, Berkeley to be able to access the JupyterHub. However, CILogonOAuthenticator does *not* verify which provider is used by the user to login, only the email address provided. So a user can login with a GitHub account that has email set to `&lt;something&gt;@berkeley.edu`, and that will be treated exactly the same as someone logging in using the UC Berkeley official Identity Provider. The patch fixing this issue makes a *breaking change* in how `allowed_idps` is interpreted. It's no longer a list of domains, but configuration representing the `EntityID` of the IdPs that are allowed, picked from the [list maintained by CILogon](https://cilogon.org/idplist/). Users are advised to upgrade.</description>
      <guid isPermaLink="false">CVE-2022-31027|2024-08-03T07:03:40.302Z</guid>
      <pubDate>Mon, 06 Jun 2022 21:15:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37300|2024-08-02T03:50:55.855Z -- jupyterhub -- oauthenticator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37300</link>
      <description>OAuthenticator is software that allows OAuth2 identity providers to be plugged in and used with JupyterHub. JupyterHub &lt; 5.0, when used with `GlobusOAuthenticator`, could be configured to allow all users from a particular institution only. This worked fine prior to JupyterHub 5.0, because `allow_all` did not take precedence over `identity_provider`. Since JupyterHub 5.0, `allow_all` does take precedence over `identity_provider`. On a hub with the same config, now all users will be allowed to login, regardless of `identity_provider`. `identity_provider` will basically be ignored. This is a documented change in JupyterHub 5.0, but is likely to catch many users by surprise. OAuthenticator 16.3.1 fixes the issue with JupyterHub 5.0, and does not affect previous versions. As a workaround, do not upgrade to JupyterHub 5.0 when using `GlobusOAuthenticator` in the prior configuration.</description>
      <guid isPermaLink="false">CVE-2024-37300|2024-08-02T03:50:55.855Z</guid>
      <pubDate>Wed, 12 Jun 2024 15:20:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37300|2024-06-12T18:01:08.137Z -- jupyterhub -- oauthenticator</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-37300</link>
      <description>OAuthenticator is software that allows OAuth2 identity providers to be plugged in and used with JupyterHub. JupyterHub &lt; 5.0, when used with `GlobusOAuthenticator`, could be configured to allow all users from a particular institution only. This worked fine prior to JupyterHub 5.0, because `allow_all` did not take precedence over `identity_provider`. Since JupyterHub 5.0, `allow_all` does take precedence over `identity_provider`. On a hub with the same config, now all users will be allowed to login, regardless of `identity_provider`. `identity_provider` will basically be ignored. This is a documented change in JupyterHub 5.0, but is likely to catch many users by surprise. OAuthenticator 16.3.1 fixes the issue with JupyterHub 5.0, and does not affect previous versions. As a workaround, do not upgrade to JupyterHub 5.0 when using `GlobusOAuthenticator` in the prior configuration.</description>
      <guid isPermaLink="false">CVE-2024-37300|2024-06-12T18:01:08.137Z</guid>
      <pubDate>Wed, 12 Jun 2024 15:20:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29033|2024-06-04T17:58:08.797Z -- jupyterhub -- oauthenticator</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29033</link>
      <description>OAuthenticator provides plugins for JupyterHub to use common OAuth providers, as well as base classes for writing one's own Authenticators with any OAuth 2.0 provider. `GoogleOAuthenticator.hosted_domain` is used to restrict what Google accounts can be authorized access to a JupyterHub. The restriction is intented to be to Google accounts part of one or more Google organization verified to control specified domain(s). Prior to version 16.3.0, the actual restriction has been to Google accounts with emails ending with the domain. Such accounts could have been created by anyone which at one time was able to read an email associated with the domain. This was described by Dylan Ayrey (@dxa4481) in this [blog post] from 15th December 2023). OAuthenticator 16.3.0 contains a patch for this issue. As a workaround, restrict who can login another way, such as `allowed_users` or `allowed_google_groups`.</description>
      <guid isPermaLink="false">CVE-2024-29033|2024-06-04T17:58:08.797Z</guid>
      <pubDate>Wed, 20 Mar 2024 20:36:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37300|2024-06-12T15:20:20.363Z -- jupyterhub -- oauthenticator</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-37300</link>
      <description>OAuthenticator is software that allows OAuth2 identity providers to be plugged in and used with JupyterHub. JupyterHub &lt; 5.0, when used with `GlobusOAuthenticator`, could be configured to allow all users from a particular institution only. This worked fine prior to JupyterHub 5.0, because `allow_all` did not take precedence over `identity_provider`. Since JupyterHub 5.0, `allow_all` does take precedence over `identity_provider`. On a hub with the same config, now all users will be allowed to login, regardless of `identity_provider`. `identity_provider` will basically be ignored. This is a documented change in JupyterHub 5.0, but is likely to catch many users by surprise. OAuthenticator 16.3.1 fixes the issue with JupyterHub 5.0, and does not affect previous versions. As a workaround, do not upgrade to JupyterHub 5.0 when using `GlobusOAuthenticator` in the prior configuration.</description>
      <guid isPermaLink="false">CVE-2024-37300|2024-06-12T15:20:20.363Z</guid>
      <pubDate>Wed, 12 Jun 2024 15:20:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29033|2024-08-02T01:03:51.648Z -- jupyterhub -- oauthenticator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29033</link>
      <description>OAuthenticator provides plugins for JupyterHub to use common OAuth providers, as well as base classes for writing one's own Authenticators with any OAuth 2.0 provider. `GoogleOAuthenticator.hosted_domain` is used to restrict what Google accounts can be authorized access to a JupyterHub. The restriction is intented to be to Google accounts part of one or more Google organization verified to control specified domain(s). Prior to version 16.3.0, the actual restriction has been to Google accounts with emails ending with the domain. Such accounts could have been created by anyone which at one time was able to read an email associated with the domain. This was described by Dylan Ayrey (@dxa4481) in this [blog post] from 15th December 2023). OAuthenticator 16.3.0 contains a patch for this issue. As a workaround, restrict who can login another way, such as `allowed_users` or `allowed_google_groups`.</description>
      <guid isPermaLink="false">CVE-2024-29033|2024-08-02T01:03:51.648Z</guid>
      <pubDate>Wed, 20 Mar 2024 20:36:13 +0000</pubDate>
    </item>
  </channel>
</rss>
