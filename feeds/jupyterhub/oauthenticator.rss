<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for jupyterhub -- oauthenticator</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/jupyterhub/oauthenticator.rss</link>
    <description>The latest CVEs for jupyterhub -- oauthenticator</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 18:24:34 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-26250|2024-08-04T15:56:04.431Z -- jupyterhub -- oauthenticator
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-26250</link>
      <description>OAuthenticator is an OAuth login mechanism for JupyterHub. In oauthenticator from version 0.12.0 and before 0.12.2, the deprecated (in jupyterhub 1.2) configuration `Authenticator.whitelist`, which should be transparently mapped to `Authenticator.allowed_users` with a warning, is instead ignored by OAuthenticator classes, resulting in the same behavior as if this configuration has not been set. If this is the only mechanism of authorization restriction (i.e. no group or team restrictions in configuration) then all authenticated users will be allowed. Provider-based restrictions, including deprecated values such as `GitHubOAuthenticator.org_whitelist` are **not** affected. All users of OAuthenticator 0.12.0 and 0.12.1 with JupyterHub 1.2 (JupyterHub Helm chart 0.10.0-0.10.5) who use the `admin.whitelist.users` configuration in the jupyterhub helm chart or the `c.Authenticator.whitelist` configuration directly. Users of other deprecated configuration, e.g. `c.GitHubOAuthenticator.team_whitelist` are **not** affected. If you see a log line like this and expect a specific list of allowed usernames: "[I 2020-11-27 16:51:54.528 JupyterHub app:1717] Not using allowed_users. Any authenticated user will be allowed." you are likely affected. Updating oauthenticator to 0.12.2 is recommended. A workaround is to replace the deprecated `c.Authenticator.whitelist = ...` with `c.Authenticator.allowed_users = ...`. If any users have been authorized during this time who should not have been, they must be deleted via the API or admin interface, per the referenced documentation.</description>
      <guid isPermaLink="false">CVE-2020-26250|2024-08-04T15:56:04.431Z</guid>
      <pubDate>Tue, 01 Dec 2020 20:30:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29033|2024-08-02T01:03:51.648Z -- jupyterhub -- oauthenticator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29033</link>
      <description>OAuthenticator provides plugins for JupyterHub to use common OAuth providers, as well as base classes for writing one's own Authenticators with any OAuth 2.0 provider. `GoogleOAuthenticator.hosted_domain` is used to restrict what Google accounts can be authorized access to a JupyterHub. The restriction is intented to be to Google accounts part of one or more Google organization verified to control specified domain(s). Prior to version 16.3.0, the actual restriction has been to Google accounts with emails ending with the domain. Such accounts could have been created by anyone which at one time was able to read an email associated with the domain. This was described by Dylan Ayrey (@dxa4481) in this [blog post] from 15th December 2023). OAuthenticator 16.3.0 contains a patch for this issue. As a workaround, restrict who can login another way, such as `allowed_users` or `allowed_google_groups`.</description>
      <guid isPermaLink="false">CVE-2024-29033|2024-08-02T01:03:51.648Z</guid>
      <pubDate>Wed, 20 Mar 2024 20:36:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37300|2024-06-12T15:20:20.363Z -- jupyterhub -- oauthenticator</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-37300</link>
      <description>OAuthenticator is software that allows OAuth2 identity providers to be plugged in and used with JupyterHub. JupyterHub &lt; 5.0, when used with `GlobusOAuthenticator`, could be configured to allow all users from a particular institution only. This worked fine prior to JupyterHub 5.0, because `allow_all` did not take precedence over `identity_provider`. Since JupyterHub 5.0, `allow_all` does take precedence over `identity_provider`. On a hub with the same config, now all users will be allowed to login, regardless of `identity_provider`. `identity_provider` will basically be ignored. This is a documented change in JupyterHub 5.0, but is likely to catch many users by surprise. OAuthenticator 16.3.1 fixes the issue with JupyterHub 5.0, and does not affect previous versions. As a workaround, do not upgrade to JupyterHub 5.0 when using `GlobusOAuthenticator` in the prior configuration.</description>
      <guid isPermaLink="false">CVE-2024-37300|2024-06-12T15:20:20.363Z</guid>
      <pubDate>Wed, 12 Jun 2024 15:20:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29033|2024-06-04T17:58:08.797Z -- jupyterhub -- oauthenticator</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29033</link>
      <description>OAuthenticator provides plugins for JupyterHub to use common OAuth providers, as well as base classes for writing one's own Authenticators with any OAuth 2.0 provider. `GoogleOAuthenticator.hosted_domain` is used to restrict what Google accounts can be authorized access to a JupyterHub. The restriction is intented to be to Google accounts part of one or more Google organization verified to control specified domain(s). Prior to version 16.3.0, the actual restriction has been to Google accounts with emails ending with the domain. Such accounts could have been created by anyone which at one time was able to read an email associated with the domain. This was described by Dylan Ayrey (@dxa4481) in this [blog post] from 15th December 2023). OAuthenticator 16.3.0 contains a patch for this issue. As a workaround, restrict who can login another way, such as `allowed_users` or `allowed_google_groups`.</description>
      <guid isPermaLink="false">CVE-2024-29033|2024-06-04T17:58:08.797Z</guid>
      <pubDate>Wed, 20 Mar 2024 20:36:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37300|2024-06-12T18:01:08.137Z -- jupyterhub -- oauthenticator</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-37300</link>
      <description>OAuthenticator is software that allows OAuth2 identity providers to be plugged in and used with JupyterHub. JupyterHub &lt; 5.0, when used with `GlobusOAuthenticator`, could be configured to allow all users from a particular institution only. This worked fine prior to JupyterHub 5.0, because `allow_all` did not take precedence over `identity_provider`. Since JupyterHub 5.0, `allow_all` does take precedence over `identity_provider`. On a hub with the same config, now all users will be allowed to login, regardless of `identity_provider`. `identity_provider` will basically be ignored. This is a documented change in JupyterHub 5.0, but is likely to catch many users by surprise. OAuthenticator 16.3.1 fixes the issue with JupyterHub 5.0, and does not affect previous versions. As a workaround, do not upgrade to JupyterHub 5.0 when using `GlobusOAuthenticator` in the prior configuration.</description>
      <guid isPermaLink="false">CVE-2024-37300|2024-06-12T18:01:08.137Z</guid>
      <pubDate>Wed, 12 Jun 2024 15:20:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37300|2024-08-02T03:50:55.855Z -- jupyterhub -- oauthenticator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37300</link>
      <description>OAuthenticator is software that allows OAuth2 identity providers to be plugged in and used with JupyterHub. JupyterHub &lt; 5.0, when used with `GlobusOAuthenticator`, could be configured to allow all users from a particular institution only. This worked fine prior to JupyterHub 5.0, because `allow_all` did not take precedence over `identity_provider`. Since JupyterHub 5.0, `allow_all` does take precedence over `identity_provider`. On a hub with the same config, now all users will be allowed to login, regardless of `identity_provider`. `identity_provider` will basically be ignored. This is a documented change in JupyterHub 5.0, but is likely to catch many users by surprise. OAuthenticator 16.3.1 fixes the issue with JupyterHub 5.0, and does not affect previous versions. As a workaround, do not upgrade to JupyterHub 5.0 when using `GlobusOAuthenticator` in the prior configuration.</description>
      <guid isPermaLink="false">CVE-2024-37300|2024-08-02T03:50:55.855Z</guid>
      <pubDate>Wed, 12 Jun 2024 15:20:20 +0000</pubDate>
    </item>
  </channel>
</rss>
