<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for The Netty project -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/the%20netty%20project/all.rss</link>
    <description>The latest CVEs for The Netty project -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 20:23:02 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-37136|2024-08-04T01:16:02.944Z -- the%20netty%20project -- netty
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-37136</link>
      <description>The Bzip2 decompression decoder function doesn't allow setting size restrictions on the decompressed output data (which affects the allocation size used during decompression). All users of Bzip2Decoder are affected. The malicious input can trigger an OOME and so a DoS attack</description>
      <guid isPermaLink="false">CVE-2021-37136|2024-08-04T01:16:02.944Z</guid>
      <pubDate>Tue, 19 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-37137|2024-08-04T01:16:02.953Z -- the%20netty%20project -- netty
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-37137</link>
      <description>The Snappy frame decoder function doesn't restrict the chunk length which may lead to excessive memory usage. Beside this it also may buffer reserved skippable chunks until the whole chunk was received which may lead to excessive memory usage as well. This vulnerability can be triggered by supplying malicious input that decompresses to a very big size (via a network stream or a file) or by sending a huge skippable chunk.</description>
      <guid isPermaLink="false">CVE-2021-37137|2024-08-04T01:16:02.953Z</guid>
      <pubDate>Tue, 19 Oct 2021 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
