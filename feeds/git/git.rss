<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for git -- git</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/git/git.rss</link>
    <description>The latest CVEs for git -- git</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 18:24:33 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-29187|2024-08-03T06:17:54.233Z -- git -- git
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-29187</link>
      <description>Git is a distributed revision control system. Git prior to versions 2.37.1, 2.36.2, 2.35.4, 2.34.4, 2.33.4, 2.32.3, 2.31.4, and 2.30.5, is vulnerable to privilege escalation in all platforms. An unsuspecting user could still be affected by the issue reported in CVE-2022-24765, for example when navigating as root into a shared tmp directory that is owned by them, but where an attacker could create a git repository. Versions 2.37.1, 2.36.2, 2.35.4, 2.34.4, 2.33.4, 2.32.3, 2.31.4, and 2.30.5 contain a patch for this issue. The simplest way to avoid being affected by the exploit described in the example is to avoid running git as root (or an Administrator in Windows), and if needed to reduce its use to a minimum. While a generic workaround is not possible, a system could be hardened from the exploit described in the example by removing any such repository if it exists already and creating one as root to block any future attacks.</description>
      <guid isPermaLink="false">CVE-2022-29187|2024-08-03T06:17:54.233Z</guid>
      <pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-23521|2024-08-03T03:43:46.438Z -- git -- git
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23521</link>
      <description>Git is distributed revision control system. gitattributes are a mechanism to allow defining attributes for paths. These attributes can be defined by adding a `.gitattributes` file to the repository, which contains a set of file patterns and the attributes that should be set for paths matching this pattern. When parsing gitattributes, multiple integer overflows can occur when there is a huge number of path patterns, a huge number of attributes for a single pattern, or when the declared attribute names are huge. These overflows can be triggered via a crafted `.gitattributes` file that may be part of the commit history. Git silently splits lines longer than 2KB when parsing gitattributes from a file, but not when parsing them from the index. Consequentially, the failure mode depends on whether the file exists in the working tree, the index or both. This integer overflow can result in arbitrary heap reads and writes, which may result in remote code execution. The problem has been patched in the versions published on 2023-01-17, going back to v2.30.7. Users are advised to upgrade. There are no known workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2022-23521|2024-08-03T03:43:46.438Z</guid>
      <pubDate>Tue, 17 Jan 2023 22:17:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-41903|2024-08-03T12:56:38.383Z -- git -- git
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-41903</link>
      <description>Git is distributed revision control system. `git log` can display commits in an arbitrary format using its `--format` specifiers. This functionality is also exposed to `git archive` via the `export-subst` gitattribute. When processing the padding operators, there is a integer overflow in `pretty.c::format_and_pad_commit()` where a `size_t` is stored improperly as an `int`, and then added as an offset to a `memcpy()`. This overflow can be triggered directly by a user running a command which invokes the commit formatting machinery (e.g., `git log --format=...`). It may also be triggered indirectly through git archive via the export-subst mechanism, which expands format specifiers inside of files within the repository during a git archive. This integer overflow can result in arbitrary heap writes, which may result in arbitrary code execution. The problem has been patched in the versions published on 2023-01-17, going back to v2.30.7. Users are advised to upgrade. Users who are unable to upgrade should disable `git archive` in untrusted repositories. If you expose git archive via `git daemon`, disable it by running `git config --global daemon.uploadArch false`.</description>
      <guid isPermaLink="false">CVE-2022-41903|2024-08-03T12:56:38.383Z</guid>
      <pubDate>Tue, 17 Jan 2023 22:17:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-39260|2024-08-03T12:00:43.573Z -- git -- git
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-39260</link>
      <description>Git is an open source, scalable, distributed revision control system. `git shell` is a restricted login shell that can be used to implement Git's push/pull functionality via SSH. In versions prior to 2.30.6, 2.31.5, 2.32.4, 2.33.5, 2.34.5, 2.35.5, 2.36.3, and 2.37.4, the function that splits the command arguments into an array improperly uses an `int` to represent the number of entries in the array, allowing a malicious actor to intentionally overflow the return value, leading to arbitrary heap writes. Because the resulting array is then passed to `execv()`, it is possible to leverage this attack to gain remote code execution on a victim machine. Note that a victim must first allow access to `git shell` as a login shell in order to be vulnerable to this attack. This problem is patched in versions 2.30.6, 2.31.5, 2.32.4, 2.33.5, 2.34.5, 2.35.5, 2.36.3, and 2.37.4 and users are advised to upgrade to the latest version. Disabling `git shell` access via remote logins is a viable short-term workaround.</description>
      <guid isPermaLink="false">CVE-2022-39260|2024-08-03T12:00:43.573Z</guid>
      <pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-39253|2024-08-03T12:00:43.267Z -- git -- git
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-39253</link>
      <description>Git is an open source, scalable, distributed revision control system. Versions prior to 2.30.6, 2.31.5, 2.32.4, 2.33.5, 2.34.5, 2.35.5, 2.36.3, and 2.37.4 are subject to exposure of sensitive information to a malicious actor. When performing a local clone (where the source and target of the clone are on the same volume), Git copies the contents of the source's `$GIT_DIR/objects` directory into the destination by either creating hardlinks to the source contents, or copying them (if hardlinks are disabled via `--no-hardlinks`). A malicious actor could convince a victim to clone a repository with a symbolic link pointing at sensitive information on the victim's machine. This can be done either by having the victim clone a malicious repository on the same machine, or having them clone a malicious repository embedded as a bare repository via a submodule from any source, provided they clone with the `--recurse-submodules` option. Git does not create symbolic links in the `$GIT_DIR/objects` directory. The problem has been patched in the versions published on 2022-10-18, and backported to v2.30.x. Potential workarounds: Avoid cloning untrusted repositories using the `--local` optimization when on a shared machine, either by passing the `--no-local` option to `git clone` or cloning from a URL that uses the `file://` scheme. Alternatively, avoid cloning repositories from untrusted sources with `--recurse-submodules` or run `git config --global protocol.file.allow user`.</description>
      <guid isPermaLink="false">CVE-2022-39253|2024-08-03T12:00:43.267Z</guid>
      <pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32020|2024-08-02T01:59:50.905Z -- git -- git</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32020</link>
      <description>Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, local clones may end up hardlinking files into the target repository's object database when source and target repository reside on the same disk. If the source repository is owned by a different user, then those hardlinked files may be rewritten at any point in time by the untrusted user. Cloning local repositories will cause Git to either copy or hardlink files of the source repository into the target repository. This significantly speeds up such local clones compared to doing a "proper" clone and saves both disk space and compute time. When cloning a repository located on the same disk that is owned by a different user than the current user we also end up creating such hardlinks. These files will continue to be owned and controlled by the potentially-untrusted user and can be rewritten by them at will in the future. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4.</description>
      <guid isPermaLink="false">CVE-2024-32020|2024-08-02T01:59:50.905Z</guid>
      <pubDate>Tue, 14 May 2024 18:54:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32465|2024-08-02T02:13:39.839Z -- git -- git</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32465</link>
      <description>Git is a revision control system. The Git project recommends to avoid working in untrusted repositories, and instead to clone it first with `git clone --no-local` to obtain a clean copy. Git has specific protections to make that a safe operation even with an untrusted source repository, but vulnerabilities allow those protections to be bypassed. In the context of cloning local repositories owned by other users, this vulnerability has been covered in CVE-2024-32004. But there are circumstances where the fixes for CVE-2024-32004 are not enough: For example, when obtaining a `.zip` file containing a full copy of a Git repository, it should not be trusted by default to be safe, as e.g. hooks could be configured to run within the context of that repository. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. As a workaround, avoid using Git in repositories that have been obtained via archives from untrusted sources.</description>
      <guid isPermaLink="false">CVE-2024-32465|2024-08-02T02:13:39.839Z</guid>
      <pubDate>Tue, 14 May 2024 19:18:33 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32002|2024-08-02T01:59:50.899Z -- git -- git</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32002</link>
      <description>Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, repositories with submodules can be crafted in a way that exploits a bug in Git whereby it can be fooled into writing files not into the submodule's worktree but into a `.git/` directory. This allows writing a hook that will be executed while the clone operation is still running, giving the user no opportunity to inspect the code that is being executed. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. If symbolic link support is disabled in Git (e.g. via `git config --global core.symlinks false`), the described attack won't work. As always, it is best to avoid cloning repositories from untrusted sources.</description>
      <guid isPermaLink="false">CVE-2024-32002|2024-08-02T01:59:50.899Z</guid>
      <pubDate>Tue, 14 May 2024 18:40:46 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32021|2024-08-02T01:59:50.833Z -- git -- git</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32021</link>
      <description>Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, when cloning a local source repository that contains symlinks via the filesystem, Git may create hardlinks to arbitrary user-readable files on the same filesystem as the target repository in the `objects/` directory. Cloning a local repository over the filesystem may creating hardlinks to arbitrary user-owned files on the same filesystem in the target Git repository's `objects/` directory. When cloning a repository over the filesystem (without explicitly specifying the `file://` protocol or `--no-local`), the optimizations for local cloning
will be used, which include attempting to hard link the object files instead of copying them. While the code includes checks against symbolic links in the source repository, which were added during the fix for CVE-2022-39253, these checks can still be raced because the hard link operation ultimately follows symlinks. If the object on the filesystem appears as a file during the check, and then a symlink during the operation, this will allow the adversary to bypass the check and create hardlinks in the destination objects directory to arbitrary, user-readable files. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4.</description>
      <guid isPermaLink="false">CVE-2024-32021|2024-08-02T01:59:50.833Z</guid>
      <pubDate>Tue, 14 May 2024 19:15:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32004|2024-08-02T01:59:50.824Z -- git -- git</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32004</link>
      <description>Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, an attacker can prepare a local repository in such a way that, when cloned, will execute arbitrary code during the operation. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. As a workaround, avoid cloning repositories from untrusted sources.</description>
      <guid isPermaLink="false">CVE-2024-32004|2024-08-02T01:59:50.824Z</guid>
      <pubDate>Tue, 14 May 2024 18:46:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32002|2024-05-14T18:44:50.559Z -- git -- git</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32002</link>
      <description>Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, repositories with submodules can be crafted in a way that exploits a bug in Git whereby it can be fooled into writing files not into the submodule's worktree but into a `.git/` directory. This allows writing a hook that will be executed while the clone operation is still running, giving the user no opportunity to inspect the code that is being executed. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. If symbolic link support is disabled in Git (e.g. via `git config --global core.symlinks false`), the described attack won't work. As always, it is best to avoid cloning repositories from untrusted sources.</description>
      <guid isPermaLink="false">CVE-2024-32002|2024-05-14T18:44:50.559Z</guid>
      <pubDate>Tue, 14 May 2024 18:40:46 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32465|2024-05-14T19:18:33.914Z -- git -- git</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32465</link>
      <description>Git is a revision control system. The Git project recommends to avoid working in untrusted repositories, and instead to clone it first with `git clone --no-local` to obtain a clean copy. Git has specific protections to make that a safe operation even with an untrusted source repository, but vulnerabilities allow those protections to be bypassed. In the context of cloning local repositories owned by other users, this vulnerability has been covered in CVE-2024-32004. But there are circumstances where the fixes for CVE-2024-32004 are not enough: For example, when obtaining a `.zip` file containing a full copy of a Git repository, it should not be trusted by default to be safe, as e.g. hooks could be configured to run within the context of that repository. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. As a workaround, avoid using Git in repositories that have been obtained via archives from untrusted sources.</description>
      <guid isPermaLink="false">CVE-2024-32465|2024-05-14T19:18:33.914Z</guid>
      <pubDate>Tue, 14 May 2024 19:18:33 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32004|2024-05-14T18:46:32.192Z -- git -- git</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32004</link>
      <description>Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, an attacker can prepare a local repository in such a way that, when cloned, will execute arbitrary code during the operation. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. As a workaround, avoid cloning repositories from untrusted sources.</description>
      <guid isPermaLink="false">CVE-2024-32004|2024-05-14T18:46:32.192Z</guid>
      <pubDate>Tue, 14 May 2024 18:46:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32020|2024-05-14T18:54:08.184Z -- git -- git</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32020</link>
      <description>Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, local clones may end up hardlinking files into the target repository's object database when source and target repository reside on the same disk. If the source repository is owned by a different user, then those hardlinked files may be rewritten at any point in time by the untrusted user. Cloning local repositories will cause Git to either copy or hardlink files of the source repository into the target repository. This significantly speeds up such local clones compared to doing a "proper" clone and saves both disk space and compute time. When cloning a repository located on the same disk that is owned by a different user than the current user we also end up creating such hardlinks. These files will continue to be owned and controlled by the potentially-untrusted user and can be rewritten by them at will in the future. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4.</description>
      <guid isPermaLink="false">CVE-2024-32020|2024-05-14T18:54:08.184Z</guid>
      <pubDate>Tue, 14 May 2024 18:54:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32021|2024-06-11T20:39:28.890Z -- git -- git</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32021</link>
      <description>Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, when cloning a local source repository that contains symlinks via the filesystem, Git may create hardlinks to arbitrary user-readable files on the same filesystem as the target repository in the `objects/` directory. Cloning a local repository over the filesystem may creating hardlinks to arbitrary user-owned files on the same filesystem in the target Git repository's `objects/` directory. When cloning a repository over the filesystem (without explicitly specifying the `file://` protocol or `--no-local`), the optimizations for local cloning
will be used, which include attempting to hard link the object files instead of copying them. While the code includes checks against symbolic links in the source repository, which were added during the fix for CVE-2022-39253, these checks can still be raced because the hard link operation ultimately follows symlinks. If the object on the filesystem appears as a file during the check, and then a symlink during the operation, this will allow the adversary to bypass the check and create hardlinks in the destination objects directory to arbitrary, user-readable files. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4.</description>
      <guid isPermaLink="false">CVE-2024-32021|2024-06-11T20:39:28.890Z</guid>
      <pubDate>Tue, 14 May 2024 19:15:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32021|2024-05-14T19:15:28.534Z -- git -- git</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32021</link>
      <description>Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, when cloning a local source repository that contains symlinks via the filesystem, Git may create hardlinks to arbitrary user-readable files on the same filesystem as the target repository in the `objects/` directory. Cloning a local repository over the filesystem may creating hardlinks to arbitrary user-owned files on the same filesystem in the target Git repository's `objects/` directory. When cloning a repository over the filesystem (without explicitly specifying the `file://` protocol or `--no-local`), the optimizations for local cloning
will be used, which include attempting to hard link the object files instead of copying them. While the code includes checks against symbolic links in the source repository, which were added during the fix for CVE-2022-39253, these checks can still be raced because the hard link operation ultimately follows symlinks. If the object on the filesystem appears as a file during the check, and then a symlink during the operation, this will allow the adversary to bypass the check and create hardlinks in the destination objects directory to arbitrary, user-readable files. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4.</description>
      <guid isPermaLink="false">CVE-2024-32021|2024-05-14T19:15:28.534Z</guid>
      <pubDate>Tue, 14 May 2024 19:15:28 +0000</pubDate>
    </item>
  </channel>
</rss>
