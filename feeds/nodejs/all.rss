<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for nodejs -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/nodejs/all.rss</link>
    <description>The latest CVEs for nodejs -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 10:22:41 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-35948|2024-08-03T09:51:59.082Z -- nodejs -- undici
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-35948</link>
      <description>undici is an HTTP/1.1 client, written from scratch for Node.js.`=&lt; undici@5.8.0` users are vulnerable to _CRLF Injection_ on headers when using unsanitized input as request headers, more specifically, inside the `content-type` header. Example: ``` import { request } from 'undici' const unsanitizedContentTypeInput = 'application/json\r\n\r\nGET /foo2 HTTP/1.1' await request('http://localhost:3000, { method: 'GET', headers: { 'content-type': unsanitizedContentTypeInput }, }) ``` The above snippet will perform two requests in a single `request` API call: 1) `http://localhost:3000/` 2) `http://localhost:3000/foo2` This issue was patched in Undici v5.8.1. Sanitize input when sending content-type headers using user input as a workaround.</description>
      <guid isPermaLink="false">CVE-2022-35948|2024-08-03T09:51:59.082Z</guid>
      <pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-31151|2024-08-03T07:11:39.602Z -- nodejs -- undici
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-31151</link>
      <description>Authorization headers are cleared on cross-origin redirect. However, cookie headers which are sensitive headers and are official headers found in the spec, remain uncleared. There are active users using cookie headers in undici. This may lead to accidental leakage of cookie to a 3rd-party site or a malicious attacker who can control the redirection target (ie. an open redirector) to leak the cookie to the 3rd party site. This was patched in v5.7.1. By default, this vulnerability is not exploitable. Do not enable redirections, i.e. `maxRedirections: 0` (the default).</description>
      <guid isPermaLink="false">CVE-2022-31151|2024-08-03T07:11:39.602Z</guid>
      <pubDate>Wed, 20 Jul 2022 23:00:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-31150|2024-08-03T07:11:39.394Z -- nodejs -- undici
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-31150</link>
      <description>undici is an HTTP/1.1 client, written from scratch for Node.js. It is possible to inject CRLF sequences into request headers in undici in versions less than 5.7.1. A fix was released in version 5.8.0. Sanitizing all HTTP headers from untrusted sources to eliminate `\r\n` is a workaround for this issue.</description>
      <guid isPermaLink="false">CVE-2022-31150|2024-08-03T07:11:39.394Z</guid>
      <pubDate>Tue, 19 Jul 2022 20:40:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-35949|2024-08-03T09:51:59.443Z -- nodejs -- undici
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-35949</link>
      <description>undici is an HTTP/1.1 client, written from scratch for Node.js.`undici` is vulnerable to SSRF (Server-side Request Forgery) when an application takes in **user input** into the `path/pathname` option of `undici.request`. If a user specifies a URL such as `http://127.0.0.1` or `//127.0.0.1` ```js const undici = require("undici") undici.request({origin: "http://example.com", pathname: "//127.0.0.1"}) ``` Instead of processing the request as `http://example.org//127.0.0.1` (or `http://example.org/http://127.0.0.1` when `http://127.0.0.1 is used`), it actually processes the request as `http://127.0.0.1/` and sends it to `http://127.0.0.1`. If a developer passes in user input into `path` parameter of `undici.request`, it can result in an _SSRF_ as they will assume that the hostname cannot change, when in actual fact it can change because the specified path parameter is combined with the base URL. This issue was fixed in `undici@5.8.1`. The best workaround is to validate user input before passing it to the `undici.request` call.</description>
      <guid isPermaLink="false">CVE-2022-35949|2024-08-03T09:51:59.443Z</guid>
      <pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38372|2024-08-02T04:04:25.265Z -- nodejs -- undici</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38372</link>
      <description>Undici is an HTTP/1.1 client, written from scratch for Node.js. Depending on network and process conditions of a `fetch()` request, `response.arrayBuffer()` might include portion of memory from the Node.js process. This has been patched in v6.19.2.</description>
      <guid isPermaLink="false">CVE-2024-38372|2024-08-02T04:04:25.265Z</guid>
      <pubDate>Mon, 08 Jul 2024 20:25:59 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38372|2024-07-12T17:01:03.665Z -- nodejs -- undici</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38372</link>
      <description>Undici is an HTTP/1.1 client, written from scratch for Node.js. Depending on network and process conditions of a `fetch()` request, `response.arrayBuffer()` might include portion of memory from the Node.js process. This has been patched in v6.19.2.</description>
      <guid isPermaLink="false">CVE-2024-38372|2024-07-12T17:01:03.665Z</guid>
      <pubDate>Mon, 08 Jul 2024 20:25:59 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-24758|2024-06-04T17:43:23.837Z -- nodejs -- undici</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-24758</link>
      <description>Undici is an HTTP/1.1 client, written from scratch for Node.js. Undici already cleared Authorization headers on cross-origin redirects, but did not clear `Proxy-Authentication` headers. This issue has been patched in versions 5.28.3 and 6.6.1. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-24758|2024-06-04T17:43:23.837Z</guid>
      <pubDate>Fri, 16 Feb 2024 21:40:37 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-24750|2024-02-16T21:42:29.999Z -- nodejs -- undici</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-24750</link>
      <description>Undici is an HTTP/1.1 client, written from scratch for Node.js. In affected versions calling `fetch(url)` and not consuming the incoming body ((or consuming it very slowing) will lead to a memory leak. This issue has been addressed in version 6.6.1. Users are advised to upgrade. Users unable to upgrade should make sure to always consume the incoming body.</description>
      <guid isPermaLink="false">CVE-2024-24750|2024-02-16T21:42:29.999Z</guid>
      <pubDate>Fri, 16 Feb 2024 21:42:29 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-30261|2024-04-04T15:09:11.369Z -- nodejs -- undici</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-30261</link>
      <description>Undici is an HTTP/1.1 client, written from scratch for Node.js. An attacker can alter the `integrity` option passed to `fetch()`, allowing `fetch()` to accept requests as valid even if they have been tampered. This vulnerability was patched in version(s) 5.28.4 and 6.11.1.</description>
      <guid isPermaLink="false">CVE-2024-30261|2024-04-04T15:09:11.369Z</guid>
      <pubDate>Thu, 04 Apr 2024 15:09:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-30260|2024-06-04T17:38:49.201Z -- nodejs -- undici</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-30260</link>
      <description>Undici is an HTTP/1.1 client, written from scratch for Node.js. Undici cleared Authorization and Proxy-Authorization headers for `fetch()`, but did not clear them for `undici.request()`. This vulnerability was patched in version(s) 5.28.4 and 6.11.1.</description>
      <guid isPermaLink="false">CVE-2024-30260|2024-06-04T17:38:49.201Z</guid>
      <pubDate>Thu, 04 Apr 2024 15:15:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-38372|2024-07-08T20:25:59.111Z -- nodejs -- undici</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-38372</link>
      <description>Undici is an HTTP/1.1 client, written from scratch for Node.js. Depending on network and process conditions of a `fetch()` request, `response.arrayBuffer()` might include portion of memory from the Node.js process. This has been patched in v6.19.2.</description>
      <guid isPermaLink="false">CVE-2024-38372|2024-07-08T20:25:59.111Z</guid>
      <pubDate>Mon, 08 Jul 2024 20:25:59 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-24750|2024-07-25T16:45:31.786Z -- nodejs -- undici</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-24750</link>
      <description>Undici is an HTTP/1.1 client, written from scratch for Node.js. In affected versions calling `fetch(url)` and not consuming the incoming body ((or consuming it very slowing) will lead to a memory leak. This issue has been addressed in version 6.6.1. Users are advised to upgrade. Users unable to upgrade should make sure to always consume the incoming body.</description>
      <guid isPermaLink="false">CVE-2024-24750|2024-07-25T16:45:31.786Z</guid>
      <pubDate>Fri, 16 Feb 2024 21:42:29 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-30261|2024-08-02T01:32:06.665Z -- nodejs -- undici</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-30261</link>
      <description>Undici is an HTTP/1.1 client, written from scratch for Node.js. An attacker can alter the `integrity` option passed to `fetch()`, allowing `fetch()` to accept requests as valid even if they have been tampered. This vulnerability was patched in version(s) 5.28.4 and 6.11.1.</description>
      <guid isPermaLink="false">CVE-2024-30261|2024-08-02T01:32:06.665Z</guid>
      <pubDate>Thu, 04 Apr 2024 15:09:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-30260|2024-08-02T01:32:05.438Z -- nodejs -- undici</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-30260</link>
      <description>Undici is an HTTP/1.1 client, written from scratch for Node.js. Undici cleared Authorization and Proxy-Authorization headers for `fetch()`, but did not clear them for `undici.request()`. This vulnerability was patched in version(s) 5.28.4 and 6.11.1.</description>
      <guid isPermaLink="false">CVE-2024-30260|2024-08-02T01:32:05.438Z</guid>
      <pubDate>Thu, 04 Apr 2024 15:15:44 +0000</pubDate>
    </item>
  </channel>
</rss>
