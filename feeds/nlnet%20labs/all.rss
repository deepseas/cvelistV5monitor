<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for NLnet Labs -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/nlnet%20labs/all.rss</link>
    <description>The latest CVEs for NLnet Labs -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 16 Sep 2024 22:22:20 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-30699|2024-09-16T18:29:59.438Z -- nlnet%20labs -- unbound
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-30699</link>
      <description>NLnet Labs Unbound, up to and including version 1.16.1, is vulnerable to a novel type of the "ghost domain names" attack. The vulnerability works by targeting an Unbound instance. Unbound is queried for a rogue domain name when the cached delegation information is about to expire. The rogue nameserver delays the response so that the cached delegation information is expired. Upon receiving the delayed answer containing the delegation information, Unbound overwrites the now expired entries. This action can be repeated when the delegation information is about to expire making the rogue delegation information ever-updating. From version 1.16.2 on, Unbound stores the start time for a query and uses that to decide if the cached delegation information can be overwritten.</description>
      <guid isPermaLink="false">CVE-2022-30699|2024-09-16T18:29:59.438Z</guid>
      <pubDate>Mon, 01 Aug 2022 14:13:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2017-15105|2024-09-16T21:56:27.390Z -- nlnet%20labs -- unbound
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-15105</link>
      <description>A flaw was found in the way unbound before 1.6.8 validated wildcard-synthesized NSEC records. An improperly validated wildcard NSEC record could be used to prove the non-existence (NXDOMAIN answer) of an existing wildcard record, or trick unbound into accepting a NODATA proof.</description>
      <guid isPermaLink="false">CVE-2017-15105|2024-09-16T21:56:27.390Z</guid>
      <pubDate>Tue, 23 Jan 2018 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-30698|2024-09-16T19:35:09.568Z -- nlnet%20labs -- unbound
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-30698</link>
      <description>NLnet Labs Unbound, up to and including version 1.16.1 is vulnerable to a novel type of the "ghost domain names" attack. The vulnerability works by targeting an Unbound instance. Unbound is queried for a subdomain of a rogue domain name. The rogue nameserver returns delegation information for the subdomain that updates Unbound's delegation cache. This action can be repeated before expiry of the delegation information by querying Unbound for a second level subdomain which the rogue nameserver provides new delegation information. Since Unbound is a child-centric resolver, the ever-updating child delegation information can keep a rogue domain name resolvable long after revocation. From version 1.16.2 on, Unbound checks the validity of parent delegation records before using cached delegation information.</description>
      <guid isPermaLink="false">CVE-2022-30698|2024-09-16T19:35:09.568Z</guid>
      <pubDate>Mon, 01 Aug 2022 14:13:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-43173|2024-09-16T18:18:51.653Z -- nlnet%20labs -- routinator
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-43173</link>
      <description>In NLnet Labs Routinator prior to 0.10.2, a validation run can be delayed significantly by an RRDP repository by not answering but slowly drip-feeding bytes to keep the connection alive. This can be used to effectively stall validation. While Routinator has a configurable time-out value for RRDP connections, this time-out was only applied to individual read or write operations rather than the complete request. Thus, if an RRDP repository sends a little bit of data before that time-out expired, it can continuously extend the time it takes for the request to finish. Since validation will only continue once the update of an RRDP repository has concluded, this delay will cause validation to stall, leading to Routinator continuing to serve the old data set or, if in the initial validation run directly after starting, never serve any data at all.</description>
      <guid isPermaLink="false">CVE-2021-43173|2024-09-16T18:18:51.653Z</guid>
      <pubDate>Tue, 09 Nov 2021 16:41:40 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-43174|2024-09-16T21:08:21.566Z -- nlnet%20labs -- routinator
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-43174</link>
      <description>NLnet Labs Routinator versions 0.9.0 up to and including 0.10.1, support the gzip transfer encoding when querying RRDP repositories. This encoding can be used by an RRDP repository to cause an out-of-memory crash in these versions of Routinator. RRDP uses XML which allows arbitrary amounts of white space in the encoded data. The gzip scheme compresses such white space extremely well, leading to very small compressed files that become huge when being decompressed for further processing, big enough that Routinator runs out of memory when parsing input data waiting for the next XML element.</description>
      <guid isPermaLink="false">CVE-2021-43174|2024-09-16T21:08:21.566Z</guid>
      <pubDate>Tue, 09 Nov 2021 16:41:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-3029|2024-09-16T17:49:23.765Z -- nlnet%20labs -- routinator
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-3029</link>
      <description>In NLnet Labs Routinator 0.9.0 up to and including 0.11.2, due to a mistake in error handling, data in RRDP snapshot and delta files that isnâ€™t correctly base 64 encoded is treated as a fatal error and causes Routinator to exit. Worst case impact of this vulnerability is denial of service for the RPKI data that Routinator provides to routers. This may stop your network from validating route origins based on RPKI data. This vulnerability does not allow an attacker to manipulate RPKI data.</description>
      <guid isPermaLink="false">CVE-2022-3029|2024-09-16T17:49:23.765Z</guid>
      <pubDate>Tue, 13 Sep 2022 15:17:57 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-43172|2024-09-16T17:03:32.303Z -- nlnet%20labs -- routinator
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-43172</link>
      <description>NLnet Labs Routinator prior to 0.10.2 happily processes a chain of RRDP repositories of infinite length causing it to never finish a validation run. In RPKI, a CA can choose the RRDP repository it wishes to publish its data in. By continuously generating a new child CA that only consists of another CA using a different RRDP repository, a malicious CA can create a chain of CAs of de-facto infinite length. Routinator prior to version 0.10.2 did not contain a limit on the length of such a chain and will therefore continue to process this chain forever. As a result, the validation run will never finish, leading to Routinator continuing to serve the old data set or, if in the initial validation run directly after starting, never serve any data at all.</description>
      <guid isPermaLink="false">CVE-2021-43172|2024-09-16T17:03:32.303Z</guid>
      <pubDate>Tue, 09 Nov 2021 16:41:39 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-41531|2024-09-16T20:27:40.850Z -- nlnet%20labs -- routinator
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-41531</link>
      <description>NLnet Labs Routinator prior to 0.10.0 produces invalid RTR payload if an RPKI CA uses too large values in the max-length parameter in a ROA. This will lead to RTR clients such as routers to reject the RPKI data set, effectively disabling Route Origin Validation.</description>
      <guid isPermaLink="false">CVE-2021-41531|2024-09-16T20:27:40.850Z</guid>
      <pubDate>Tue, 21 Sep 2021 13:23:17 +0000</pubDate>
    </item>
  </channel>
</rss>
