<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for NLnet Labs -- Unbound</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/nlnet%20labs/unbound.rss</link>
    <description>The latest CVEs for NLnet Labs -- Unbound</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 17:22:12 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-28935|2024-08-04T16:48:00.719Z -- nlnet%20labs -- unbound
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-28935</link>
      <description>NLnet Labs Unbound, up to and including version 1.12.0, and NLnet Labs NSD, up to and including version 4.3.3, contain a local vulnerability that would allow for a local symlink attack. When writing the PID file, Unbound and NSD create the file if it is not there, or open an existing file for writing. In case the file was already present, they would follow symlinks if the file happened to be a symlink instead of a regular file. An additional chown of the file would then take place after it was written, making the user Unbound/NSD is supposed to run as the new owner of the file. If an attacker has local access to the user Unbound/NSD runs as, she could create a symlink in place of the PID file pointing to a file that she would like to erase. If then Unbound/NSD is killed and the PID file is not cleared, upon restarting with root privileges, Unbound/NSD will rewrite any file pointed at by the symlink. This is a local vulnerability that could create a Denial of Service of the system Unbound/NSD is running on. It requires an attacker having access to the limited permission user Unbound/NSD runs as and point through the symlink to a critical file on the system.</description>
      <guid isPermaLink="false">CVE-2020-28935|2024-08-04T16:48:00.719Z</guid>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1931|2024-08-01T18:56:22.442Z -- nlnet%20labs -- unbound</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1931</link>
      <description>NLnet Labs Unbound version 1.18.0 up to and including version 1.19.1 contain a vulnerability that can cause denial of service by a certain code path that can lead to an infinite loop. Unbound 1.18.0 introduced a feature that removes EDE records from responses with size higher than the client's advertised buffer size. Before removing all the EDE records however, it would try to see if trimming the extra text fields on those records would result in an acceptable size while still retaining the EDE codes. Due to an unchecked condition, the code that trims the text of the EDE records could loop indefinitely. This happens when Unbound would reply with attached EDE information on a positive reply and the client's buffer size is smaller than the needed space to include EDE records. The vulnerability can only be triggered when the 'ede: yes' option is used; non default configuration. From version 1.19.2 on, the code is fixed to avoid looping indefinitely.</description>
      <guid isPermaLink="false">CVE-2024-1931|2024-08-01T18:56:22.442Z</guid>
      <pubDate>Thu, 07 Mar 2024 09:17:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1931|2024-03-07T09:17:13.072Z -- nlnet%20labs -- unbound</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1931</link>
      <description>NLnet Labs Unbound version 1.18.0 up to and including version 1.19.1 contain a vulnerability that can cause denial of service by a certain code path that can lead to an infinite loop. Unbound 1.18.0 introduced a feature that removes EDE records from responses with size higher than the client's advertised buffer size. Before removing all the EDE records however, it would try to see if trimming the extra text fields on those records would result in an acceptable size while still retaining the EDE codes. Due to an unchecked condition, the code that trims the text of the EDE records could loop indefinitely. This happens when Unbound would reply with attached EDE information on a positive reply and the client's buffer size is smaller than the needed space to include EDE records. The vulnerability can only be triggered when the 'ede: yes' option is used; non default configuration. From version 1.19.2 on, the code is fixed to avoid looping indefinitely.</description>
      <guid isPermaLink="false">CVE-2024-1931|2024-03-07T09:17:13.072Z</guid>
      <pubDate>Thu, 07 Mar 2024 09:17:13 +0000</pubDate>
    </item>
  </channel>
</rss>
