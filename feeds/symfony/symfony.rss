<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for symfony -- symfony</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/symfony/symfony.rss</link>
    <description>The latest CVEs for symfony -- symfony</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 05:22:19 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-24894|2024-08-03T04:29:01.562Z -- symfony -- symfony
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-24894</link>
      <description>Symfony is a PHP framework for web and console applications and a set of reusable PHP components. The Symfony HTTP cache system, acts as a reverse proxy: It caches entire responses (including headers) and returns them to the clients. In a recent change in the `AbstractSessionListener`, the response might contain a `Set-Cookie` header. If the Symfony HTTP cache system is enabled, this response might bill stored and return to the next clients. An attacker can use this vulnerability to retrieve the victim's session. This issue has been patched and is available for branch 4.4.
</description>
      <guid isPermaLink="false">CVE-2022-24894|2024-08-03T04:29:01.562Z</guid>
      <pubDate>Fri, 03 Feb 2023 21:46:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-23601|2024-08-03T03:43:46.826Z -- symfony -- symfony
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23601</link>
      <description>Symfony is a PHP framework for web and console applications and a set of reusable PHP components. The Symfony form component provides a CSRF protection mechanism by using a random token injected in the form and using the session to store and control the token submitted by the user. When using the FrameworkBundle, this protection can be enabled or disabled with the configuration. If the configuration is not specified, by default, the mechanism is enabled as long as the session is enabled. In a recent change in the way the configuration is loaded, the default behavior has been dropped and, as a result, the CSRF protection is not enabled in form when not explicitly enabled, which makes the application sensible to CSRF attacks. This issue has been resolved in the patch versions listed and users are advised to update. There are no known workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2022-23601|2024-08-03T03:43:46.826Z</guid>
      <pubDate>Tue, 01 Feb 2022 12:17:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-24895|2024-08-03T04:29:01.542Z -- symfony -- symfony
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-24895</link>
      <description>Symfony is a PHP framework for web and console applications and a set of reusable PHP components. When authenticating users Symfony by default regenerates the session ID upon login, but preserves the rest of session attributes. Because this does not clear CSRF tokens upon login, this might enables same-site attackers to bypass the CSRF protection mechanism by performing an attack similar to a session-fixation. This issue has been fixed in the 4.4 branch. 

</description>
      <guid isPermaLink="false">CVE-2022-24895|2024-08-03T04:29:01.542Z</guid>
      <pubDate>Fri, 03 Feb 2023 21:45:26 +0000</pubDate>
    </item>
  </channel>
</rss>
