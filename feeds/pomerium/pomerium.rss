<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for pomerium -- pomerium</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/pomerium/pomerium.rss</link>
    <description>The latest CVEs for pomerium -- pomerium</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Wed, 02 Oct 2024 22:23:36 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-47616|2024-10-02T21:10:24.146Z -- pomerium -- pomerium
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-47616</link>
      <description>Pomerium is an identity and context-aware access proxy. The Pomerium databroker service is responsible for managing all persistent Pomerium application state. Requests to the databroker service API are authorized by the presence of a JSON Web Token (JWT) signed by a key known by all Pomerium services in the same deployment. However, incomplete validation of this JWT meant that some service account access tokens would incorrectly be treated as valid for the purpose of databroker API authorization. Improper access to the databroker API could allow exfiltration of user info, spoofing of user sessions, or tampering with Pomerium routes, policies, and other settings. A Pomerium deployment is susceptible to this issue if all of the following conditions are met, you have issued a service account access token using Pomerium Zero or Pomerium Enterprise, the access token has an explicit expiration date in the future, and the core Pomerium databroker gRPC API is not otherwise secured by network access controls. This vulnerability is fixed in 0.27.1.</description>
      <guid isPermaLink="false">CVE-2024-47616|2024-10-02T21:10:24.146Z</guid>
      <pubDate>Wed, 02 Oct 2024 21:10:24 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39315|2024-08-02T04:19:20.747Z -- pomerium -- pomerium</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39315</link>
      <description>Pomerium is an identity and context-aware access proxy. Prior to version 0.26.1, the Pomerium user info page (at `/.pomerium`) unintentionally included serialized OAuth2 access and ID tokens from the logged-in user's session. These tokens are not intended to be exposed to end users. This issue may be more severe in the presence of a cross-site scripting vulnerability in an upstream application proxied through Pomerium. If an attacker could insert a malicious script onto a web page proxied through Pomerium, that script could access these tokens by making a request to the `/.pomerium` endpoint. Upstream applications that authenticate only the ID token may be vulnerable to user impersonation using a token obtained in this manner. Note that an OAuth2 access token or ID token by itself is not sufficient to hijack a user's Pomerium session. Upstream applications should not be vulnerable to user impersonation via these tokens provided the application verifies the Pomerium JWT for each request, the connection between Pomerium and the application is secured by mTLS, or the connection between Pomerium and the application is otherwise secured at the network layer. The issue is patched in Pomerium v0.26.1. No known workarounds are available.</description>
      <guid isPermaLink="false">CVE-2024-39315|2024-08-02T04:19:20.747Z</guid>
      <pubDate>Tue, 02 Jul 2024 20:02:06 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39315|2024-07-02T20:02:06.120Z -- pomerium -- pomerium</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39315</link>
      <description>Pomerium is an identity and context-aware access proxy. Prior to version 0.26.1, the Pomerium user info page (at `/.pomerium`) unintentionally included serialized OAuth2 access and ID tokens from the logged-in user's session. These tokens are not intended to be exposed to end users. This issue may be more severe in the presence of a cross-site scripting vulnerability in an upstream application proxied through Pomerium. If an attacker could insert a malicious script onto a web page proxied through Pomerium, that script could access these tokens by making a request to the `/.pomerium` endpoint. Upstream applications that authenticate only the ID token may be vulnerable to user impersonation using a token obtained in this manner. Note that an OAuth2 access token or ID token by itself is not sufficient to hijack a user's Pomerium session. Upstream applications should not be vulnerable to user impersonation via these tokens provided the application verifies the Pomerium JWT for each request, the connection between Pomerium and the application is secured by mTLS, or the connection between Pomerium and the application is otherwise secured at the network layer. The issue is patched in Pomerium v0.26.1. No known workarounds are available.</description>
      <guid isPermaLink="false">CVE-2024-39315|2024-07-02T20:02:06.120Z</guid>
      <pubDate>Tue, 02 Jul 2024 20:02:06 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39315|2024-07-22T16:30:27.504Z -- pomerium -- pomerium</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39315</link>
      <description>Pomerium is an identity and context-aware access proxy. Prior to version 0.26.1, the Pomerium user info page (at `/.pomerium`) unintentionally included serialized OAuth2 access and ID tokens from the logged-in user's session. These tokens are not intended to be exposed to end users. This issue may be more severe in the presence of a cross-site scripting vulnerability in an upstream application proxied through Pomerium. If an attacker could insert a malicious script onto a web page proxied through Pomerium, that script could access these tokens by making a request to the `/.pomerium` endpoint. Upstream applications that authenticate only the ID token may be vulnerable to user impersonation using a token obtained in this manner. Note that an OAuth2 access token or ID token by itself is not sufficient to hijack a user's Pomerium session. Upstream applications should not be vulnerable to user impersonation via these tokens provided the application verifies the Pomerium JWT for each request, the connection between Pomerium and the application is secured by mTLS, or the connection between Pomerium and the application is otherwise secured at the network layer. The issue is patched in Pomerium v0.26.1. No known workarounds are available.</description>
      <guid isPermaLink="false">CVE-2024-39315|2024-07-22T16:30:27.504Z</guid>
      <pubDate>Tue, 02 Jul 2024 20:02:06 +0000</pubDate>
    </item>
  </channel>
</rss>
