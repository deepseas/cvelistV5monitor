<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for pomerium -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/pomerium/all.rss</link>
    <description>The latest CVEs for pomerium -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 22:22:40 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-24797|2024-08-03T04:20:50.531Z -- pomerium -- pomerium
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-24797</link>
      <description>Pomerium is an identity-aware access proxy. In distributed service mode, Pomerium's Authenticate service exposes pprof debug and prometheus metrics handlers to untrusted traffic. This can leak potentially sensitive environmental information or lead to limited denial of service conditions. This issue is patched in version v0.17.1 Workarounds: Block access to `/debug` and `/metrics` paths on the authenticate service. This can be done with any L7 proxy, including Pomerium's own proxy service.</description>
      <guid isPermaLink="false">CVE-2022-24797|2024-08-03T04:20:50.531Z</guid>
      <pubDate>Thu, 31 Mar 2022 22:40:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39315|2024-08-02T04:19:20.747Z -- pomerium -- pomerium</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39315</link>
      <description>Pomerium is an identity and context-aware access proxy. Prior to version 0.26.1, the Pomerium user info page (at `/.pomerium`) unintentionally included serialized OAuth2 access and ID tokens from the logged-in user's session. These tokens are not intended to be exposed to end users. This issue may be more severe in the presence of a cross-site scripting vulnerability in an upstream application proxied through Pomerium. If an attacker could insert a malicious script onto a web page proxied through Pomerium, that script could access these tokens by making a request to the `/.pomerium` endpoint. Upstream applications that authenticate only the ID token may be vulnerable to user impersonation using a token obtained in this manner. Note that an OAuth2 access token or ID token by itself is not sufficient to hijack a user's Pomerium session. Upstream applications should not be vulnerable to user impersonation via these tokens provided the application verifies the Pomerium JWT for each request, the connection between Pomerium and the application is secured by mTLS, or the connection between Pomerium and the application is otherwise secured at the network layer. The issue is patched in Pomerium v0.26.1. No known workarounds are available.</description>
      <guid isPermaLink="false">CVE-2024-39315|2024-08-02T04:19:20.747Z</guid>
      <pubDate>Tue, 02 Jul 2024 20:02:06 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39315|2024-07-02T20:02:06.120Z -- pomerium -- pomerium</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39315</link>
      <description>Pomerium is an identity and context-aware access proxy. Prior to version 0.26.1, the Pomerium user info page (at `/.pomerium`) unintentionally included serialized OAuth2 access and ID tokens from the logged-in user's session. These tokens are not intended to be exposed to end users. This issue may be more severe in the presence of a cross-site scripting vulnerability in an upstream application proxied through Pomerium. If an attacker could insert a malicious script onto a web page proxied through Pomerium, that script could access these tokens by making a request to the `/.pomerium` endpoint. Upstream applications that authenticate only the ID token may be vulnerable to user impersonation using a token obtained in this manner. Note that an OAuth2 access token or ID token by itself is not sufficient to hijack a user's Pomerium session. Upstream applications should not be vulnerable to user impersonation via these tokens provided the application verifies the Pomerium JWT for each request, the connection between Pomerium and the application is secured by mTLS, or the connection between Pomerium and the application is otherwise secured at the network layer. The issue is patched in Pomerium v0.26.1. No known workarounds are available.</description>
      <guid isPermaLink="false">CVE-2024-39315|2024-07-02T20:02:06.120Z</guid>
      <pubDate>Tue, 02 Jul 2024 20:02:06 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39315|2024-07-22T16:30:27.504Z -- pomerium -- pomerium</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39315</link>
      <description>Pomerium is an identity and context-aware access proxy. Prior to version 0.26.1, the Pomerium user info page (at `/.pomerium`) unintentionally included serialized OAuth2 access and ID tokens from the logged-in user's session. These tokens are not intended to be exposed to end users. This issue may be more severe in the presence of a cross-site scripting vulnerability in an upstream application proxied through Pomerium. If an attacker could insert a malicious script onto a web page proxied through Pomerium, that script could access these tokens by making a request to the `/.pomerium` endpoint. Upstream applications that authenticate only the ID token may be vulnerable to user impersonation using a token obtained in this manner. Note that an OAuth2 access token or ID token by itself is not sufficient to hijack a user's Pomerium session. Upstream applications should not be vulnerable to user impersonation via these tokens provided the application verifies the Pomerium JWT for each request, the connection between Pomerium and the application is secured by mTLS, or the connection between Pomerium and the application is otherwise secured at the network layer. The issue is patched in Pomerium v0.26.1. No known workarounds are available.</description>
      <guid isPermaLink="false">CVE-2024-39315|2024-07-22T16:30:27.504Z</guid>
      <pubDate>Tue, 02 Jul 2024 20:02:06 +0000</pubDate>
    </item>
  </channel>
</rss>
