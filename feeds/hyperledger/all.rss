<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for hyperledger -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/hyperledger/all.rss</link>
    <description>The latest CVEs for hyperledger -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 19:19:38 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-36025|2024-08-03T09:51:59.691Z -- hyperledger -- besu
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-36025</link>
      <description>Besu is a Java-based Ethereum client. In versions newer than 22.1.3 and prior to 22.7.1, Besu is subject to an Incorrect Conversion between Numeric Types. An error in 32 bit signed and unsigned types in the calculation of available gas in the CALL operations (including DELEGATECALL) results in incorrect gas being passed into called contracts and incorrect gas being returned after call execution. Where the amount of gas makes a difference in the success or failure, or if the gas is a negative 64 bit value, the execution will result in a different state root than expected, resulting in a consensus failure in networks with multiple EVM implementations. In networks with a single EVM implementation this can be used to execute with significantly more gas than then transaction requested, possibly exceeding gas limitations. This issue is patched in version 22.7.1. As a workaround, reverting to version 22.1.3 or earlier will prevent incorrect execution.</description>
      <guid isPermaLink="false">CVE-2022-36025|2024-08-03T09:51:59.691Z</guid>
      <pubDate>Sat, 24 Sep 2022 02:00:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-31020|2024-08-03T07:03:40.339Z -- hyperledger -- indy-node
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-31020</link>
      <description>Indy Node is the server portion of a distributed ledger purpose-built for decentralized identity. In versions 1.12.4 and prior, the `pool-upgrade` request handler in Indy-Node allows an improperly authenticated attacker to remotely execute code on nodes within the network. The `pool-upgrade` request handler in Indy-Node 1.12.5 has been updated to properly authenticate pool-upgrade transactions before any processing is performed by the request handler. The transactions are further sanitized to prevent remote code execution. As a workaround, endorsers should not create DIDs for untrusted users. A vulnerable ledger should configure `auth_rules` to prevent new DIDs from being written to the ledger until the network can be upgraded.</description>
      <guid isPermaLink="false">CVE-2022-31020|2024-08-03T07:03:40.339Z</guid>
      <pubDate>Tue, 06 Sep 2022 16:30:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-36023|2024-08-03T09:51:59.668Z -- hyperledger -- fabric
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-36023</link>
      <description>Hyperledger Fabric is an enterprise-grade permissioned distributed ledger framework for developing solutions and applications. If a gateway client application sends a malformed request to a gateway peer it may crash the peer node. Version 2.4.6 checks for the malformed gateway request and returns an error to the gateway client. There are no known workarounds, users must upgrade to version 2.4.6.</description>
      <guid isPermaLink="false">CVE-2022-36023|2024-08-03T09:51:59.668Z</guid>
      <pubDate>Thu, 18 Aug 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-31006|2024-08-03T07:03:40.302Z -- hyperledger -- indy-node
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-31006</link>
      <description>indy-node is the server portion of Hyperledger Indy, a distributed ledger purpose-built for decentralized identity. In vulnerable versions of indy-node, an attacker can max out the number of client connections allowed by the ledger, leaving the ledger unable to be used for its intended purpose. However, the ledger content will not be impacted and the ledger will resume functioning after the attack. This attack exploits the trade-off between resilience and availability. Any protection against abusive client connections will also prevent the network being accessed by certain legitimate users. As a result, validator nodes must tune their firewall rules to ensure the right trade-off for their network's expected users. The guidance to network operators for the use of firewall rules in the deployment of Indy networks has been modified to better protect against denial of service attacks by increasing the cost and complexity in mounting such attacks. The mitigation for this vulnerability is not in the Hyperledger Indy code per se, but rather in the individual deployments of Indy. The mitigations should be applied to all deployments of Indy, and are not related to a particular release.</description>
      <guid isPermaLink="false">CVE-2022-31006|2024-08-03T07:03:40.302Z</guid>
      <pubDate>Fri, 09 Sep 2022 19:10:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-31121|2024-08-03T07:11:39.115Z -- hyperledger -- fabric
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-31121</link>
      <description>Hyperledger Fabric is a permissioned distributed ledger framework. In affected versions if a consensus client sends a malformed consensus request to an orderer it may crash the orderer node. A fix has been added in commit 0f1835949 which checks for missing consensus messages and returns an error to the consensus client should the message be missing. Users are advised to upgrade to versions 2.2.7 or v2.4.5. There are no known workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2022-31121|2024-08-03T07:11:39.115Z</guid>
      <pubDate>Thu, 07 Jul 2022 18:00:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-21369|2024-08-03T18:09:15.981Z -- hyperledger -- besu
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-21369</link>
      <description>Hyperledger Besu is an open-source, MainNet compatible, Ethereum client written in Java. In Besu before version 1.5.1 there is a denial-of-service vulnerability involving the HTTP JSON-RPC API service. If username and password authentication is enabled for the HTTP JSON-RPC API service, then prior to making any requests to an API endpoint the requestor must use the login endpoint to obtain a JSON web token (JWT) using their credentials. A single user can readily overload the login endpoint with invalid requests (incorrect password). As the supplied password is checked for validity on the main vertx event loop and takes a relatively long time this can cause the processing of other valid requests to fail. A valid username is required for this vulnerability to be exposed. This has been fixed in version 1.5.1.</description>
      <guid isPermaLink="false">CVE-2021-21369|2024-08-03T18:09:15.981Z</guid>
      <pubDate>Tue, 09 Mar 2021 18:10:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-31021|2024-08-03T07:03:40.258Z -- hyperledger -- ursa
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-31021</link>
      <description>Ursa is a cryptographic library for use with blockchains. A weakness in the Hyperledger AnonCreds specification that is not mitigated in the Ursa and AnonCreds implementations is that the Issuer does not publish a key correctness proof demonstrating that a generated private key is sufficient to meet the unlinkability guarantees of AnonCreds. The Ursa and AnonCreds CL-Signatures implementations always generate a sufficient private key. A malicious issuer could in theory create a custom CL Signature implementation (derived from the Ursa or AnonCreds CL-Signatures implementations) that uses weakened private keys such that presentations from holders could be shared by verifiers to the issuer who could determine the holder to which the credential was issued. This vulnerability could impact holders of AnonCreds credentials implemented using the CL-signature scheme in the Ursa and AnonCreds implementations of CL Signatures. The ursa project has has moved to end-of-life status and no fix is expected.</description>
      <guid isPermaLink="false">CVE-2022-31021|2024-08-03T07:03:40.258Z</guid>
      <pubDate>Tue, 16 Jan 2024 21:35:31 +0000</pubDate>
    </item>
  </channel>
</rss>
