<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for flarum -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/flarum/all.rss</link>
    <description>The latest CVEs for flarum -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Wed, 12 Jun 2024 11:24:20 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-22487|2023-01-11T19:49:37.668Z -- flarum -- framework
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-22487</link>
      <description>Flarum is a forum software for building communities. Using the mentions feature provided by the flarum/mentions extension, users can mention any post ID on the forum with the special `@"&lt;username&gt;"#p&lt;id&gt;` syntax. The following behavior never changes no matter if the actor should be able to read the mentioned post or not: A URL to the mentioned post is inserted into the actor post HTML, leaking its discussion ID and post number. The `mentionsPosts` relationship included in the `POST /api/posts` and `PATCH /api/posts/&lt;id&gt;` JSON responses leaks the full JSON:API payload of all mentioned posts without any access control. This includes the content, date, number and attributes added by other extensions. An attacker only needs the ability to create new posts on the forum to exploit the vulnerability. This works even if new posts require approval. If they have the ability to edit posts, the attack can be performed even more discreetly by using a single post to scan any size of database and hiding the attack post content afterward. The attack allows the leaking of all posts in the forum database, including posts awaiting approval, posts in tags the user has no access to, and private discussions created by other extensions like FriendsOfFlarum Byobu. This also includes non-comment posts like tag changes or renaming events. The discussion payload is not leaked but using the mention HTML payload it's possible to extract the discussion ID of all posts and combine all posts back together into their original discussions even if the discussion title remains unknown. All Flarum versions prior to 1.6.3 are affected. The vulnerability has been fixed and published as flarum/core v1.6.3. As a workaround, user can disable the mentions extension.</description>
      <guid isPermaLink="false">CVE-2023-22487|2023-01-11T19:49:37.668Z</guid>
      <pubDate>Wed, 11 Jan 2023 19:49:37 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-22488|2023-01-12T19:24:16.494Z -- flarum -- framework
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-22488</link>
      <description>Flarum is a forum software for building communities. Using the notifications feature, one can read restricted/private content and bypass access checks that would be in place for such content. The notification-sending component does not check that the subject of the notification can be seen by the receiver, and proceeds to send notifications through their different channels. The alerts do not leak data despite this as they are listed based on a visibility check, however, emails are still sent out. This means that, for extensions which restrict access to posts, any actor can bypass the restriction by subscribing to the discussion if the Subscriptions extension is enabled. The attack allows the leaking of some posts in the forum database, including posts awaiting approval, posts in tags the user has no access to if they could subscribe to a discussion before it becomes private, and posts restricted by third-party extensions. All Flarum versions prior to v1.6.3 are affected. The vulnerability has been fixed and published as flarum/core v1.6.3. All communities running Flarum should upgrade as soon as possible to v1.6.3. As a workaround, disable the Flarum Subscriptions extension or disable email notifications altogether. There are no other supported workarounds for this issue for Flarum versions below 1.6.3.</description>
      <guid isPermaLink="false">CVE-2023-22488|2023-01-12T19:24:16.494Z</guid>
      <pubDate>Thu, 12 Jan 2023 19:24:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-22489|2023-01-13T18:03:46.954Z -- flarum -- framework
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-22489</link>
      <description>Flarum is a discussion platform for websites. If the first post of a discussion is permanently deleted but the discussion stays visible, any actor who can view the discussion is able to create a new reply via the REST API, no matter the reply permission or lock status. This includes users that don't have a validated email. Guests cannot successfully create a reply because the API will fail with a 500 error when the user ID 0 is inserted into the database. This happens because when the first post of a discussion is permanently deleted, the `first_post_id` attribute of the discussion becomes `null` which causes access control to be skipped for all new replies. Flarum automatically makes discussions with zero comments invisible so an additional condition for this vulnerability is that the discussion must have at least one approved reply so that `discussions.comment_count` is still above zero after the post deletion. This can open the discussion to uncontrolled spam or just unintentional replies if users still had their tab open before the vulnerable discussion was locked and then post a reply when they shouldn't be able to. In combination with the email notification settings, this could also be used as a way to send unsolicited emails. Versions between `v1.3.0` and `v1.6.3` are impacted. The vulnerability has been fixed and published as flarum/core v1.6.3. All communities running Flarum should upgrade as soon as possible. There are no known workarounds.
</description>
      <guid isPermaLink="false">CVE-2023-22489|2023-01-13T18:03:46.954Z</guid>
      <pubDate>Fri, 13 Jan 2023 18:03:46 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-27577|2023-03-10T20:56:58.989Z -- flarum -- framework
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-27577</link>
      <description>flarum is a forum software package for building communities. In versions prior to 1.7.0 an admin account which has already been compromised by an attacker may use a vulnerability in the `LESS` parser which can be exploited to read sensitive files on the server through the use of path traversal techniques. An attacker can achieve this by providing an absolute path to a sensitive file in the custom `LESS` setting, which the `LESS` parser will then read. For example, an attacker could use the following code to read the contents of the `/etc/passwd` file on a linux machine. The scope of what files are vulnerable will depend on the permissions given to the running flarum process. The vulnerability has been addressed in version `1.7`. Users should upgrade to this version to mitigate the vulnerability. Users unable to upgrade may mitigate the vulnerability by ensuring that their admin accounts are secured with strong passwords and follow other best practices for account security. Additionally, users can limit the exposure of sensitive files on the server by implementing appropriate file permissions and access controls at the operating system level.
</description>
      <guid isPermaLink="false">CVE-2023-27577|2023-03-10T20:56:58.989Z</guid>
      <pubDate>Fri, 10 Mar 2023 20:56:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-40033|2023-08-16T20:34:11.445Z -- flarum -- framework
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-40033</link>
      <description>Flarum is an open source forum software. Flarum is affected by a vulnerability that allows an attacker to conduct a Blind Server-Side Request Forgery (SSRF) attack or disclose any file on the server, even with a basic user account on any Flarum forum. By uploading a file containing a URL and spoofing the MIME type, an attacker can manipulate the application to execute unintended actions. The vulnerability is due to the behavior of the `intervention/image` package, which attempts to interpret the supplied file contents as a URL, which then fetches its contents. This allows an attacker to exploit the vulnerability to perform SSRF attacks, disclose local file contents, or conduct a blind oracle attack. This has been patched in Flarum version 1.8.0. Users are advised to upgrade. Users unable to upgrade may disable PHP's `allow_url_fopen` which will prevent the fetching of external files via URLs as a temporary workaround for the SSRF aspect of the vulnerability.</description>
      <guid isPermaLink="false">CVE-2023-40033|2023-08-16T20:34:11.445Z</guid>
      <pubDate>Wed, 16 Aug 2023 20:34:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-21641|2024-01-05T21:02:56.513Z -- flarum -- framework
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-21641</link>
      <description>Flarum is open source discussion platform software. Prior to version 1.8.5, the Flarum `/logout` route includes a redirect parameter that allows any third party to redirect users from a (trusted) domain of the Flarum installation to redirect to any link. For logged-in users, the logout must be confirmed. Guests are immediately redirected. This could be used by spammers to redirect to a web address using a trusted domain of a running Flarum installation. The vulnerability has been fixed and published as flarum/core v1.8.5. As a workaround, some extensions modifying the logout route can remedy this issue if their implementation is safe.</description>
      <guid isPermaLink="false">CVE-2024-21641|2024-01-05T21:02:56.513Z</guid>
      <pubDate>Fri, 05 Jan 2024 21:02:56 +0000</pubDate>
    </item>
  </channel>
</rss>
