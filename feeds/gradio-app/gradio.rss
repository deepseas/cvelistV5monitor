<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for gradio-app -- gradio</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/gradio-app/gradio.rss</link>
    <description>The latest CVEs for gradio-app -- gradio</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 10 Oct 2024 22:23:30 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-47164|2024-10-10T21:52:27.377Z -- gradio-app -- gradio
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-47164</link>
      <description>Gradio is an open-source Python package designed for quick prototyping. This vulnerability relates to the **bypass of directory traversal checks** within the `is_in_or_equal` function. This function, intended to check if a file resides within a given directory, can be bypassed with certain payloads that manipulate file paths using `..` (parent directory) sequences. Attackers could potentially access restricted files if they are able to exploit this flaw, although the difficulty is high. This primarily impacts users relying on Gradio’s blocklist or directory access validation, particularly when handling file uploads. Users are advised to upgrade to `gradio&gt;=5.0` to address this issue. As a workaround, users can manually sanitize and normalize file paths in their Gradio deployment before passing them to the `is_in_or_equal` function. Ensuring that all file paths are properly resolved and absolute can help mitigate the bypass vulnerabilities caused by the improper handling of `..` sequences or malformed paths.</description>
      <guid isPermaLink="false">CVE-2024-47164|2024-10-10T21:52:27.377Z</guid>
      <pubDate>Thu, 10 Oct 2024 21:52:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-47166|2024-10-10T21:48:54.416Z -- gradio-app -- gradio
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-47166</link>
      <description>Gradio is an open-source Python package designed for quick prototyping. This vulnerability involves a **one-level read path traversal** in the `/custom_component` endpoint. Attackers can exploit this flaw to access and leak source code from custom Gradio components by manipulating the file path in the request. Although the traversal is limited to a single directory level, it could expose proprietary or sensitive code that developers intended to keep private. This impacts users who have developed custom Gradio components and are hosting them on publicly accessible servers. Users are advised to upgrade to `gradio&gt;=4.44` to address this issue. As a workaround, developers can sanitize the file paths and ensure that components are not stored in publicly accessible directories.</description>
      <guid isPermaLink="false">CVE-2024-47166|2024-10-10T21:48:54.416Z</guid>
      <pubDate>Thu, 10 Oct 2024 21:48:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-47168|2024-10-10T21:45:48.052Z -- gradio-app -- gradio
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-47168</link>
      <description>Gradio is an open-source Python package designed for quick prototyping. This vulnerability involves data exposure due to the enable_monitoring flag not properly disabling monitoring when set to False. Even when monitoring is supposedly disabled, an attacker or unauthorized user can still access the monitoring dashboard by directly requesting the /monitoring endpoint. This means that sensitive application analytics may still be exposed, particularly in environments where monitoring is expected to be disabled. Users who set enable_monitoring=False to prevent unauthorized access to monitoring data are impacted. Users are advised to upgrade to gradio&gt;=4.44 to address this issue. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-47168|2024-10-10T21:45:48.052Z</guid>
      <pubDate>Thu, 10 Oct 2024 21:44:51 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-47165|2024-10-10T21:50:08.186Z -- gradio-app -- gradio
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-47165</link>
      <description>Gradio is an open-source Python package designed for quick prototyping. This vulnerability relates to **CORS origin validation accepting a null origin**. When a Gradio server is deployed locally, the `localhost_aliases` variable includes "null" as a valid origin. This allows attackers to make unauthorized requests from sandboxed iframes or other sources with a null origin, potentially leading to data theft, such as user authentication tokens or uploaded files. This impacts users running Gradio locally, especially those using basic authentication. Users are advised to upgrade to `gradio&gt;=5.0` to address this issue. As a workaround, users can manually modify the `localhost_aliases` list in their local Gradio deployment to exclude "null" as a valid origin. By removing this value, the Gradio server will no longer accept requests from sandboxed iframes or sources with a null origin, mitigating the potential for exploitation.</description>
      <guid isPermaLink="false">CVE-2024-47165|2024-10-10T21:50:08.186Z</guid>
      <pubDate>Thu, 10 Oct 2024 21:50:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-47084|2024-10-10T21:53:51.940Z -- gradio-app -- gradio
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-47084</link>
      <description>Gradio is an open-source Python package designed for quick prototyping. This vulnerability is related to **CORS origin validation**, where the Gradio server fails to validate the request origin when a cookie is present. This allows an attacker’s website to make unauthorized requests to a local Gradio server. Potentially, attackers can upload files, steal authentication tokens, and access user data if the victim visits a malicious website while logged into Gradio. This impacts users who have deployed Gradio locally and use basic authentication. Users are advised to upgrade to `gradio&gt;4.44` to address this issue. As a workaround, users can manually enforce stricter CORS origin validation by modifying the `CustomCORSMiddleware` class in their local Gradio server code. Specifically, they can bypass the condition that skips CORS validation for requests containing cookies to prevent potential exploitation.</description>
      <guid isPermaLink="false">CVE-2024-47084|2024-10-10T21:53:51.940Z</guid>
      <pubDate>Thu, 10 Oct 2024 21:53:51 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-47167|2024-10-10T21:47:29.389Z -- gradio-app -- gradio
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-47167</link>
      <description>Gradio is an open-source Python package designed for quick prototyping. This vulnerability relates to **Server-Side Request Forgery (SSRF)** in the `/queue/join` endpoint. Gradio’s `async_save_url_to_cache` function allows attackers to force the Gradio server to send HTTP requests to user-controlled URLs. This could enable attackers to target internal servers or services within a local network and possibly exfiltrate data or cause unwanted internal requests. Additionally, the content from these URLs is stored locally, making it easier for attackers to upload potentially malicious files to the server. This impacts users deploying Gradio servers that use components like the Video component which involve URL fetching. Users are advised to upgrade to `gradio&gt;=5` to address this issue.  As a workaround, users can disable or heavily restrict URL-based inputs in their Gradio applications to trusted domains only. Additionally, implementing stricter URL validation (such as allowinglist-based validation) and ensuring that local or internal network addresses cannot be requested via the `/queue/join` endpoint can help mitigate the risk of SSRF attacks.</description>
      <guid isPermaLink="false">CVE-2024-47167|2024-10-10T21:47:29.389Z</guid>
      <pubDate>Thu, 10 Oct 2024 21:47:29 +0000</pubDate>
    </item>
  </channel>
</rss>
