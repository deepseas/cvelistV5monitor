<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for ElrondNetwork -- elrond-go</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/elrondnetwork/elrond-go.rss</link>
    <description>The latest CVEs for ElrondNetwork -- elrond-go</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 18:24:42 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-36058|2024-08-03T09:52:00.545Z -- elrondnetwork -- elrond-go
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-36058</link>
      <description>Elrond go is the go implementation for the Elrond Network protocol. In versions prior to 1.3.34, anyone who uses elrond-go to process blocks (historical or actual) could encounter a `MultiESDTNFTTransfer` transaction like this: `MultiESDTNFTTransfer` with a missing function name. Basic functionality like p2p messaging, storage, API requests and such are unaffected. Version 1.3.34 contains a fix for this issue. There are no known workarounds.</description>
      <guid isPermaLink="false">CVE-2022-36058|2024-08-03T09:52:00.545Z</guid>
      <pubDate>Tue, 06 Sep 2022 20:10:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-46173|2024-08-03T14:24:03.318Z -- elrondnetwork -- elrond-go
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-46173</link>
      <description>Elrond-GO is a go implementation for the Elrond Network protocol. Versions prior to 1.3.50 are subject to a processing issue where nodes are affected when trying to process a cross-shard relayed transaction with a smart contract deploy transaction data. The problem was a bad correlation between the transaction caches and the processing component. If the above-mentioned transaction was sent with more gas than required, the smart contract result (SCR transaction) that should have returned the leftover gas, would have been wrongly added to a cache that the processing unit did not consider. The node stopped notarizing metachain blocks. The fix was actually to extend the SCR transaction search in all other caches if it wasn't found in the correct (expected) sharded-cache. There are no known workarounds at this time. This issue has been patched in version 1.3.50.
</description>
      <guid isPermaLink="false">CVE-2022-46173|2024-08-03T14:24:03.318Z</guid>
      <pubDate>Wed, 28 Dec 2022 06:27:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-36061|2024-08-03T09:52:00.537Z -- elrondnetwork -- elrond-go
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-36061</link>
      <description>Elrond go is the go implementation for the Elrond Network protocol. In versions prior to 1.3.35, read only calls between contracts can generate smart contracts results. For example, if contract A calls in read only mode contract B and the called function will make changes upon the contract's B state, the state will be altered for contract B as if the call was not made in the read-only mode. This can lead to some effects not designed by the original smart contracts programmers. This issue was patched in version 1.3.35. There are no known workarounds.</description>
      <guid isPermaLink="false">CVE-2022-36061|2024-08-03T09:52:00.537Z</guid>
      <pubDate>Tue, 06 Sep 2022 20:35:10 +0000</pubDate>
    </item>
  </channel>
</rss>
