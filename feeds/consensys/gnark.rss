<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Consensys -- gnark</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/consensys/gnark.rss</link>
    <description>The latest CVEs for Consensys -- gnark</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 19 Sep 2024 21:21:54 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-44378|2024-09-19T13:52:13.521Z -- consensys -- gnark
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-44378</link>
      <description>gnark is a zk-SNARK library that offers a high-level API to design circuits. Prior to version 0.9.0, for some in-circuit values, it is possible to construct two valid decomposition to bits. In addition to the canonical decomposition of `a`, for small values there exists a second decomposition for `a+r` (where `r` is the modulus the values are being reduced by). The second decomposition was possible due to overflowing the field where the values are defined. Upgrading to version 0.9.0 should fix the issue without needing to change the calls to value comparison methods.</description>
      <guid isPermaLink="false">CVE-2023-44378|2024-09-19T13:52:13.521Z</guid>
      <pubDate>Mon, 09 Oct 2023 13:33:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-45039|2024-09-06T13:59:16.727Z -- consensys -- gnark</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45039</link>
      <description>gnark is a fast zk-SNARK library that offers a high-level API to design circuits. Versions prior to 0.11.0 have a soundness issue - in case of multiple commitments used inside the circuit the prover is able to choose all but the last commitment. As gnark uses the commitments for optimized non-native multiplication, lookup checks etc. as random challenges, then it could impact the soundness of the whole circuit. However, using multiple commitments has been discouraged due to the additional cost to the verifier and it has not been supported in the recursive in-circuit Groth16 verifier and Solidity verifier. gnark's maintainers expect the impact of the issue be very small - only for the users who have implemented the native Groth16 verifier or are using it with multiple commitments. We do not have information of such users. The issue has been patched in version 0.11.0. As a workaround, users should follow gnark maintainers' recommendation to use only a single commitment and then derive in-circuit commitments as needed using the `std/multicommit` package.</description>
      <guid isPermaLink="false">CVE-2024-45039|2024-09-06T13:59:16.727Z</guid>
      <pubDate>Fri, 06 Sep 2024 12:56:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-45039|2024-09-06T12:56:15.080Z -- consensys -- gnark</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45039</link>
      <description>gnark is a fast zk-SNARK library that offers a high-level API to design circuits. Versions prior to 0.11.0 have a soundness issue - in case of multiple commitments used inside the circuit the prover is able to choose all but the last commitment. As gnark uses the commitments for optimized non-native multiplication, lookup checks etc. as random challenges, then it could impact the soundness of the whole circuit. However, using multiple commitments has been discouraged due to the additional cost to the verifier and it has not been supported in the recursive in-circuit Groth16 verifier and Solidity verifier. gnark's maintainers expect the impact of the issue be very small - only for the users who have implemented the native Groth16 verifier or are using it with multiple commitments. We do not have information of such users. The issue has been patched in version 0.11.0. As a workaround, users should follow gnark maintainers' recommendation to use only a single commitment and then derive in-circuit commitments as needed using the `std/multicommit` package.</description>
      <guid isPermaLink="false">CVE-2024-45039|2024-09-06T12:56:15.080Z</guid>
      <pubDate>Fri, 06 Sep 2024 12:56:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-45040|2024-09-06T12:53:30.622Z -- consensys -- gnark</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45040</link>
      <description>gnark is a fast zk-SNARK library that offers a high-level API to design circuits. Prior to version 0.11.0, commitments to private witnesses in Groth16 as implemented break the zero-knowledge property. The vulnerability affects only Groth16 proofs with commitments. Notably, PLONK proofs are not affected. The vulnerability affects the zero-knowledge property of the proofs - in case the witness (secret or internal) values are small, then the attacker may be able to enumerate all possible choices to deduce the actual value. If the possible choices for the variables to be committed is large or there are many values committed, then it would be computationally infeasible to enumerate all valid choices. It doesn't affect the completeness/soundness of the proofs. The vulnerability has been fixed in version 0.11.0. The patch to fix the issue is to add additional randomized value to the list of committed value at proving time to mask the rest of the values which were committed. As a workaround, the user can manually commit to a randomized value.</description>
      <guid isPermaLink="false">CVE-2024-45040|2024-09-06T12:53:30.622Z</guid>
      <pubDate>Fri, 06 Sep 2024 12:53:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-45040|2024-09-06T13:57:49.796Z -- consensys -- gnark</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45040</link>
      <description>gnark is a fast zk-SNARK library that offers a high-level API to design circuits. Prior to version 0.11.0, commitments to private witnesses in Groth16 as implemented break the zero-knowledge property. The vulnerability affects only Groth16 proofs with commitments. Notably, PLONK proofs are not affected. The vulnerability affects the zero-knowledge property of the proofs - in case the witness (secret or internal) values are small, then the attacker may be able to enumerate all possible choices to deduce the actual value. If the possible choices for the variables to be committed is large or there are many values committed, then it would be computationally infeasible to enumerate all valid choices. It doesn't affect the completeness/soundness of the proofs. The vulnerability has been fixed in version 0.11.0. The patch to fix the issue is to add additional randomized value to the list of committed value at proving time to mask the rest of the values which were committed. As a workaround, the user can manually commit to a randomized value.</description>
      <guid isPermaLink="false">CVE-2024-45040|2024-09-06T13:57:49.796Z</guid>
      <pubDate>Fri, 06 Sep 2024 12:53:30 +0000</pubDate>
    </item>
  </channel>
</rss>
