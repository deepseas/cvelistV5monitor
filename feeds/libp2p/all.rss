<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for libp2p -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/libp2p/all.rss</link>
    <description>The latest CVEs for libp2p -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 11:20:20 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-23487|2024-08-03T03:43:46.080Z -- libp2p -- js-libp2p
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23487</link>
      <description>js-libp2p is the official javascript Implementation of libp2p networking stack. Versions older than `v0.38.0` of js-libp2p are vulnerable to targeted resource exhaustion attacks. These attacks target libp2p’s connection, stream, peer, and memory management. An attacker can cause the allocation of large amounts of memory, ultimately leading to the process getting killed by the host’s operating system. While a connection manager tasked with keeping the number of connections within manageable limits has been part of js-libp2p, this component was designed to handle the regular churn of peers, not a targeted resource exhaustion attack. Users are advised to update their js-libp2p dependency to `v0.38.0` or greater. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2022-23487|2024-08-03T03:43:46.080Z</guid>
      <pubDate>Wed, 07 Dec 2022 20:05:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-23486|2024-08-03T03:43:46.072Z -- libp2p -- rust-libp2p
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23486</link>
      <description>libp2p-rust is the official rust language Implementation of the libp2p networking stack. In versions prior to 0.45.1 an attacker node can cause a victim node to allocate a large number of small memory chunks, which can ultimately lead to the victim’s process running out of memory and thus getting killed by its operating system. When executed continuously, this can lead to a denial of service attack, especially relevant on a larger scale when run against more than one node of a libp2p based network. Users are advised to upgrade to `libp2p` `v0.45.1` or above. Users unable to upgrade should reference the DoS Mitigation page for more information on how to incorporate mitigation strategies, monitor their application, and respond to attacks: https://docs.libp2p.io/reference/dos-mitigation/.</description>
      <guid isPermaLink="false">CVE-2022-23486|2024-08-03T03:43:46.072Z</guid>
      <pubDate>Wed, 07 Dec 2022 20:03:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-23492|2024-08-03T03:43:46.122Z -- libp2p -- go-libp2p
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23492</link>
      <description>go-libp2p is the offical libp2p implementation in the Go programming language. Version `0.18.0` and older of go-libp2p are vulnerable to targeted resource exhaustion attacks. These attacks target libp2p’s connection, stream, peer, and memory management. An attacker can cause the allocation of large amounts of memory, ultimately leading to the process getting killed by the host’s operating system. While a connection manager tasked with keeping the number of connections within manageable limits has been part of go-libp2p, this component was designed to handle the regular churn of peers, not a targeted resource exhaustion attack. Users are advised to upgrade their version of go-libp2p to version `0.18.1` or newer. Users unable to upgrade may consult the denial of service (dos) mitigation page for more information on how to incorporate mitigation strategies, monitor your application, and respond to attacks. </description>
      <guid isPermaLink="false">CVE-2022-23492|2024-08-03T03:43:46.122Z</guid>
      <pubDate>Thu, 08 Dec 2022 00:08:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32984|2024-07-03T20:57:34.672Z -- libp2p -- rust-yamux</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32984</link>
      <description>Yamux is a stream multiplexer over reliable, ordered connections such as TCP/IP. The Rust implementation of the Yamux stream multiplexer uses a vector for pending frames. This vector is not bounded in length. Every time the Yamux protocol requires sending of a new frame, this frame gets appended to this vector. This can be remotely triggered in a number of ways, for example by: 1. Opening a new libp2p Identify stream. This causes the node to send its Identify message. Of course, every other protocol that causes the sending of data also works. The larger the response, the more data is enqueued. 2. Sending a Yamux Ping frame. This causes a Pong frame to be enqueued. Under normal circumstances, this queue of pending frames would be drained once they’re sent out over the network. However, the attacker can use TCP’s receive window mechanism to prevent the victim from sending out any data: By not reading from the TCP connection, the receive window will never be increased, and the victim won’t be able to send out any new data (this is how TCP implements backpressure). Once this happens, Yamux’s queue of pending frames will start growing indefinitely. The queue will only be drained once the underlying TCP connection is closed. An attacker can cause a remote node to run out of memory, which will result in the corresponding process getting terminated by the operating system.</description>
      <guid isPermaLink="false">CVE-2024-32984|2024-07-03T20:57:34.672Z</guid>
      <pubDate>Wed, 01 May 2024 10:45:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32984|2024-05-01T10:45:09.357Z -- libp2p -- rust-yamux</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32984</link>
      <description>Yamux is a stream multiplexer over reliable, ordered connections such as TCP/IP. The Rust implementation of the Yamux stream multiplexer uses a vector for pending frames. This vector is not bounded in length. Every time the Yamux protocol requires sending of a new frame, this frame gets appended to this vector. This can be remotely triggered in a number of ways, for example by: 1. Opening a new libp2p Identify stream. This causes the node to send its Identify message. Of course, every other protocol that causes the sending of data also works. The larger the response, the more data is enqueued. 2. Sending a Yamux Ping frame. This causes a Pong frame to be enqueued. Under normal circumstances, this queue of pending frames would be drained once they’re sent out over the network. However, the attacker can use TCP’s receive window mechanism to prevent the victim from sending out any data: By not reading from the TCP connection, the receive window will never be increased, and the victim won’t be able to send out any new data (this is how TCP implements backpressure). Once this happens, Yamux’s queue of pending frames will start growing indefinitely. The queue will only be drained once the underlying TCP connection is closed. An attacker can cause a remote node to run out of memory, which will result in the corresponding process getting terminated by the operating system.</description>
      <guid isPermaLink="false">CVE-2024-32984|2024-05-01T10:45:09.357Z</guid>
      <pubDate>Wed, 01 May 2024 10:45:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32984|2024-08-02T02:27:53.353Z -- libp2p -- rust-yamux</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32984</link>
      <description>Yamux is a stream multiplexer over reliable, ordered connections such as TCP/IP. The Rust implementation of the Yamux stream multiplexer uses a vector for pending frames. This vector is not bounded in length. Every time the Yamux protocol requires sending of a new frame, this frame gets appended to this vector. This can be remotely triggered in a number of ways, for example by: 1. Opening a new libp2p Identify stream. This causes the node to send its Identify message. Of course, every other protocol that causes the sending of data also works. The larger the response, the more data is enqueued. 2. Sending a Yamux Ping frame. This causes a Pong frame to be enqueued. Under normal circumstances, this queue of pending frames would be drained once they’re sent out over the network. However, the attacker can use TCP’s receive window mechanism to prevent the victim from sending out any data: By not reading from the TCP connection, the receive window will never be increased, and the victim won’t be able to send out any new data (this is how TCP implements backpressure). Once this happens, Yamux’s queue of pending frames will start growing indefinitely. The queue will only be drained once the underlying TCP connection is closed. An attacker can cause a remote node to run out of memory, which will result in the corresponding process getting terminated by the operating system.</description>
      <guid isPermaLink="false">CVE-2024-32984|2024-08-02T02:27:53.353Z</guid>
      <pubDate>Wed, 01 May 2024 10:45:09 +0000</pubDate>
    </item>
  </channel>
</rss>
