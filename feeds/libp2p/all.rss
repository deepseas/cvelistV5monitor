<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for libp2p -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/libp2p/all.rss</link>
    <description>The latest CVEs for libp2p -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 22:22:50 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-39533|2024-08-02T18:10:21.375Z -- libp2p -- go-libp2p
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39533</link>
      <description>go-libp2p is the Go implementation of the libp2p Networking Stack. Prior to versions 0.27.8, 0.28.2, and 0.29.1 malicious peer can use large RSA keys to run a resource exhaustion attack &amp; force a node to spend time doing signature verification of the large key. This vulnerability is present in the core/crypto module of go-libp2p and can occur during the Noise handshake and the libp2p x509 extension verification step. To prevent this attack, go-libp2p versions 0.27.8, 0.28.2, and 0.29.1 restrict RSA keys to &lt;= 8192 bits. To protect one's application, it is necessary to update to these patch releases and to use the updated Go compiler in 1.20.7 or 1.19.12. There are no known workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2023-39533|2024-08-02T18:10:21.375Z</guid>
      <pubDate>Tue, 08 Aug 2023 18:50:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-40583|2024-08-02T18:38:50.867Z -- libp2p -- go-libp2p
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-40583</link>
      <description>libp2p is a networking stack and library modularized out of The IPFS Project, and bundled separately for other tools to use. In go-libp2p, by using signed peer records a malicious actor can store an arbitrary amount of data in a remote node’s memory. This memory does not get garbage collected and so the victim can run out of memory and crash. If users of go-libp2p in production are not monitoring memory consumption over time, it could be a silent attack i.e. the attacker could bring down nodes over a period of time (how long depends on the node resources i.e. a go-libp2p node on a virtual server with 4 gb of memory takes about 90 sec to bring down; on a larger server, it might take a bit longer.) This issue was patched in version 0.27.4.</description>
      <guid isPermaLink="false">CVE-2023-40583|2024-08-02T18:38:50.867Z</guid>
      <pubDate>Fri, 25 Aug 2023 20:25:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32984|2024-08-02T02:27:53.353Z -- libp2p -- rust-yamux</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32984</link>
      <description>Yamux is a stream multiplexer over reliable, ordered connections such as TCP/IP. The Rust implementation of the Yamux stream multiplexer uses a vector for pending frames. This vector is not bounded in length. Every time the Yamux protocol requires sending of a new frame, this frame gets appended to this vector. This can be remotely triggered in a number of ways, for example by: 1. Opening a new libp2p Identify stream. This causes the node to send its Identify message. Of course, every other protocol that causes the sending of data also works. The larger the response, the more data is enqueued. 2. Sending a Yamux Ping frame. This causes a Pong frame to be enqueued. Under normal circumstances, this queue of pending frames would be drained once they’re sent out over the network. However, the attacker can use TCP’s receive window mechanism to prevent the victim from sending out any data: By not reading from the TCP connection, the receive window will never be increased, and the victim won’t be able to send out any new data (this is how TCP implements backpressure). Once this happens, Yamux’s queue of pending frames will start growing indefinitely. The queue will only be drained once the underlying TCP connection is closed. An attacker can cause a remote node to run out of memory, which will result in the corresponding process getting terminated by the operating system.</description>
      <guid isPermaLink="false">CVE-2024-32984|2024-08-02T02:27:53.353Z</guid>
      <pubDate>Wed, 01 May 2024 10:45:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32984|2024-05-01T10:45:09.357Z -- libp2p -- rust-yamux</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32984</link>
      <description>Yamux is a stream multiplexer over reliable, ordered connections such as TCP/IP. The Rust implementation of the Yamux stream multiplexer uses a vector for pending frames. This vector is not bounded in length. Every time the Yamux protocol requires sending of a new frame, this frame gets appended to this vector. This can be remotely triggered in a number of ways, for example by: 1. Opening a new libp2p Identify stream. This causes the node to send its Identify message. Of course, every other protocol that causes the sending of data also works. The larger the response, the more data is enqueued. 2. Sending a Yamux Ping frame. This causes a Pong frame to be enqueued. Under normal circumstances, this queue of pending frames would be drained once they’re sent out over the network. However, the attacker can use TCP’s receive window mechanism to prevent the victim from sending out any data: By not reading from the TCP connection, the receive window will never be increased, and the victim won’t be able to send out any new data (this is how TCP implements backpressure). Once this happens, Yamux’s queue of pending frames will start growing indefinitely. The queue will only be drained once the underlying TCP connection is closed. An attacker can cause a remote node to run out of memory, which will result in the corresponding process getting terminated by the operating system.</description>
      <guid isPermaLink="false">CVE-2024-32984|2024-05-01T10:45:09.357Z</guid>
      <pubDate>Wed, 01 May 2024 10:45:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32984|2024-07-03T20:57:34.672Z -- libp2p -- rust-yamux</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32984</link>
      <description>Yamux is a stream multiplexer over reliable, ordered connections such as TCP/IP. The Rust implementation of the Yamux stream multiplexer uses a vector for pending frames. This vector is not bounded in length. Every time the Yamux protocol requires sending of a new frame, this frame gets appended to this vector. This can be remotely triggered in a number of ways, for example by: 1. Opening a new libp2p Identify stream. This causes the node to send its Identify message. Of course, every other protocol that causes the sending of data also works. The larger the response, the more data is enqueued. 2. Sending a Yamux Ping frame. This causes a Pong frame to be enqueued. Under normal circumstances, this queue of pending frames would be drained once they’re sent out over the network. However, the attacker can use TCP’s receive window mechanism to prevent the victim from sending out any data: By not reading from the TCP connection, the receive window will never be increased, and the victim won’t be able to send out any new data (this is how TCP implements backpressure). Once this happens, Yamux’s queue of pending frames will start growing indefinitely. The queue will only be drained once the underlying TCP connection is closed. An attacker can cause a remote node to run out of memory, which will result in the corresponding process getting terminated by the operating system.</description>
      <guid isPermaLink="false">CVE-2024-32984|2024-07-03T20:57:34.672Z</guid>
      <pubDate>Wed, 01 May 2024 10:45:09 +0000</pubDate>
    </item>
  </channel>
</rss>
