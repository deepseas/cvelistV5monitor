<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for tauri-apps -- tauri</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/tauri-apps/tauri.rss</link>
    <description>The latest CVEs for tauri-apps -- tauri</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 15:22:58 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-46171|2024-08-03T14:24:03.235Z -- tauri-apps -- tauri
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-46171</link>
      <description>Tauri is a framework for building binaries for all major desktop platforms. The filesystem glob pattern wildcards `*`, `?`, and `[...]` match file path literals and leading dots by default, which unintentionally exposes sub folder content of allowed paths. Scopes without the wildcards are not affected. As `**` allows for sub directories the behavior there is also as expected. The issue has been patched in the latest release and was backported into the currently supported 1.x branches. There are no known workarounds at the time of publication.</description>
      <guid isPermaLink="false">CVE-2022-46171|2024-08-03T14:24:03.235Z</guid>
      <pubDate>Fri, 23 Dec 2022 13:47:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-41874|2024-08-03T12:56:38.194Z -- tauri-apps -- tauri
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-41874</link>
      <description>Tauri is a framework for building binaries for all major desktop platforms. In versions prior to 1.0.7 and 1.1.2, Tauri is vulnerable to an Incorrectly-Resolved Name. Due to incorrect escaping of special characters in paths selected via the file dialog and drag and drop functionality, it is possible to partially bypass the `fs` scope definition. It is not possible to traverse into arbitrary paths, as the issue is limited to neighboring files and sub folders of already allowed paths. The impact differs on Windows, MacOS and Linux due to different specifications of valid path characters. This bypass depends on the file picker dialog or dragged files, as user selected paths are automatically added to the allow list at runtime. A successful bypass requires the user to select a pre-existing malicious file or directory during the file picker dialog and an adversary controlled logic to access these files. The issue has been patched in versions 1.0.7, 1.1.2 and 1.2.0. As a workaround, disable the dialog and fileDropEnabled component inside the tauri.conf.json.</description>
      <guid isPermaLink="false">CVE-2022-41874|2024-08-03T12:56:38.194Z</guid>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-39215|2024-08-03T12:00:42.497Z -- tauri-apps -- tauri
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-39215</link>
      <description>Tauri is a framework for building binaries for all major desktop platforms. Due to missing canonicalization when `readDir` is called recursively, it was possible to display directory listings outside of the defined `fs` scope. This required a crafted symbolic link or junction folder inside an allowed path of the `fs` scope. No arbitrary file content could be leaked. The issue has been resolved in version 1.0.6 and the implementation now properly checks if the requested (sub) directory is a symbolic link outside of the defined `scope`. Users are advised to upgrade. Users unable to upgrade should disable the `readDir` endpoint in the `allowlist` inside the `tauri.conf.json`.</description>
      <guid isPermaLink="false">CVE-2022-39215|2024-08-03T12:00:42.497Z</guid>
      <pubDate>Thu, 15 Sep 2022 21:35:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35222|2024-06-04T17:34:02.079Z -- tauri-apps -- tauri</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35222</link>
      <description>Tauri is a framework for building binaries for all major desktop platforms. Remote origin iFrames in Tauri applications can access the Tauri IPC endpoints without being explicitly allowed in the `dangerousRemoteDomainIpcAccess` in v1 and in the `capabilities` in v2. Valid commands with potentially unwanted consequences ("delete project", "transfer credits", etc.) could be invoked by an attacker that controls the content of an iframe running inside a Tauri app. This vulnerability has been patched in versions 1.6.7 and 2.0.0-beta.19.</description>
      <guid isPermaLink="false">CVE-2024-35222|2024-06-04T17:34:02.079Z</guid>
      <pubDate>Thu, 23 May 2024 13:20:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35222|2024-08-02T03:07:46.872Z -- tauri-apps -- tauri</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-35222</link>
      <description>Tauri is a framework for building binaries for all major desktop platforms. Remote origin iFrames in Tauri applications can access the Tauri IPC endpoints without being explicitly allowed in the `dangerousRemoteDomainIpcAccess` in v1 and in the `capabilities` in v2. Valid commands with potentially unwanted consequences ("delete project", "transfer credits", etc.) could be invoked by an attacker that controls the content of an iframe running inside a Tauri app. This vulnerability has been patched in versions 1.6.7 and 2.0.0-beta.19.</description>
      <guid isPermaLink="false">CVE-2024-35222|2024-08-02T03:07:46.872Z</guid>
      <pubDate>Thu, 23 May 2024 13:20:26 +0000</pubDate>
    </item>
  </channel>
</rss>
