<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for panva -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/panva/all.rss</link>
    <description>The latest CVEs for panva -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 23:23:04 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-29444|2024-08-03T22:02:51.935Z -- panva -- jose
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-29444</link>
      <description>jose-browser-runtime is an npm package which provides a number of cryptographic functions. In versions prior to 3.11.4 the AES_CBC_HMAC_SHA2 Algorithm (A128CBC-HS256, A192CBC-HS384, A256CBC-HS512) decryption would always execute both HMAC tag verification and CBC decryption, if either failed `JWEDecryptionFailed` would be thrown. But a possibly observable difference in timing when padding error would occur while decrypting the ciphertext makes a padding oracle and an adversary might be able to make use of that oracle to decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). A patch was released which ensures the HMAC tag is verified before performing CBC decryption. The fixed versions are `&gt;=3.11.4`. Users should upgrade to `^3.11.4`.</description>
      <guid isPermaLink="false">CVE-2021-29444|2024-08-03T22:02:51.935Z</guid>
      <pubDate>Fri, 16 Apr 2021 21:45:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-29445|2024-08-03T22:02:51.975Z -- panva -- jose-node-esm-runtime
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-29445</link>
      <description>jose-node-esm-runtime is an npm package which provides a number of cryptographic functions. In versions prior to 3.11.4 the AES_CBC_HMAC_SHA2 Algorithm (A128CBC-HS256, A192CBC-HS384, A256CBC-HS512) decryption would always execute both HMAC tag verification and CBC decryption, if either failed `JWEDecryptionFailed` would be thrown. But a possibly observable difference in timing when padding error would occur while decrypting the ciphertext makes a padding oracle and an adversary might be able to make use of that oracle to decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). A patch was released which ensures the HMAC tag is verified before performing CBC decryption. The fixed versions are `&gt;=3.11.4`. Users should upgrade to `^3.11.4`.</description>
      <guid isPermaLink="false">CVE-2021-29445|2024-08-03T22:02:51.975Z</guid>
      <pubDate>Fri, 16 Apr 2021 21:50:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-36083|2024-08-03T09:52:00.528Z -- panva -- jose
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-36083</link>
      <description>JOSE is "JSON Web Almost Everything" - JWA, JWS, JWE, JWT, JWK, JWKS with no dependencies using runtime's native crypto in Node.js, Browser, Cloudflare Workers, Electron, and Deno. The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named `p2c` PBES2 Count, which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive. This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish. Under certain conditions, it is possible to have the user's environment consume unreasonable amount of CPU time. The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (`alg` Header Parameter) using the `keyManagementAlgorithms` (or `algorithms` in v1.x) decryption option or through other means. The `v1.28.2`, `v2.0.6`, `v3.20.4`, and `v4.9.2` releases limit the maximum PBKDF2 iteration count to `10000` by default. It is possible to adjust this limit with a newly introduced `maxPBES2Count` decryption option. If users are unable to upgrade their required library version, they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms. They can use the `keyManagementAlgorithms` decryption option to disable accepting PBKDF2 altogether, or they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (`p2c` Header Parameter).</description>
      <guid isPermaLink="false">CVE-2022-36083|2024-08-03T09:52:00.528Z</guid>
      <pubDate>Wed, 07 Sep 2022 21:55:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-29443|2024-08-03T22:02:52.017Z -- panva -- jose
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-29443</link>
      <description>jose is an npm library providing a number of cryptographic operations. In vulnerable versions AES_CBC_HMAC_SHA2 Algorithm (A128CBC-HS256, A192CBC-HS384, A256CBC-HS512) decryption would always execute both HMAC tag verification and CBC decryption, if either failed `JWEDecryptionFailed` would be thrown. A possibly observable difference in timing when padding error would occur while decrypting the ciphertext makes a padding oracle and an adversary might be able to make use of that oracle to decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). All major release versions have had a patch released which ensures the HMAC tag is verified before performing CBC decryption. The fixed versions are `^1.28.1 || ^2.0.5 || &gt;=3.11.4`. Users should upgrade their v1.x dependency to ^1.28.1, their v2.x dependency to ^2.0.5, and their v3.x dependency to ^3.11.4. Thanks to Jason from Microsoft Vulnerability Research (MSVR) for bringing this up and Eva Sarafianou (@esarafianou) for helping to score this advisory.</description>
      <guid isPermaLink="false">CVE-2021-29443|2024-08-03T22:02:52.017Z</guid>
      <pubDate>Fri, 16 Apr 2021 17:35:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-29446|2024-08-03T22:02:51.986Z -- panva -- jose-node-cjs-runtime
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-29446</link>
      <description>jose-node-cjs-runtime is an npm package which provides a number of cryptographic functions. In versions prior to 3.11.4 the AES_CBC_HMAC_SHA2 Algorithm (A128CBC-HS256, A192CBC-HS384, A256CBC-HS512) decryption would always execute both HMAC tag verification and CBC decryption, if either failed `JWEDecryptionFailed` would be thrown. But a possibly observable difference in timing when padding error would occur while decrypting the ciphertext makes a padding oracle and an adversary might be able to make use of that oracle to decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). A patch was released which ensures the HMAC tag is verified before performing CBC decryption. The fixed versions are `&gt;=3.11.4`. Users should upgrade to `^3.11.4`.</description>
      <guid isPermaLink="false">CVE-2021-29446|2024-08-03T22:02:51.986Z</guid>
      <pubDate>Fri, 16 Apr 2021 22:00:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-28176|2024-08-02T00:48:49.416Z -- panva -- jose</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-28176</link>
      <description>jose is JavaScript module for JSON Object Signing and Encryption, providing support for JSON Web Tokens (JWT), JSON Web Signature (JWS), JSON Web Encryption (JWE), JSON Web Key (JWK), JSON Web Key Set (JWKS), and more. A vulnerability has 
 been identified in the JSON Web Encryption (JWE) decryption interfaces, specifically related to the support for decompressing plaintext after its decryption. Under certain conditions it is possible to have the user's environment consume unreasonable amount of CPU time or memory during JWE Decryption operations. This issue has been patched in versions 2.0.7 and 4.15.5.</description>
      <guid isPermaLink="false">CVE-2024-28176|2024-08-02T00:48:49.416Z</guid>
      <pubDate>Sat, 09 Mar 2024 00:43:06 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-28176|2024-03-09T00:43:06.930Z -- panva -- jose</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-28176</link>
      <description>jose is JavaScript module for JSON Object Signing and Encryption, providing support for JSON Web Tokens (JWT), JSON Web Signature (JWS), JSON Web Encryption (JWE), JSON Web Key (JWK), JSON Web Key Set (JWKS), and more. A vulnerability has 
 been identified in the JSON Web Encryption (JWE) decryption interfaces, specifically related to the support for decompressing plaintext after its decryption. Under certain conditions it is possible to have the user's environment consume unreasonable amount of CPU time or memory during JWE Decryption operations. This issue has been patched in versions 2.0.7 and 4.15.5.</description>
      <guid isPermaLink="false">CVE-2024-28176|2024-03-09T00:43:06.930Z</guid>
      <pubDate>Sat, 09 Mar 2024 00:43:06 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-28176|2024-07-05T17:22:12.853Z -- panva -- jose</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-28176</link>
      <description>jose is JavaScript module for JSON Object Signing and Encryption, providing support for JSON Web Tokens (JWT), JSON Web Signature (JWS), JSON Web Encryption (JWE), JSON Web Key (JWK), JSON Web Key Set (JWKS), and more. A vulnerability has 
 been identified in the JSON Web Encryption (JWE) decryption interfaces, specifically related to the support for decompressing plaintext after its decryption. Under certain conditions it is possible to have the user's environment consume unreasonable amount of CPU time or memory during JWE Decryption operations. This issue has been patched in versions 2.0.7 and 4.15.5.</description>
      <guid isPermaLink="false">CVE-2024-28176|2024-07-05T17:22:12.853Z</guid>
      <pubDate>Sat, 09 Mar 2024 00:43:06 +0000</pubDate>
    </item>
  </channel>
</rss>
