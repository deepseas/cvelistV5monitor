<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for OpenRefine -- OpenRefine</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/openrefine/openrefine.rss</link>
    <description>The latest CVEs for OpenRefine -- OpenRefine</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 24 Oct 2024 22:23:14 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-49760|2024-10-24T21:35:28.932Z -- openrefine -- openrefine
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-49760</link>
      <description>OpenRefine is a free, open source tool for working with messy data. The load-language command expects a `lang` parameter from which it constructs the path of the localization file to load, of the form `translations-$LANG.json`. But when doing so in versions prior to 3.8.3, it does not check that the resulting path is in the expected directory, which means that this command could be exploited to read other JSON files on the file system. Version 3.8.3 addresses this issue.</description>
      <guid isPermaLink="false">CVE-2024-49760|2024-10-24T21:35:28.932Z</guid>
      <pubDate>Thu, 24 Oct 2024 21:35:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-47881|2024-10-24T20:31:09.314Z -- openrefine -- openrefine</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-47881</link>
      <description>OpenRefine is a free, open source tool for working with messy data. Starting in version 3.4-beta and prior to version 3.8.3, in the `database` extension, the "enable_load_extension" property can be set for the SQLite integration, enabling an attacker to load (local or remote) extension DLLs and so run arbitrary code on the server. The attacker needs to have network access to the OpenRefine instance. Version 3.8.3 fixes this issue.</description>
      <guid isPermaLink="false">CVE-2024-47881|2024-10-24T20:31:09.314Z</guid>
      <pubDate>Thu, 24 Oct 2024 20:31:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-47879|2024-10-24T20:17:55.106Z -- openrefine -- openrefine</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-47879</link>
      <description>OpenRefine is a free, open source tool for working with messy data. Prior to version 3.8.3, lack of cross-site request forgery protection on the `preview-expression` command means that visiting a malicious website could cause an attacker-controlled expression to be executed. The expression can contain arbitrary Clojure or Python code. The attacker must know a valid project ID of a project that contains at least one row, and the attacker must convince the victim to open a malicious webpage. Version 3.8.3 fixes the issue.</description>
      <guid isPermaLink="false">CVE-2024-47879|2024-10-24T20:17:55.106Z</guid>
      <pubDate>Thu, 24 Oct 2024 20:17:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-47878|2024-10-24T20:11:19.814Z -- openrefine -- openrefine</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-47878</link>
      <description>OpenRefine is a free, open source tool for working with messy data. Prior to version 3.8.3, the `/extension/gdata/authorized` endpoint includes the `state` GET parameter verbatim in a `</description>
      <guid isPermaLink="false">CVE-2024-47878|2024-10-24T20:11:19.814Z</guid>
      <pubDate>Thu, 24 Oct 2024 20:11:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-47882|2024-10-24T20:35:30.254Z -- openrefine -- openrefine</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-47882</link>
      <description>OpenRefine is a free, open source tool for working with messy data. Prior to version 3.8.3, the built-in "Something went wrong!" error page includes the exception message and exception traceback without escaping HTML tags, enabling injection into the page if an attacker can reliably produce an error with an attacker-influenced message. It appears that the only way to reach this code in OpenRefine itself is for an attacker to somehow convince a victim to import a malicious file, which may be difficult.  However, out-of-tree extensions may add their own calls to `respondWithErrorPage`. Version 3.8.3 has a fix for this issue.</description>
      <guid isPermaLink="false">CVE-2024-47882|2024-10-24T20:35:30.254Z</guid>
      <pubDate>Thu, 24 Oct 2024 20:35:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-47880|2024-10-24T20:21:49.595Z -- openrefine -- openrefine</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-47880</link>
      <description>OpenRefine is a free, open source tool for working with messy data. Prior to version 3.8.3, the `export-rows` command can be used in such a way that it reflects part of the request verbatim, with a Content-Type header also taken from the request. An attacker could lead a user to a malicious page that submits a form POST that contains  embedded JavaScript code. This code would then be included in the response, along with an attacker-controlled `Content-Type` header, and so potentially executed in the victim's browser as if it was part of OpenRefine. The attacker-provided code can do anything the user can do, including deleting projects, retrieving database passwords, or executing arbitrary Jython or Closure expressions, if those extensions are also present. The attacker must know a valid project ID of a project that contains at least one row. Version 3.8.3 fixes the issue.</description>
      <guid isPermaLink="false">CVE-2024-47880|2024-10-24T20:21:49.595Z</guid>
      <pubDate>Thu, 24 Oct 2024 20:21:49 +0000</pubDate>
    </item>
  </channel>
</rss>
