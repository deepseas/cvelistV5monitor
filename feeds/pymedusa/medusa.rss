<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for pymedusa -- Medusa</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/pymedusa/medusa.rss</link>
    <description>The latest CVEs for pymedusa -- Medusa</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 04 Jun 2024 17:29:34 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-50258|2023-12-22T16:55:58.406Z -- pymedusa -- medusa
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-50258</link>
      <description>Medusa is an automatic video library manager for TV shows. Versions prior to 1.0.19 are vulnerable to unauthenticated blind server-side request forgery (SSRF). The `testDiscord` request handler in `medusa/server/web/home/handler.py` does not validate the user-controlled `discord_webhook` variable and passes it to the `notifiers.discord_notifier.test_notify` method, then `_notify_discord` and finally `_send_discord_msg` method,  which sends a POST request to the user-controlled URL on line 64 in `/medusa/notifiers/discord.py`, which leads to a blind server-side request forgery. This issue allows for crafting POST requests on behalf of the Medusa server. Version 1.0.19 contains a fix for the issue.</description>
      <guid isPermaLink="false">CVE-2023-50258|2023-12-22T16:55:58.406Z</guid>
      <pubDate>Fri, 22 Dec 2023 16:55:58 +0000</pubDate>
    </item>
  </channel>
</rss>
