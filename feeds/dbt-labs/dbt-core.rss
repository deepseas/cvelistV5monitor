<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for dbt-labs -- dbt-core</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/dbt-labs/dbt-core.rss</link>
    <description>The latest CVEs for dbt-labs -- dbt-core</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 16 Jul 2024 23:23:46 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-40637|2024-07-16T22:56:35.541Z -- dbt-labs -- dbt-core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40637</link>
      <description>dbt enables data analysts and engineers to transform their data using the same practices that software engineers use to build applications. When a user installs a package in dbt, it has the ability to override macros, materializations, and other core components of dbt. This is by design, as it allows packages to extend and customize dbt's functionality. However, this also means that a malicious package could potentially override these components with harmful code. This issue has been fixed in versions 1.8.0, 1.6.14 and 1.7.14. Users are advised to upgrade. There are no kn own workarounds for this vulnerability. Users updating to either 1.6.14 or 1.7.14 will need to set `flags.require_explicit_package_overrides_for_builtin_materializations: False` in their configuration in `dbt_project.yml`.</description>
      <guid isPermaLink="false">CVE-2024-40637|2024-07-16T22:56:35.541Z</guid>
      <pubDate>Tue, 16 Jul 2024 22:56:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-36105|2024-05-27T17:17:39.875Z -- dbt-labs -- dbt-core</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-36105</link>
      <description>dbt enables data analysts and engineers to transform their data using the same practices that software engineers use to build applications. Prior to versions 1.6.15, 1.7.15, and 1.8.1, Binding to `INADDR_ANY (0.0.0.0)` or `IN6ADDR_ANY (::)` exposes an application on all network interfaces, increasing the risk of unauthorized access. As stated in the Python docs, a special form for address is accepted instead of a host address: `''` represents `INADDR_ANY`, equivalent to `"0.0.0.0"`. On systems with IPv6, '' represents `IN6ADDR_ANY`, which is equivalent to `"::"`. A user who serves docs on an unsecured public network, may unknowingly be hosting an unsecured (http) web site for any remote user/system to access on the same network. The issue has has been mitigated in dbt-core v1.6.15, dbt-core v1.7.15, and dbt-core v1.8.1 by binding to localhost explicitly by default in `dbt docs serve`.</description>
      <guid isPermaLink="false">CVE-2024-36105|2024-05-27T17:17:39.875Z</guid>
      <pubDate>Mon, 27 May 2024 17:17:39 +0000</pubDate>
    </item>
  </channel>
</rss>
