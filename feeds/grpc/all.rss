<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for grpc -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/grpc/all.rss</link>
    <description>The latest CVEs for grpc -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 05:22:23 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-24777|2024-08-03T04:20:50.490Z -- grpc -- grpc-swift
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-24777</link>
      <description>grpc-swift is the Swift language implementation of gRPC, a remote procedure call (RPC) framework. Prior to version 1.7.2, a grpc-swift server is vulnerable to a denial of service attack via a reachable assertion. This is due to incorrect logic when handling GOAWAY frames. The attack is low-effort: it takes very little resources to construct and send the required sequence of frames. The impact on availability is high as the server will crash, dropping all in flight connections and requests. This issue is fixed in version 1.7.2. There are currently no known workarounds.</description>
      <guid isPermaLink="false">CVE-2022-24777|2024-08-03T04:20:50.490Z</guid>
      <pubDate>Fri, 25 Mar 2022 16:35:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37168|2024-06-11T14:05:45.075Z -- grpc -- grpc-node</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-37168</link>
      <description>@grpc/grps-js implements the core functionality of gRPC purely in JavaScript, without a C++ addon. Prior to versions 1.10.9, 1.9.15, and 1.8.22, there are two separate code paths in which memory can be allocated per message in excess of the `grpc.max_receive_message_length` channel option: If an incoming message has a size on the wire greater than the configured limit, the entire message is buffered before it is discarded; and/or if an incoming message has a size within the limit on the wire but decompresses to a size greater than the limit, the entire message is decompressed into memory, and on the server is not discarded. This has been patched in versions 1.10.9, 1.9.15, and 1.8.22.</description>
      <guid isPermaLink="false">CVE-2024-37168|2024-06-11T14:05:45.075Z</guid>
      <pubDate>Mon, 10 Jun 2024 21:32:06 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37168|2024-08-02T03:50:55.550Z -- grpc -- grpc-node</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37168</link>
      <description>@grpc/grps-js implements the core functionality of gRPC purely in JavaScript, without a C++ addon. Prior to versions 1.10.9, 1.9.15, and 1.8.22, there are two separate code paths in which memory can be allocated per message in excess of the `grpc.max_receive_message_length` channel option: If an incoming message has a size on the wire greater than the configured limit, the entire message is buffered before it is discarded; and/or if an incoming message has a size within the limit on the wire but decompresses to a size greater than the limit, the entire message is decompressed into memory, and on the server is not discarded. This has been patched in versions 1.10.9, 1.9.15, and 1.8.22.</description>
      <guid isPermaLink="false">CVE-2024-37168|2024-08-02T03:50:55.550Z</guid>
      <pubDate>Mon, 10 Jun 2024 21:32:06 +0000</pubDate>
    </item>
  </channel>
</rss>
