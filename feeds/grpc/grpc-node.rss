<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for grpc -- grpc-node</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/grpc/grpc-node.rss</link>
    <description>The latest CVEs for grpc -- grpc-node</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 04:24:31 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-37168|2024-08-02T03:50:55.550Z -- grpc -- grpc-node
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37168</link>
      <description>@grpc/grps-js implements the core functionality of gRPC purely in JavaScript, without a C++ addon. Prior to versions 1.10.9, 1.9.15, and 1.8.22, there are two separate code paths in which memory can be allocated per message in excess of the `grpc.max_receive_message_length` channel option: If an incoming message has a size on the wire greater than the configured limit, the entire message is buffered before it is discarded; and/or if an incoming message has a size within the limit on the wire but decompresses to a size greater than the limit, the entire message is decompressed into memory, and on the server is not discarded. This has been patched in versions 1.10.9, 1.9.15, and 1.8.22.
</description>
      <guid isPermaLink="false">CVE-2024-37168|2024-08-02T03:50:55.550Z</guid>
      <pubDate>Mon, 10 Jun 2024 21:32:06 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37168|2024-06-11T14:05:45.075Z -- grpc -- grpc-node</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-37168</link>
      <description>@grpc/grps-js implements the core functionality of gRPC purely in JavaScript, without a C++ addon. Prior to versions 1.10.9, 1.9.15, and 1.8.22, there are two separate code paths in which memory can be allocated per message in excess of the `grpc.max_receive_message_length` channel option: If an incoming message has a size on the wire greater than the configured limit, the entire message is buffered before it is discarded; and/or if an incoming message has a size within the limit on the wire but decompresses to a size greater than the limit, the entire message is decompressed into memory, and on the server is not discarded. This has been patched in versions 1.10.9, 1.9.15, and 1.8.22.</description>
      <guid isPermaLink="false">CVE-2024-37168|2024-06-11T14:05:45.075Z</guid>
      <pubDate>Mon, 10 Jun 2024 21:32:06 +0000</pubDate>
    </item>
  </channel>
</rss>
