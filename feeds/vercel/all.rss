<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for vercel -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/vercel/all.rss</link>
    <description>The latest CVEs for vercel -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Wed, 18 Sep 2024 14:23:14 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-46982|2024-09-18T13:45:21.409Z -- vercel -- next.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-46982</link>
      <description>Next.js is a React framework for building full-stack web applications. By sending a crafted HTTP request, it is possible to poison the cache of a non-dynamic server-side rendered route in the pages router (this does not affect the app router). When this crafted request is sent it could coerce Next.js to cache a route that is meant to not be cached and send a `Cache-Control: s-maxage=1, stale-while-revalidate` header which some upstream CDNs may cache as well. To be potentially affected all of the following must apply: 1. Next.js between 13.5.1 and 14.2.9, 2. Using pages router, &amp; 3. Using non-dynamic server-side rendered routes e.g. `pages/dashboard.tsx` not `pages/blog/[slug].tsx`. This vulnerability was resolved in Next.js v13.5.7, v14.2.10, and later. We recommend upgrading regardless of whether you can reproduce the issue or not. There are no official or recommended workarounds for this issue, we recommend that users patch to a safe version.</description>
      <guid isPermaLink="false">CVE-2024-46982|2024-09-18T13:45:21.409Z</guid>
      <pubDate>Tue, 17 Sep 2024 21:55:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34350|2024-08-02T02:51:11.331Z -- vercel -- next.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-34350</link>
      <description>Next.js is a React framework that can provide building blocks to create web applications. Prior to 13.5.1, an inconsistent interpretation of a crafted HTTP request meant that requests are treated as both a single request, and two separate requests by Next.js, leading to desynchronized responses. This led to a response queue poisoning vulnerability in the affected Next.js versions. For a request to be exploitable, the affected route also had to be making use of the [rewrites](https://nextjs.org/docs/app/api-reference/next-config-js/rewrites) feature in Next.js. The vulnerability is resolved in Next.js `13.5.1` and newer.</description>
      <guid isPermaLink="false">CVE-2024-34350|2024-08-02T02:51:11.331Z</guid>
      <pubDate>Thu, 09 May 2024 16:07:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34351|2024-08-02T02:51:09.867Z -- vercel -- next.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-34351</link>
      <description>Next.js is a React framework that can provide building blocks to create web applications. A Server-Side Request Forgery (SSRF) vulnerability was identified in Next.js Server Actions. If the `Host` header is modified, and the below conditions are also met, an attacker may be able to make requests that appear to be originating from the Next.js application server itself. The required conditions are 1) Next.js is running in a self-hosted manner; 2) the Next.js application makes use of Server Actions; and 3) the Server Action performs a redirect to a relative path which starts with a `/`. This vulnerability was fixed in Next.js `14.1.1`.</description>
      <guid isPermaLink="false">CVE-2024-34351|2024-08-02T02:51:09.867Z</guid>
      <pubDate>Thu, 09 May 2024 16:14:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39693|2024-07-10T19:54:10.773Z -- vercel -- next.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39693</link>
      <description>Next.js is a React framework. A Denial of Service (DoS) condition was identified in Next.js. Exploitation of the bug can trigger a crash, affecting the availability of the server. his vulnerability was resolved in Next.js 13.5 and later.</description>
      <guid isPermaLink="false">CVE-2024-39693|2024-07-10T19:54:10.773Z</guid>
      <pubDate>Wed, 10 Jul 2024 19:54:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34350|2024-06-04T17:41:25.563Z -- vercel -- next.js</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34350</link>
      <description>Next.js is a React framework that can provide building blocks to create web applications. Prior to 13.5.1, an inconsistent interpretation of a crafted HTTP request meant that requests are treated as both a single request, and two separate requests by Next.js, leading to desynchronized responses. This led to a response queue poisoning vulnerability in the affected Next.js versions. For a request to be exploitable, the affected route also had to be making use of the [rewrites](https://nextjs.org/docs/app/api-reference/next-config-js/rewrites) feature in Next.js. The vulnerability is resolved in Next.js `13.5.1` and newer.</description>
      <guid isPermaLink="false">CVE-2024-34350|2024-06-04T17:41:25.563Z</guid>
      <pubDate>Thu, 09 May 2024 16:07:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34351|2024-06-04T17:41:46.205Z -- vercel -- next.js</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34351</link>
      <description>Next.js is a React framework that can provide building blocks to create web applications. A Server-Side Request Forgery (SSRF) vulnerability was identified in Next.js Server Actions. If the `Host` header is modified, and the below conditions are also met, an attacker may be able to make requests that appear to be originating from the Next.js application server itself. The required conditions are 1) Next.js is running in a self-hosted manner; 2) the Next.js application makes use of Server Actions; and 3) the Server Action performs a redirect to a relative path which starts with a `/`. This vulnerability was fixed in Next.js `14.1.1`.</description>
      <guid isPermaLink="false">CVE-2024-34351|2024-06-04T17:41:46.205Z</guid>
      <pubDate>Thu, 09 May 2024 16:14:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39693|2024-07-11T18:07:28.029Z -- vercel -- next.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39693</link>
      <description>Next.js is a React framework. A Denial of Service (DoS) condition was identified in Next.js. Exploitation of the bug can trigger a crash, affecting the availability of the server. his vulnerability was resolved in Next.js 13.5 and later.</description>
      <guid isPermaLink="false">CVE-2024-39693|2024-07-11T18:07:28.029Z</guid>
      <pubDate>Wed, 10 Jul 2024 19:54:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39693|2024-08-02T04:26:15.970Z -- vercel -- next.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39693</link>
      <description>Next.js is a React framework. A Denial of Service (DoS) condition was identified in Next.js. Exploitation of the bug can trigger a crash, affecting the availability of the server. his vulnerability was resolved in Next.js 13.5 and later.</description>
      <guid isPermaLink="false">CVE-2024-39693|2024-08-02T04:26:15.970Z</guid>
      <pubDate>Wed, 10 Jul 2024 19:54:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-46982|2024-09-17T21:55:04.312Z -- vercel -- next.js</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-46982</link>
      <description>Next.js is a React framework for building full-stack web applications. By sending a crafted HTTP request, it is possible to poison the cache of a non-dynamic server-side rendered route in the pages router (this does not affect the app router). When this crafted request is sent it could coerce Next.js to cache a route that is meant to not be cached and send a `Cache-Control: s-maxage=1, stale-while-revalidate` header which some upstream CDNs may cache as well. To be potentially affected all of the following must apply: 1. Next.js between 13.5.1 and 14.2.9, 2. Using pages router, &amp; 3. Using non-dynamic server-side rendered routes e.g. `pages/dashboard.tsx` not `pages/blog/[slug].tsx`. This vulnerability was resolved in Next.js v13.5.7, v14.2.10, and later. We recommend upgrading regardless of whether you can reproduce the issue or not. There are no official or recommended workarounds for this issue, we recommend that users patch to a safe version.</description>
      <guid isPermaLink="false">CVE-2024-46982|2024-09-17T21:55:04.312Z</guid>
      <pubDate>Tue, 17 Sep 2024 21:55:04 +0000</pubDate>
    </item>
  </channel>
</rss>
