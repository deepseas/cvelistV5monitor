<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for marmelab -- react-admin</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/marmelab/react-admin.rss</link>
    <description>The latest CVEs for marmelab -- react-admin</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 16:24:56 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-25572|2024-08-02T11:25:19.194Z -- marmelab -- react-admin
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-25572</link>
      <description>react-admin is a frontend framework for building browser applications on top of REST/GraphQL APIs. react-admin prior to versions 3.19.12 and 4.7.6, along with ra-ui-materialui prior to 3.19.12 and 4.7.6, are vulnerable to cross-site scripting. All React applications built with react-admin and using the `&lt;RichTextField&gt;` are affected. `&lt;RichTextField&gt;` outputs the field value using `dangerouslySetInnerHTML` without client-side sanitization. If the data isn't sanitized server-side, this opens a possible cross-site scripting (XSS) attack. Versions 3.19.12 and 4.7.6 now use `DOMPurify` to escape the HTML before outputting it with React and `dangerouslySetInnerHTML`. Users who already sanitize HTML data server-side do not need to upgrade. As a workaround, users may replace the `&lt;RichTextField&gt;` by a custom field doing sanitization by hand.
</description>
      <guid isPermaLink="false">CVE-2023-25572|2024-08-02T11:25:19.194Z</guid>
      <pubDate>Mon, 13 Feb 2023 20:49:54 +0000</pubDate>
    </item>
  </channel>
</rss>
