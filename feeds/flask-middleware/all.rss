<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Flask-Middleware -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/flask-middleware/all.rss</link>
    <description>The latest CVEs for Flask-Middleware -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 20:22:21 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-21241|2024-08-03T18:09:15.009Z -- flask-middleware -- flask-security-too
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-21241</link>
      <description>The Python "Flask-Security-Too" package is used for adding security features to your Flask application. It is an is a independently maintained version of Flask-Security based on the 3.0.0 version of Flask-Security. In Flask-Security-Too from version 3.3.0 and before version 3.4.5, the /login and /change endpoints can return the authenticated user's authentication token in response to a GET request. Since GET requests aren't protected with a CSRF token, this could lead to a malicious 3rd party site acquiring the authentication token. Version 3.4.5 and version 4.0.0 are patched. As a workaround, if you aren't using authentication tokens - you can set the SECURITY_TOKEN_MAX_AGE to "0" (seconds) which should make the token unusable.</description>
      <guid isPermaLink="false">CVE-2021-21241|2024-08-03T18:09:15.009Z</guid>
      <pubDate>Mon, 11 Jan 2021 20:35:16 +0000</pubDate>
    </item>
  </channel>
</rss>
