<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>CVE Feed for Byron -- gitoxide</title><link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/Byron/gitoxide.rss</link><description>The latest CVEs for Byron -- gitoxide</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><lastBuildDate>Thu, 23 May 2024 20:21:57 +0000</lastBuildDate><ttl>60</ttl><item><title>CVE-2024-35186|2024-05-23T08:55:20.653Z -- Byron -- gitoxide
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35186</link><description>gitoxide is a pure Rust implementation of Git. During checkout, `gix-worktree-state` does not verify that paths point to locations in the working tree. A specially crafted repository can, when cloned, place new files anywhere writable by the application. This vulnerability leads to a major loss of confidentiality, integrity, and availability, but creating files outside a working tree without attempting to execute code can directly impact integrity as well. This vulnerability has been patched in version(s) 0.36.0.</description><guid isPermaLink="false">CVE-2024-35186|2024-05-23T08:55:20.653Z</guid><pubDate>Thu, 23 May 2024 08:55:20 +0000</pubDate></item><item><title>CVE-2024-35197|2024-05-23T12:09:09.044Z -- Byron -- gitoxide
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35197</link><description>gitoxide is a pure Rust implementation of Git. On Windows, fetching refs that clash with legacy device names reads from the devices, and checking out paths that clash with such names writes arbitrary data to the devices. This allows a repository, when cloned, to cause indefinite blocking or the production of arbitrary message that appear to have come from the application, and potentially other harmful effects under limited circumstances. If Windows is not used, or untrusted repositories are not cloned or otherwise used, then there is no impact. A minor degradation in availability may also be possible, such as with a very large file named `CON`, though the user could interrupt the application.</description><guid isPermaLink="false">CVE-2024-35197|2024-05-23T12:09:09.044Z</guid><pubDate>Thu, 23 May 2024 12:09:09 +0000</pubDate></item><item><title>CVE-2024-35197|2024-05-23T12:09:09.044Z -- Byron -- gitoxide</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35197</link><description>gitoxide is a pure Rust implementation of Git. On Windows, fetching refs that clash with legacy device names reads from the devices, and checking out paths that clash with such names writes arbitrary data to the devices. This allows a repository, when cloned, to cause indefinite blocking or the production of arbitrary message that appear to have come from the application, and potentially other harmful effects under limited circumstances. If Windows is not used, or untrusted repositories are not cloned or otherwise used, then there is no impact. A minor degradation in availability may also be possible, such as with a very large file named `CON`, though the user could interrupt the application.</description><guid isPermaLink="false">CVE-2024-35197|2024-05-23T12:09:09.044Z</guid><pubDate>Thu, 23 May 2024 12:09:09 +0000</pubDate></item><item><title>CVE-2024-35186|2024-05-23T08:55:20.653Z -- Byron -- gitoxide</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35186</link><description>gitoxide is a pure Rust implementation of Git. During checkout, `gix-worktree-state` does not verify that paths point to locations in the working tree. A specially crafted repository can, when cloned, place new files anywhere writable by the application. This vulnerability leads to a major loss of confidentiality, integrity, and availability, but creating files outside a working tree without attempting to execute code can directly impact integrity as well. This vulnerability has been patched in version(s) 0.36.0.</description><guid isPermaLink="false">CVE-2024-35186|2024-05-23T08:55:20.653Z</guid><pubDate>Thu, 23 May 2024 08:55:20 +0000</pubDate></item></channel></rss>