<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>CVE Feed for moby -- all</title><link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/moby/all.rss</link><description>The latest CVEs for moby -- all</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><lastBuildDate>Tue, 28 May 2024 21:54:25 +0000</lastBuildDate><ttl>60</ttl><item><title>CVE-2024-29018|2024-03-20T20:27:00.491Z -- moby -- moby
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29018</link><description>Moby is an open source container framework that is a key component of Docker Engine, Docker Desktop, and other distributions of container tooling or runtimes. Moby's networking implementation allows for many networks, each with their own IP address range and gateway, to be defined. This feature is frequently referred to as custom networks, as each network can have a different driver, set of parameters and thus behaviors. When creating a network, the `--internal` flag is used to designate a network as _internal_. The `internal` attribute in a docker-compose.yml file may also be used to mark a network _internal_, and other API clients may specify the `internal` parameter as well.

When containers with networking are created, they are assigned unique network interfaces and IP addresses. The host serves as a router for non-internal networks, with a gateway IP that provides SNAT/DNAT to/from container IPs.

Containers on an internal network may communicate between each other, but are precluded from communicating with any networks the host has access to (LAN or WAN) as no default route is configured, and firewall rules are set up to drop all outgoing traffic. Communication with the gateway IP address (and thus appropriately configured host services) is possible, and the host may communicate with any container IP directly.

In addition to configuring the Linux kernel's various networking features to enable container networking, `dockerd` directly provides some services to container networks. Principal among these is serving as a resolver, enabling service discovery, and resolution of names from an upstream resolver.

When a DNS request for a name that does not correspond to a container is received, the request is forwarded to the configured upstream resolver. This request is made from the container's network namespace: the level of access and routing of traffic is the same as if the request was made by the container itself.

As a consequence of this design, containers solely attached to an internal network will be unable to resolve names using the upstream resolver, as the container itself is unable to communicate with that nameserver. Only the names of containers also attached to the internal network are able to be resolved.

Many systems run a local forwarding DNS resolver. As the host and any containers have separate loopback devices, a consequence of the design described above is that containers are unable to resolve names from the host's configured resolver, as they cannot reach these addresses on the host loopback device. To bridge this gap, and to allow containers to properly resolve names even when a local forwarding resolver is used on a loopback address, `dockerd` detects this scenario and instead forward DNS requests from the host namework namespace. The loopback resolver then forwards the requests to its configured upstream resolvers, as expected.

Because `dockerd` forwards DNS requests to the host loopback device, bypassing the container network namespace's normal routing semantics entirely, internal networks can unexpectedly forward DNS requests to an external nameserver. By registering a domain for which they control the authoritative nameservers, an attacker could arrange for a compromised container to exfiltrate data by encoding it in DNS queries that will eventually be answered by their nameservers.

Docker Desktop is not affected, as Docker Desktop always runs an internal resolver on a RFC 1918 address.

Moby releases 26.0.0, 25.0.4, and 23.0.11 are patched to prevent forwarding any DNS requests from internal networks. As a workaround, run containers intended to be solely attached to internal networks with a custom upstream address, which will force all upstream DNS queries to be resolved from the container's network namespace.</description><guid isPermaLink="false">CVE-2024-29018|2024-03-20T20:27:00.491Z</guid><pubDate>Wed, 20 Mar 2024 20:27:00 +0000</pubDate></item><item><title>CVE-2024-32473|2024-04-18T21:55:50.445Z -- moby -- moby
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32473</link><description>Moby is an open source container framework that is a key component of Docker Engine, Docker Desktop, and other distributions of container tooling or runtimes. In 26.0.0, IPv6 is not disabled on network interfaces, including those belonging to networks where `--ipv6=false`. An container with an `ipvlan` or `macvlan` interface will normally be configured to share an external network link with the host machine. Because of this direct access, (1) Containers may be able to communicate with other hosts on the local network over link-local IPv6 addresses, (2) if router advertisements are being broadcast over the local network, containers may get SLAAC-assigned addresses, and (3) the interface  will be a member of IPv6 multicast groups. This means interfaces in IPv4-only networks present an unexpectedly and unnecessarily increased attack surface. The issue is patched in 26.0.2. To completely disable IPv6 in a container, use `--sysctl=net.ipv6.conf.all.disable_ipv6=1` in the `docker create` or `docker run` command. Or, in the service configuration of a `compose` file.</description><guid isPermaLink="false">CVE-2024-32473|2024-04-18T21:55:50.445Z</guid><pubDate>Thu, 18 Apr 2024 21:55:50 +0000</pubDate></item><item><title>CVE-2024-23652|2024-01-31T21:57:42.774Z -- moby -- buildkit
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23652</link><description>BuildKit is a toolkit for converting source code to build artifacts in an efficient, expressive and repeatable manner. A malicious BuildKit frontend or Dockerfile using RUN --mount could trick the feature that removes empty files created for the mountpoints into removing a file outside the container, from the host system. The issue has been fixed in v0.12.5. Workarounds include avoiding using BuildKit frontends from an untrusted source or building an untrusted Dockerfile containing RUN --mount feature.</description><guid isPermaLink="false">CVE-2024-23652|2024-01-31T21:57:42.774Z</guid><pubDate>Wed, 31 Jan 2024 21:57:42 +0000</pubDate></item><item><title>CVE-2024-23653|2024-01-31T22:03:56.667Z -- moby -- buildkit
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23653</link><description>BuildKit is a toolkit for converting source code to build artifacts in an efficient, expressive and repeatable manner. In addition to running containers as build steps, BuildKit also provides APIs for running interactive containers based on built images. It was possible to use these APIs to ask BuildKit to run a container with elevated privileges. Normally, running such containers is only allowed if special `security.insecure` entitlement is enabled both by buildkitd configuration and allowed by the user initializing the build request. The issue has been fixed in v0.12.5 . Avoid using BuildKit frontends from untrusted sources. 
</description><guid isPermaLink="false">CVE-2024-23653|2024-01-31T22:03:56.667Z</guid><pubDate>Wed, 31 Jan 2024 22:03:56 +0000</pubDate></item><item><title>CVE-2024-23650|2024-01-31T21:42:13.382Z -- moby -- buildkit
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23650</link><description>BuildKit is a toolkit for converting source code to build artifacts in an efficient, expressive and repeatable manner. A malicious BuildKit client or frontend could craft a request that could lead to BuildKit daemon crashing with a panic. The issue has been fixed in v0.12.5. As a workaround, avoid using BuildKit frontends from untrusted sources.
</description><guid isPermaLink="false">CVE-2024-23650|2024-01-31T21:42:13.382Z</guid><pubDate>Wed, 31 Jan 2024 21:42:13 +0000</pubDate></item><item><title>CVE-2024-23651|2024-01-31T22:00:36.755Z -- moby -- buildkit
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23651</link><description>BuildKit is a toolkit for converting source code to build artifacts in an efficient, expressive and repeatable manner. Two malicious build steps running in parallel sharing the same cache mounts with subpaths could cause a race condition that can lead to files from the host system being accessible to the build container. The issue has been fixed in v0.12.5. Workarounds include, avoiding using BuildKit frontend from an untrusted source or building an untrusted Dockerfile containing cache mounts with --mount=type=cache,source=... options.
</description><guid isPermaLink="false">CVE-2024-23651|2024-01-31T22:00:36.755Z</guid><pubDate>Wed, 31 Jan 2024 21:49:18 +0000</pubDate></item><item><title>CVE-2024-24557|2024-02-01T17:38:40.747Z -- moby -- moby
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-24557</link><description>Moby is an open-source project created by Docker to enable software containerization. The classic builder cache system is prone to cache poisoning if the image is built FROM scratch. Also, changes to some instructions (most important being HEALTHCHECK and ONBUILD) would not cause a cache miss. An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps. 23.0+ users are only affected if they explicitly opted out of Buildkit (DOCKER_BUILDKIT=0 environment variable) or are using the /build API endpoint. All users on versions older than 23.0 could be impacted. Image build API endpoint (/build) and ImageBuild function from github.com/docker/docker/client is also affected as it the uses classic builder by default. Patches are included in 24.0.9 and 25.0.2 releases.</description><guid isPermaLink="false">CVE-2024-24557|2024-02-01T17:38:40.747Z</guid><pubDate>Thu, 01 Feb 2024 16:26:29 +0000</pubDate></item></channel></rss>