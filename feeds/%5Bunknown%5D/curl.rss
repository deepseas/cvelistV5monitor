<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for [UNKNOWN] -- curl</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/%5Bunknown%5D/curl.rss</link>
    <description>The latest CVEs for [UNKNOWN] -- curl</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 05 Aug 2024 19:21:05 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2017-7468|2024-08-05T16:04:11.554Z -- %5Bunknown%5D -- curl
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-7468</link>
      <description>In curl and libcurl 7.52.0 to and including 7.53.1, libcurl would attempt to resume a TLS session even if the client certificate had changed. That is unacceptable since a server by specification is allowed to skip the client certificate check on resume, and may instead use the old identity which was established by the previous certificate (or no certificate). libcurl supports by default the use of TLS session id/ticket to resume previous TLS sessions to speed up subsequent TLS handshakes. They are used when for any reason an existing TLS connection couldn't be kept alive to make the next handshake faster. This flaw is a regression and identical to CVE-2016-5419 reported on August 3rd 2016, but affecting a different version range.</description>
      <guid isPermaLink="false">CVE-2017-7468|2024-08-05T16:04:11.554Z</guid>
      <pubDate>Mon, 16 Jul 2018 13:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-14618|2024-08-05T09:29:51.906Z -- %5Bunknown%5D -- curl
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-14618</link>
      <description>curl before version 7.61.1 is vulnerable to a buffer overrun in the NTLM authentication code. The internal function Curl_ntlm_core_mk_nt_hash multiplies the length of the password by two (SUM) to figure out how large temporary storage area to allocate from the heap. The length value is then subsequently used to iterate over the password and generate output into the allocated storage buffer. On systems with a 32 bit size_t, the math to calculate SUM triggers an integer overflow when the password length exceeds 2GB (2^31 bytes). This integer overflow usually causes a very small buffer to actually get allocated instead of the intended very huge one, making the use of that buffer end up in a heap buffer overflow. (This bug is almost identical to CVE-2017-8816.)</description>
      <guid isPermaLink="false">CVE-2018-14618|2024-08-05T09:29:51.906Z</guid>
      <pubDate>Wed, 05 Sep 2018 19:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
