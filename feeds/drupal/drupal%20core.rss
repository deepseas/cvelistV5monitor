<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Drupal -- Drupal Core</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/drupal/drupal%20core.rss</link>
    <description>The latest CVEs for Drupal -- Drupal Core</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 16 Sep 2024 22:22:36 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2019-6338|2024-09-16T18:38:30.675Z -- drupal -- drupal%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-6338</link>
      <description>In Drupal Core versions 7.x prior to 7.62, 8.6.x prior to 8.6.6 and 8.5.x prior to 8.5.9; Drupal core uses the third-party PEAR Archive_Tar library. This library has released a security update which impacts some Drupal configurations. Refer to CVE-2018-1000888 for details</description>
      <guid isPermaLink="false">CVE-2019-6338|2024-09-16T18:38:30.675Z</guid>
      <pubDate>Tue, 22 Jan 2019 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2017-6924|2024-09-16T16:57:56.911Z -- drupal -- drupal%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-6924</link>
      <description>In Drupal 8 prior to 8.3.7; When using the REST API, users without the correct permission can post comments via REST that are approved even if the user does not have permission to post approved comments. This issue only affects sites that have the RESTful Web Services (rest) module enabled, the comment entity REST resource enabled, and where an attacker can access a user account on the site with permissions to post comments, or where anonymous users can post comments.</description>
      <guid isPermaLink="false">CVE-2017-6924|2024-09-16T16:57:56.911Z</guid>
      <pubDate>Tue, 15 Jan 2019 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2017-6923|2024-09-16T17:42:46.607Z -- drupal -- drupal%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-6923</link>
      <description>In Drupal 8.x prior to 8.3.7 When creating a view, you can optionally use Ajax to update the displayed data via filter parameters. The views subsystem/module did not restrict access to the Ajax endpoint to only views configured to use Ajax. This is mitigated if you have access restrictions on the view. It is best practice to always include some form of access restrictions on all views, even if you are using another module to display them.</description>
      <guid isPermaLink="false">CVE-2017-6923|2024-09-16T17:42:46.607Z</guid>
      <pubDate>Tue, 22 Jan 2019 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2017-6922|2024-09-16T19:04:17.971Z -- drupal -- drupal%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-6922</link>
      <description>In Drupal core 8.x prior to 8.3.4 and Drupal core 7.x prior to 7.56; Private files that have been uploaded by an anonymous user but not permanently attached to content on the site should only be visible to the anonymous user that uploaded them, rather than all anonymous users. Drupal core did not previously provide this protection, allowing an access bypass vulnerability to occur. This issue is mitigated by the fact that in order to be affected, the site must allow anonymous users to upload files into a private file system.</description>
      <guid isPermaLink="false">CVE-2017-6922|2024-09-16T19:04:17.971Z</guid>
      <pubDate>Tue, 22 Jan 2019 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-6339|2024-09-16T20:06:38.516Z -- drupal -- drupal%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-6339</link>
      <description>In Drupal Core versions 7.x prior to 7.62, 8.6.x prior to 8.6.6 and 8.5.x prior to 8.5.9; A remote code execution vulnerability exists in PHP's built-in phar stream wrapper when performing file operations on an untrusted phar:// URI. Some Drupal code (core, contrib, and custom) may be performing file operations on insufficiently validated user input, thereby being exposed to this vulnerability. This vulnerability is mitigated by the fact that such code paths typically require access to an administrative permission or an atypical configuration.</description>
      <guid isPermaLink="false">CVE-2019-6339|2024-09-16T20:06:38.516Z</guid>
      <pubDate>Tue, 22 Jan 2019 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2017-6921|2024-09-16T19:47:08.043Z -- drupal -- drupal%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-6921</link>
      <description>In Drupal 8 prior to 8.3.4; The file REST resource does not properly validate some fields when manipulating files. A site is only affected by this if the site has the RESTful Web Services (rest) module enabled, the file REST resource is enabled and allows PATCH requests, and an attacker can get or register a user account on the site with permissions to upload files and to modify the file resource.</description>
      <guid isPermaLink="false">CVE-2017-6921|2024-09-16T19:47:08.043Z</guid>
      <pubDate>Tue, 15 Jan 2019 22:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-45440|2024-09-12T15:27:33.952572 -- drupal -- drupal%20core</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45440</link>
      <description>core/authorize.php in Drupal 11.x-dev allows Full Path Disclosure (even when error logging is None) if the value of hash_salt is file_get_contents of a file that does not exist.</description>
      <guid isPermaLink="false">CVE-2024-45440|2024-09-12T15:27:33.952572</guid>
      <pubDate>Thu, 29 Aug 2024 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
