<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Drupal -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/drupal/all.rss</link>
    <description>The latest CVEs for Drupal -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 05 Aug 2024 22:22:53 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2017-6377|2024-08-05T15:25:49.267Z -- drupal -- drupal%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-6377</link>
      <description>When adding a private file via the editor in Drupal 8.2.x before 8.2.7, the editor will not correctly check access for the file being attached, resulting in an access bypass.</description>
      <guid isPermaLink="false">CVE-2017-6377|2024-08-05T15:25:49.267Z</guid>
      <pubDate>Thu, 16 Mar 2017 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-7603|2024-08-05T06:31:04.972Z -- drupal -- 3rd%20party%20module%20-%20search%20autocomplete
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7603</link>
      <description>In Drupal's 3rd party module search auto complete prior to versions 7.x-4.8 there is a Cross Site Scripting vulnerability. This Search Autocomplete module enables you to autocomplete textfield using data from your website (nodes, comments, etc.). The module doesn't sufficiently filter user-entered text among the autocompletion items leading to a Cross Site Scripting (XSS) vulnerability. This vulnerability can be exploited by any user allowed to create one of the autocompletion item, for instance, nodes, users, comments.</description>
      <guid isPermaLink="false">CVE-2018-7603|2024-08-05T06:31:04.972Z</guid>
      <pubDate>Tue, 15 Jan 2019 22:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2017-6922|2024-08-05T15:49:01.343Z -- drupal -- drupal%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-6922</link>
      <description>In Drupal core 8.x prior to 8.3.4 and Drupal core 7.x prior to 7.56; Private files that have been uploaded by an anonymous user but not permanently attached to content on the site should only be visible to the anonymous user that uploaded them, rather than all anonymous users. Drupal core did not previously provide this protection, allowing an access bypass vulnerability to occur. This issue is mitigated by the fact that in order to be affected, the site must allow anonymous users to upload files into a private file system.</description>
      <guid isPermaLink="false">CVE-2017-6922|2024-08-05T15:49:01.343Z</guid>
      <pubDate>Tue, 22 Jan 2019 15:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2017-6379|2024-08-05T15:25:49.262Z -- drupal -- drupal%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-6379</link>
      <description>Some administrative paths in Drupal 8.2.x before 8.2.7 did not include protection for CSRF. This would allow an attacker to disable some blocks on a site. This issue is mitigated by the fact that users would have to know the block ID.</description>
      <guid isPermaLink="false">CVE-2017-6379|2024-08-05T15:25:49.262Z</guid>
      <pubDate>Thu, 16 Mar 2017 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2017-6921|2024-08-05T15:49:01.335Z -- drupal -- drupal%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-6921</link>
      <description>In Drupal 8 prior to 8.3.4; The file REST resource does not properly validate some fields when manipulating files. A site is only affected by this if the site has the RESTful Web Services (rest) module enabled, the file REST resource is enabled and allows PATCH requests, and an attacker can get or register a user account on the site with permissions to upload files and to modify the file resource.</description>
      <guid isPermaLink="false">CVE-2017-6921|2024-08-05T15:49:01.335Z</guid>
      <pubDate>Tue, 15 Jan 2019 22:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2017-6924|2024-08-05T15:49:02.244Z -- drupal -- drupal%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-6924</link>
      <description>In Drupal 8 prior to 8.3.7; When using the REST API, users without the correct permission can post comments via REST that are approved even if the user does not have permission to post approved comments. This issue only affects sites that have the RESTful Web Services (rest) module enabled, the comment entity REST resource enabled, and where an attacker can access a user account on the site with permissions to post comments, or where anonymous users can post comments.</description>
      <guid isPermaLink="false">CVE-2017-6924|2024-08-05T15:49:02.244Z</guid>
      <pubDate>Tue, 15 Jan 2019 20:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-7602|2024-08-05T06:31:04.989Z -- drupal -- core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-7602</link>
      <description>A remote code execution vulnerability exists within multiple subsystems of Drupal 7.x and 8.x. This potentially allows attackers to exploit multiple attack vectors on a Drupal site, which could result in the site being compromised. This vulnerability is related to Drupal core - Highly critical - Remote Code Execution - SA-CORE-2018-002. Both SA-CORE-2018-002 and this vulnerability are being exploited in the wild.</description>
      <guid isPermaLink="false">CVE-2018-7602|2024-08-05T06:31:04.989Z</guid>
      <pubDate>Thu, 19 Jul 2018 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2017-6381|2024-08-05T15:25:49.286Z -- drupal -- drupal%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-6381</link>
      <description>A 3rd party development library including with Drupal 8 development dependencies is vulnerable to remote code execution. This is mitigated by the default .htaccess protection against PHP execution, and the fact that Composer development dependencies aren't normal installed. You might be vulnerable to this if you are running a version of Drupal before 8.2.2. To be sure you aren't vulnerable, you can remove the &lt;siteroot&gt;/vendor/phpunit directory from your production deployments</description>
      <guid isPermaLink="false">CVE-2017-6381|2024-08-05T15:25:49.286Z</guid>
      <pubDate>Thu, 16 Mar 2017 14:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2017-6923|2024-08-05T15:49:02.709Z -- drupal -- drupal%20core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-6923</link>
      <description>In Drupal 8.x prior to 8.3.7 When creating a view, you can optionally use Ajax to update the displayed data via filter parameters. The views subsystem/module did not restrict access to the Ajax endpoint to only views configured to use Ajax. This is mitigated if you have access restrictions on the view. It is best practice to always include some form of access restrictions on all views, even if you are using another module to display them.</description>
      <guid isPermaLink="false">CVE-2017-6923|2024-08-05T15:49:02.709Z</guid>
      <pubDate>Tue, 22 Jan 2019 16:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
