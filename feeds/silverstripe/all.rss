<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for silverstripe -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/silverstripe/all.rss</link>
    <description>The latest CVEs for silverstripe -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 22:22:29 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-29254|2024-08-03T06:17:54.532Z -- silverstripe -- silverstripe-omnipay
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-29254</link>
      <description>silverstripe-omnipay is a SilverStripe integration with Omnipay PHP payments library. For a subset of Omnipay gateways (those that use intermediary states like `isNotification()` or `isRedirect()`), if the payment identifier or success URL is exposed it is possible for payments to be prematurely marked as completed without payment being taken. This is mitigated by the fact that most payment gateways hide this information from users, however some issuing banks offer flawed 3DSecure implementations that may inadvertently expose this data. The following versions have been patched to fix this issue: `2.5.2`, `3.0.2`, `3.1.4`, and `3.2.1`. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2022-29254|2024-08-03T06:17:54.532Z</guid>
      <pubDate>Mon, 06 Jun 2022 19:35:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29885|2024-08-02T01:17:58.155Z -- silverstripe -- silverstripe-reports</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29885</link>
      <description>silverstripe/reports is an API for creating backend reports in the Silverstripe Framework. In affected versions reports can be accessed by their direct URL by any user who has access to view the reports admin section, even if the `canView()` method for that report returns `false`. This issue has been addressed in version 5.2.3. All users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-29885|2024-08-02T01:17:58.155Z</guid>
      <pubDate>Wed, 17 Jul 2024 19:35:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29885|2024-07-17T20:55:01.983Z -- silverstripe -- silverstripe-reports</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29885</link>
      <description>silverstripe/reports is an API for creating backend reports in the Silverstripe Framework. In affected versions reports can be accessed by their direct URL by any user who has access to view the reports admin section, even if the `canView()` method for that report returns `false`. This issue has been addressed in version 5.2.3. All users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-29885|2024-07-17T20:55:01.983Z</guid>
      <pubDate>Wed, 17 Jul 2024 19:35:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29885|2024-07-17T19:35:58.914Z -- silverstripe -- silverstripe-reports</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29885</link>
      <description>silverstripe/reports is an API for creating backend reports in the Silverstripe Framework. In affected versions reports can be accessed by their direct URL by any user who has access to view the reports admin section, even if the `canView()` method for that report returns `false`. This issue has been addressed in version 5.2.3. All users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-29885|2024-07-17T19:35:58.914Z</guid>
      <pubDate>Wed, 17 Jul 2024 19:35:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32981|2024-07-17T19:36:00.563Z -- silverstripe -- silverstripe-framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32981</link>
      <description>Silverstripe framework is the PHP framework forming the base for the Silverstripe CMS. In affected versions a bad actor with access to edit content in the CMS could add send a specifically crafted encoded payload to the server, which could be used to inject a JavaScript payload on the front end of the site. The payload would be sanitised on the client-side, but server-side sanitisation doesn't catch it. The server-side sanitisation logic has been updated to sanitise against this type of attack in version 5.2.16. All users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-32981|2024-07-17T19:36:00.563Z</guid>
      <pubDate>Wed, 17 Jul 2024 19:36:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32981|2024-07-18T13:18:50.890Z -- silverstripe -- silverstripe-framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32981</link>
      <description>Silverstripe framework is the PHP framework forming the base for the Silverstripe CMS. In affected versions a bad actor with access to edit content in the CMS could add send a specifically crafted encoded payload to the server, which could be used to inject a JavaScript payload on the front end of the site. The payload would be sanitised on the client-side, but server-side sanitisation doesn't catch it. The server-side sanitisation logic has been updated to sanitise against this type of attack in version 5.2.16. All users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-32981|2024-07-18T13:18:50.890Z</guid>
      <pubDate>Wed, 17 Jul 2024 19:36:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32981|2024-08-02T02:27:53.196Z -- silverstripe -- silverstripe-framework</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32981</link>
      <description>Silverstripe framework is the PHP framework forming the base for the Silverstripe CMS. In affected versions a bad actor with access to edit content in the CMS could add send a specifically crafted encoded payload to the server, which could be used to inject a JavaScript payload on the front end of the site. The payload would be sanitised on the client-side, but server-side sanitisation doesn't catch it. The server-side sanitisation logic has been updated to sanitise against this type of attack in version 5.2.16. All users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-32981|2024-08-02T02:27:53.196Z</guid>
      <pubDate>Wed, 17 Jul 2024 19:36:00 +0000</pubDate>
    </item>
  </channel>
</rss>
