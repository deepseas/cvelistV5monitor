<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for sigstore -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/sigstore/all.rss</link>
    <description>The latest CVEs for sigstore -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 03 Sep 2024 19:20:17 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-47122|2024-09-03T15:24:07.931Z -- sigstore -- gitsign
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-47122</link>
      <description>Gitsign is software for keyless Git signing using Sigstore. In versions of gitsign starting with 0.6.0 and prior to 0.8.0, Rekor public keys were fetched via the Rekor API, instead of through the local TUF client. If the upstream Rekor server happened to be compromised, gitsign clients could potentially be tricked into trusting incorrect signatures. There is no known compromise the default public good instance (`rekor.sigstore.dev`) - anyone using this instance is unaffected. This issue was fixed in v0.8.0. No known workarounds are available.</description>
      <guid isPermaLink="false">CVE-2023-47122|2024-09-03T15:24:07.931Z</guid>
      <pubDate>Fri, 10 Nov 2023 21:33:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29903|2024-07-03T18:10:27.323Z -- sigstore -- cosign</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29903</link>
      <description>Cosign provides code signing and transparency for containers and binaries. Prior to version 2.2.4, maliciously-crafted software artifacts can cause denial of service of the machine running Cosign thereby impacting all services on the machine. The root cause is that Cosign creates slices based on the number of signatures, manifests or attestations in untrusted artifacts. As such, the untrusted artifact can control the amount of memory that Cosign allocates. The exact issue is Cosign allocates excessive memory on the lines that creates a slice of the same length as the manifests. Version 2.2.4 contains a patch for the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-29903|2024-07-03T18:10:27.323Z</guid>
      <pubDate>Wed, 10 Apr 2024 22:30:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29903|2024-04-10T22:30:50.890Z -- sigstore -- cosign</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29903</link>
      <description>Cosign provides code signing and transparency for containers and binaries. Prior to version 2.2.4, maliciously-crafted software artifacts can cause denial of service of the machine running Cosign thereby impacting all services on the machine. The root cause is that Cosign creates slices based on the number of signatures, manifests or attestations in untrusted artifacts. As such, the untrusted artifact can control the amount of memory that Cosign allocates. The exact issue is Cosign allocates excessive memory on the lines that creates a slice of the same length as the manifests. Version 2.2.4 contains a patch for the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-29903|2024-04-10T22:30:50.890Z</guid>
      <pubDate>Wed, 10 Apr 2024 22:30:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29902|2024-06-04T17:57:24.059Z -- sigstore -- cosign</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29902</link>
      <description>Cosign provides code signing and transparency for containers and binaries. Prior to version 2.2.4, a remote image with a malicious attachment can cause denial of service of the host machine running Cosign. This can impact other services on the machine that rely on having memory available such as a Redis database which can result in data loss. It can also impact the availability of other services on the machine that will not be available for the duration of the machine denial. The root cause of this issue is that Cosign reads the attachment from a remote image entirely into memory without checking the size of the attachment first. As such, a large attachment can make Cosign read a large attachment into memory; If the attachments size is larger than the machine has memory available, the machine will be denied of service. The Go runtime will make a SigKill after a few seconds of system-wide denial. This issue can allow a supply-chain escalation from a compromised registry to the Cosign user: If an attacher has compromised a registry or the account of an image vendor, they can include a malicious attachment and hurt the image consumer. Version 2.2.4 contains a patch for the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-29902|2024-06-04T17:57:24.059Z</guid>
      <pubDate>Wed, 10 Apr 2024 22:28:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29902|2024-08-02T01:17:58.609Z -- sigstore -- cosign</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29902</link>
      <description>Cosign provides code signing and transparency for containers and binaries. Prior to version 2.2.4, a remote image with a malicious attachment can cause denial of service of the host machine running Cosign. This can impact other services on the machine that rely on having memory available such as a Redis database which can result in data loss. It can also impact the availability of other services on the machine that will not be available for the duration of the machine denial. The root cause of this issue is that Cosign reads the attachment from a remote image entirely into memory without checking the size of the attachment first. As such, a large attachment can make Cosign read a large attachment into memory; If the attachments size is larger than the machine has memory available, the machine will be denied of service. The Go runtime will make a SigKill after a few seconds of system-wide denial. This issue can allow a supply-chain escalation from a compromised registry to the Cosign user: If an attacher has compromised a registry or the account of an image vendor, they can include a malicious attachment and hurt the image consumer. Version 2.2.4 contains a patch for the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-29902|2024-08-02T01:17:58.609Z</guid>
      <pubDate>Wed, 10 Apr 2024 22:28:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29903|2024-08-02T01:17:58.600Z -- sigstore -- cosign</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29903</link>
      <description>Cosign provides code signing and transparency for containers and binaries. Prior to version 2.2.4, maliciously-crafted software artifacts can cause denial of service of the machine running Cosign thereby impacting all services on the machine. The root cause is that Cosign creates slices based on the number of signatures, manifests or attestations in untrusted artifacts. As such, the untrusted artifact can control the amount of memory that Cosign allocates. The exact issue is Cosign allocates excessive memory on the lines that creates a slice of the same length as the manifests. Version 2.2.4 contains a patch for the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-29903|2024-08-02T01:17:58.600Z</guid>
      <pubDate>Wed, 10 Apr 2024 22:30:50 +0000</pubDate>
    </item>
  </channel>
</rss>
