<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for sigstore -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/sigstore/all.rss</link>
    <description>The latest CVEs for sigstore -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 22:22:57 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-30551|2024-08-02T14:28:51.668Z -- sigstore -- rekor
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-30551</link>
      <description>Rekor is an open source software supply chain transparency log. Rekor prior to version 1.1.1 may crash due to out of memory (OOM) conditions caused by reading archive metadata files into memory without checking their sizes first. Verification of a JAR file submitted to Rekor can cause an out of memory crash if files within the META-INF directory of the JAR are sufficiently large. Parsing of an APK file submitted to Rekor can cause an out of memory crash if the .SIGN or .PKGINFO files within the APK are sufficiently large. The OOM crash has been patched in Rekor version 1.1.1. There are no known workarounds.</description>
      <guid isPermaLink="false">CVE-2023-30551|2024-08-02T14:28:51.668Z</guid>
      <pubDate>Mon, 08 May 2023 15:52:42 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-46737|2024-08-02T20:53:21.326Z -- sigstore -- cosign
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-46737</link>
      <description>Cosign is a sigstore signing tool for OCI containers. Cosign is susceptible to a denial of service by an attacker controlled registry. An attacker who controls a remote registry can return a high number of attestations and/or signatures to Cosign and cause Cosign to enter a long loop resulting in an endless data attack. The root cause is that Cosign loops through all attestations fetched from the remote registry in pkg/cosign.FetchAttestations. The attacker needs to compromise the registry or make a request to a registry they control. When doing so, the attacker must return a high number of attestations in the response to Cosign. The result will be that the attacker can cause Cosign to go into a long or infinite loop that will prevent other users from verifying their data. In Kyvernos case, an attacker whose privileges are limited to making requests to the cluster can make a request with an image reference to their own registry, trigger the infinite loop and deny other users from completing their admission requests. Alternatively, the attacker can obtain control of the registry used by an organization and return a high number of attestations instead the expected number of attestations. The issue can be mitigated rather simply by setting a limit to the limit of attestations that Cosign will loop through. The limit does not need to be high to be within the vast majority of use cases and still prevent the endless data attack. This issue has been patched in version 2.2.1 and users are advised to upgrade.</description>
      <guid isPermaLink="false">CVE-2023-46737|2024-08-02T20:53:21.326Z</guid>
      <pubDate>Tue, 07 Nov 2023 17:30:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-47122|2024-08-02T21:01:22.666Z -- sigstore -- gitsign
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-47122</link>
      <description>Gitsign is software for keyless Git signing using Sigstore. In versions of gitsign starting with 0.6.0 and prior to 0.8.0, Rekor public keys were fetched via the Rekor API, instead of through the local TUF client. If the upstream Rekor server happened to be compromised, gitsign clients could potentially be tricked into trusting incorrect signatures. There is no known compromise the default public good instance (`rekor.sigstore.dev`) - anyone using this instance is unaffected. This issue was fixed in v0.8.0. No known workarounds are available.</description>
      <guid isPermaLink="false">CVE-2023-47122|2024-08-02T21:01:22.666Z</guid>
      <pubDate>Fri, 10 Nov 2023 21:33:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-33199|2024-08-02T15:39:35.807Z -- sigstore -- rekor
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-33199</link>
      <description>Rekor's goals are to provide an immutable tamper resistant ledger of metadata generated within a software projects supply chain. A malformed proposed entry of the `intoto/v0.0.2` type can cause a panic on a thread within the Rekor process. The thread is recovered so the client receives a 500 error message and service still continues, so the availability impact of this is minimal. This has been fixed in v1.2.0 of Rekor. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2023-33199|2024-08-02T15:39:35.807Z</guid>
      <pubDate>Fri, 26 May 2023 22:52:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29903|2024-08-02T01:17:58.600Z -- sigstore -- cosign</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29903</link>
      <description>Cosign provides code signing and transparency for containers and binaries. Prior to version 2.2.4, maliciously-crafted software artifacts can cause denial of service of the machine running Cosign thereby impacting all services on the machine. The root cause is that Cosign creates slices based on the number of signatures, manifests or attestations in untrusted artifacts. As such, the untrusted artifact can control the amount of memory that Cosign allocates. The exact issue is Cosign allocates excessive memory on the lines that creates a slice of the same length as the manifests. Version 2.2.4 contains a patch for the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-29903|2024-08-02T01:17:58.600Z</guid>
      <pubDate>Wed, 10 Apr 2024 22:30:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29902|2024-08-02T01:17:58.609Z -- sigstore -- cosign</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29902</link>
      <description>Cosign provides code signing and transparency for containers and binaries. Prior to version 2.2.4, a remote image with a malicious attachment can cause denial of service of the host machine running Cosign. This can impact other services on the machine that rely on having memory available such as a Redis database which can result in data loss. It can also impact the availability of other services on the machine that will not be available for the duration of the machine denial. The root cause of this issue is that Cosign reads the attachment from a remote image entirely into memory without checking the size of the attachment first. As such, a large attachment can make Cosign read a large attachment into memory; If the attachments size is larger than the machine has memory available, the machine will be denied of service. The Go runtime will make a SigKill after a few seconds of system-wide denial. This issue can allow a supply-chain escalation from a compromised registry to the Cosign user: If an attacher has compromised a registry or the account of an image vendor, they can include a malicious attachment and hurt the image consumer. Version 2.2.4 contains a patch for the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-29902|2024-08-02T01:17:58.609Z</guid>
      <pubDate>Wed, 10 Apr 2024 22:28:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29902|2024-06-04T17:57:24.059Z -- sigstore -- cosign</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29902</link>
      <description>Cosign provides code signing and transparency for containers and binaries. Prior to version 2.2.4, a remote image with a malicious attachment can cause denial of service of the host machine running Cosign. This can impact other services on the machine that rely on having memory available such as a Redis database which can result in data loss. It can also impact the availability of other services on the machine that will not be available for the duration of the machine denial. The root cause of this issue is that Cosign reads the attachment from a remote image entirely into memory without checking the size of the attachment first. As such, a large attachment can make Cosign read a large attachment into memory; If the attachments size is larger than the machine has memory available, the machine will be denied of service. The Go runtime will make a SigKill after a few seconds of system-wide denial. This issue can allow a supply-chain escalation from a compromised registry to the Cosign user: If an attacher has compromised a registry or the account of an image vendor, they can include a malicious attachment and hurt the image consumer. Version 2.2.4 contains a patch for the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-29902|2024-06-04T17:57:24.059Z</guid>
      <pubDate>Wed, 10 Apr 2024 22:28:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29903|2024-04-10T22:30:50.890Z -- sigstore -- cosign</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29903</link>
      <description>Cosign provides code signing and transparency for containers and binaries. Prior to version 2.2.4, maliciously-crafted software artifacts can cause denial of service of the machine running Cosign thereby impacting all services on the machine. The root cause is that Cosign creates slices based on the number of signatures, manifests or attestations in untrusted artifacts. As such, the untrusted artifact can control the amount of memory that Cosign allocates. The exact issue is Cosign allocates excessive memory on the lines that creates a slice of the same length as the manifests. Version 2.2.4 contains a patch for the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-29903|2024-04-10T22:30:50.890Z</guid>
      <pubDate>Wed, 10 Apr 2024 22:30:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29903|2024-07-03T18:10:27.323Z -- sigstore -- cosign</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29903</link>
      <description>Cosign provides code signing and transparency for containers and binaries. Prior to version 2.2.4, maliciously-crafted software artifacts can cause denial of service of the machine running Cosign thereby impacting all services on the machine. The root cause is that Cosign creates slices based on the number of signatures, manifests or attestations in untrusted artifacts. As such, the untrusted artifact can control the amount of memory that Cosign allocates. The exact issue is Cosign allocates excessive memory on the lines that creates a slice of the same length as the manifests. Version 2.2.4 contains a patch for the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-29903|2024-07-03T18:10:27.323Z</guid>
      <pubDate>Wed, 10 Apr 2024 22:30:50 +0000</pubDate>
    </item>
  </channel>
</rss>
