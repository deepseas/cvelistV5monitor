<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for The Eclipse Foundation -- Eclipse Jetty</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/the%20eclipse%20foundation/eclipse%20jetty.rss</link>
    <description>The latest CVEs for The Eclipse Foundation -- Eclipse Jetty</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 05 Aug 2024 10:23:38 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2018-12536|2024-08-05T08:38:06.220Z -- the%20eclipse%20foundation -- eclipse%20jetty
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-12536</link>
      <description>In Eclipse Jetty Server, all 9.x versions, on webapps deployed using default Error Handling, when an intentionally bad query arrives that doesn't match a dynamic url-pattern, and is eventually handled by the DefaultServlet's static file serving, the bad characters can trigger a java.nio.file.InvalidPathException which includes the full path to the base resource directory that the DefaultServlet and/or webapp is using. If this InvalidPathException is then handled by the default Error Handler, the InvalidPathException message is included in the error response, revealing the full server path to the requesting system.</description>
      <guid isPermaLink="false">CVE-2018-12536|2024-08-05T08:38:06.220Z</guid>
      <pubDate>Wed, 27 Jun 2018 17:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-12545|2024-08-05T08:38:06.170Z -- the%20eclipse%20foundation -- eclipse%20jetty
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-12545</link>
      <description>In Eclipse Jetty version 9.3.x and 9.4.x, the server is vulnerable to Denial of Service conditions if a remote client sends either large SETTINGs frames container containing many settings, or many small SETTINGs frames. The vulnerability is due to the additional CPU and memory allocations required to handle changed settings.</description>
      <guid isPermaLink="false">CVE-2018-12545|2024-08-05T08:38:06.170Z</guid>
      <pubDate>Wed, 27 Mar 2019 19:21:37 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2018-12538|2024-08-05T08:38:06.131Z -- the%20eclipse%20foundation -- eclipse%20jetty
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2018-12538</link>
      <description>In Eclipse Jetty versions 9.4.0 through 9.4.8, when using the optional Jetty provided FileSessionDataStore for persistent storage of HttpSession details, it is possible for a malicious user to access/hijack other HttpSessions and even delete unmatched HttpSessions present in the FileSystem's storage for the FileSessionDataStore.</description>
      <guid isPermaLink="false">CVE-2018-12538|2024-08-05T08:38:06.131Z</guid>
      <pubDate>Fri, 22 Jun 2018 19:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-17632|2024-08-05T01:47:13.488Z -- the%20eclipse%20foundation -- eclipse%20jetty
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-17632</link>
      <description>In Eclipse Jetty versions 9.4.21.v20190926, 9.4.22.v20191022, and 9.4.23.v20191118, the generation of default unhandled Error response content (in text/html and text/json Content-Type) does not escape Exception messages in stacktraces included in error output.</description>
      <guid isPermaLink="false">CVE-2019-17632|2024-08-05T01:47:13.488Z</guid>
      <pubDate>Mon, 25 Nov 2019 21:56:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-17638|2024-08-05T01:47:13.630Z -- the%20eclipse%20foundation -- eclipse%20jetty
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-17638</link>
      <description>In Eclipse Jetty, versions 9.4.27.v20200227 to 9.4.29.v20200521, in case of too large response headers, Jetty throws an exception to produce an HTTP 431 error. When this happens, the ByteBuffer containing the HTTP response headers is released back to the ByteBufferPool twice. Because of this double release, two threads can acquire the same ByteBuffer from the pool and while thread1 is about to use the ByteBuffer to write response1 data, thread2 fills the ByteBuffer with other data. Thread1 then proceeds to write the buffer that now contains different data. This results in client1, which issued request1 seeing data from another request or response which could contain sensitive data belonging to client2 (HTTP session ids, authentication credentials, etc.). If the Jetty version cannot be upgraded, the vulnerability can be significantly reduced by configuring a responseHeaderSize significantly larger than the requestHeaderSize (12KB responseHeaderSize and 8KB requestHeaderSize).</description>
      <guid isPermaLink="false">CVE-2019-17638|2024-08-05T01:47:13.630Z</guid>
      <pubDate>Thu, 09 Jul 2020 18:10:12 +0000</pubDate>
    </item>
  </channel>
</rss>
