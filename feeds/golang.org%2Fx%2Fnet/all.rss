<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for golang.org/x/net -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/golang.org%2Fx%2Fnet/all.rss</link>
    <description>The latest CVEs for golang.org/x/net -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 23:22:02 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-3978|2024-08-02T07:08:50.711Z -- golang.org%2Fx%2Fnet -- golang.org%2Fx%2Fnet%2Fhtml
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-3978</link>
      <description>Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.</description>
      <guid isPermaLink="false">CVE-2023-3978|2024-08-02T07:08:50.711Z</guid>
      <pubDate>Wed, 02 Aug 2023 19:48:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-39325|2024-08-02T18:02:06.746Z -- golang.org%2Fx%2Fnet -- golang.org%2Fx%2Fnet%2Fhttp2
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39325</link>
      <description>A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.</description>
      <guid isPermaLink="false">CVE-2023-39325|2024-08-02T18:02:06.746Z</guid>
      <pubDate>Wed, 11 Oct 2023 21:15:02 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-45288|2024-08-02T20:21:15.329Z -- golang.org%2Fx%2Fnet -- golang.org%2Fx%2Fnet%2Fhttp2</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-45288</link>
      <description>An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.</description>
      <guid isPermaLink="false">CVE-2023-45288|2024-08-02T20:21:15.329Z</guid>
      <pubDate>Thu, 04 Apr 2024 20:37:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-45288|2024-04-04T20:37:30.714Z -- golang.org%2Fx%2Fnet -- golang.org%2Fx%2Fnet%2Fhttp2</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-45288</link>
      <description>An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.</description>
      <guid isPermaLink="false">CVE-2023-45288|2024-04-04T20:37:30.714Z</guid>
      <pubDate>Thu, 04 Apr 2024 20:37:30 +0000</pubDate>
    </item>
  </channel>
</rss>
