<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for peerigon -- angular-expressions</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/peerigon/angular-expressions.rss</link>
    <description>The latest CVEs for peerigon -- angular-expressions</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 20:22:14 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-21277|2024-08-03T18:09:15.102Z -- peerigon -- angular-expressions
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-21277</link>
      <description>angular-expressions is "angular's nicest part extracted as a standalone module for the browser and node". In angular-expressions before version 1.1.2 there is a vulnerability which allows Remote Code Execution if you call "expressions.compile(userControlledInput)" where "userControlledInput" is text that comes from user input. The security of the package could be bypassed by using a more complex payload, using a ".constructor.constructor" technique. In terms of impact: If running angular-expressions in the browser, an attacker could run any browser script when the application code calls expressions.compile(userControlledInput). If running angular-expressions on the server, an attacker could run any Javascript expression, thus gaining Remote Code Execution. This is fixed in version 1.1.2 of angular-expressions A temporary workaround might be either to disable user-controlled input that will be fed into angular-expressions in your application or allow only following characters in the userControlledInput.</description>
      <guid isPermaLink="false">CVE-2021-21277|2024-08-03T18:09:15.102Z</guid>
      <pubDate>Mon, 01 Feb 2021 15:05:24 +0000</pubDate>
    </item>
  </channel>
</rss>
