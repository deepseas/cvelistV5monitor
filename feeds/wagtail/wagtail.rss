<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for wagtail -- wagtail</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/wagtail/wagtail.rss</link>
    <description>The latest CVEs for wagtail -- wagtail</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 19:19:32 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-15118|2024-08-04T13:08:21.683Z -- wagtail -- wagtail
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15118</link>
      <description>In Wagtail before versions 2.7.4 and 2.9.3, when a form page type is made available to Wagtail editors through the `wagtail.contrib.forms` app, and the page template is built using Django's standard form rendering helpers such as form.as_p, any HTML tags used within a form field's help text will be rendered unescaped in the page. Allowing HTML within help text is an intentional design decision by Django; however, as a matter of policy Wagtail does not allow editors to insert arbitrary HTML by default, as this could potentially be used to carry out cross-site scripting attacks, including privilege escalation. This functionality should therefore not have been made available to editor-level users. The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin. Patched versions have been released as Wagtail 2.7.4 (for the LTS 2.7 branch) and Wagtail 2.9.3 (for the current 2.9 branch). In these versions, help text will be escaped to prevent the inclusion of HTML tags. Site owners who wish to re-enable the use of HTML within help text (and are willing to accept the risk of this being exploited by editors) may set WAGTAILFORMS_HELP_TEXT_ALLOW_HTML = True in their configuration settings. Site owners who are unable to upgrade to the new versions can secure their form page templates by rendering forms field-by-field as per Django's documentation, but omitting the |safe filter when outputting the help text.</description>
      <guid isPermaLink="false">CVE-2020-15118|2024-08-04T13:08:21.683Z</guid>
      <pubDate>Mon, 20 Jul 2020 17:50:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-11001|2024-08-04T11:21:14.258Z -- wagtail -- wagtail
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-11001</link>
      <description>In Wagtail before versions 2.8.1 and 2.7.2, a cross-site scripting (XSS) vulnerability exists on the page revision comparison view within the Wagtail admin interface. A user with a limited-permission editor account for the Wagtail admin could potentially craft a page revision history that, when viewed by a user with higher privileges, could perform actions with that user's credentials. The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin. Patched versions have been released as Wagtail 2.7.2 (for the LTS 2.7 branch) and Wagtail 2.8.1 (for the current 2.8 branch).</description>
      <guid isPermaLink="false">CVE-2020-11001|2024-08-04T11:21:14.258Z</guid>
      <pubDate>Tue, 14 Apr 2020 23:05:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-11037|2024-08-04T11:21:14.431Z -- wagtail -- wagtail
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-11037</link>
      <description>In Wagtail before versions 2.7.2 and 2.8.2, a potential timing attack exists on pages or documents that have been protected with a shared password through Wagtail's "Privacy" controls. This password check is performed through a character-by-character string comparison, and so an attacker who is able to measure the time taken by this check to a high degree of accuracy could potentially use timing differences to gain knowledge of the password. This is understood to be feasible on a local network, but not on the public internet. Privacy settings that restrict access to pages/documents on a per-user or per-group basis (as opposed to a shared password) are unaffected by this vulnerability. This has been patched in 2.7.3, 2.8.2, 2.9.</description>
      <guid isPermaLink="false">CVE-2020-11037|2024-08-04T11:21:14.431Z</guid>
      <pubDate>Thu, 30 Apr 2020 22:20:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35228|2024-08-02T03:07:46.735Z -- wagtail -- wagtail</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-35228</link>
      <description>Wagtail is an open source content management system built on Django. Due to an improperly applied permission check in the `wagtail.contrib.settings` module, a user with access to the Wagtail admin and knowledge of the URL of the edit view for a settings model can access and update that setting, even when they have not been granted permission over the model. The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin. Patched versions have been released as Wagtail 6.0.5 and 6.1.2. Wagtail releases prior to 6.0 are unaffected. Users are advised to upgrade. Site owners who are unable to upgrade to a patched version can avoid the vulnerability in `ModelViewSet` by registering the model as a snippet instead. No workaround is available for `wagtail.contrib.settings`.</description>
      <guid isPermaLink="false">CVE-2024-35228|2024-08-02T03:07:46.735Z</guid>
      <pubDate>Thu, 30 May 2024 18:44:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39317|2024-07-18T15:20:35.111Z -- wagtail -- wagtail</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39317</link>
      <description>Wagtail is an open source content management system built on Django. A bug in Wagtail's `parse_query_string` would result in it taking a long time to process suitably crafted inputs. When used to parse sufficiently long strings of characters without a space, `parse_query_string` would take an unexpectedly large amount of time to process, resulting in a denial of service. In an initial Wagtail installation, the vulnerability can be exploited by any Wagtail admin user. It cannot be exploited by end users. If your Wagtail site has a custom search implementation which uses `parse_query_string`, it may be exploitable by other users (e.g. unauthenticated users). Patched versions have been released as Wagtail 5.2.6, 6.0.6 and 6.1.3.</description>
      <guid isPermaLink="false">CVE-2024-39317|2024-07-18T15:20:35.111Z</guid>
      <pubDate>Thu, 11 Jul 2024 15:23:22 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32882|2024-06-04T17:50:26.488Z -- wagtail -- wagtail</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32882</link>
      <description>Wagtail is an open source content management system built on Django. In affected versions if a model has been made available for editing through the `wagtail.contrib.settings` module or `ModelViewSet`, and the `permission` argument on `FieldPanel` has been used to further restrict access to one or more fields of the model, a user with edit permission over the model but not the specific field can craft an HTTP POST request that bypasses the permission check on the individual field, allowing them to update its value. This vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin, or by a user who has not been granted edit access to the model in question. The editing interfaces for pages and snippets are also unaffected. Patched versions have been released as Wagtail 6.0.3 and 6.1. Wagtail releases prior to 6.0 are unaffected. Users are advised to upgrade. Site owners who are unable to upgrade to a patched version can avoid the vulnerability as follows: 1.For models registered through `ModelViewSet`, register the model as a snippet instead; 2. For settings models, place the restricted fields in a separate settings model, and configure permission at the model level.</description>
      <guid isPermaLink="false">CVE-2024-32882|2024-06-04T17:50:26.488Z</guid>
      <pubDate>Thu, 02 May 2024 06:52:59 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35228|2024-06-04T17:33:38.290Z -- wagtail -- wagtail</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35228</link>
      <description>Wagtail is an open source content management system built on Django. Due to an improperly applied permission check in the `wagtail.contrib.settings` module, a user with access to the Wagtail admin and knowledge of the URL of the edit view for a settings model can access and update that setting, even when they have not been granted permission over the model. The vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin. Patched versions have been released as Wagtail 6.0.5 and 6.1.2. Wagtail releases prior to 6.0 are unaffected. Users are advised to upgrade. Site owners who are unable to upgrade to a patched version can avoid the vulnerability in `ModelViewSet` by registering the model as a snippet instead. No workaround is available for `wagtail.contrib.settings`.</description>
      <guid isPermaLink="false">CVE-2024-35228|2024-06-04T17:33:38.290Z</guid>
      <pubDate>Thu, 30 May 2024 18:44:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39317|2024-07-11T15:23:22.307Z -- wagtail -- wagtail</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39317</link>
      <description>Wagtail is an open source content management system built on Django. A bug in Wagtail's `parse_query_string` would result in it taking a long time to process suitably crafted inputs. When used to parse sufficiently long strings of characters without a space, `parse_query_string` would take an unexpectedly large amount of time to process, resulting in a denial of service. In an initial Wagtail installation, the vulnerability can be exploited by any Wagtail admin user. It cannot be exploited by end users. If your Wagtail site has a custom search implementation which uses `parse_query_string`, it may be exploitable by other users (e.g. unauthenticated users). Patched versions have been released as Wagtail 5.2.6, 6.0.6 and 6.1.3.</description>
      <guid isPermaLink="false">CVE-2024-39317|2024-07-11T15:23:22.307Z</guid>
      <pubDate>Thu, 11 Jul 2024 15:23:22 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32882|2024-08-02T02:20:35.672Z -- wagtail -- wagtail</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32882</link>
      <description>Wagtail is an open source content management system built on Django. In affected versions if a model has been made available for editing through the `wagtail.contrib.settings` module or `ModelViewSet`, and the `permission` argument on `FieldPanel` has been used to further restrict access to one or more fields of the model, a user with edit permission over the model but not the specific field can craft an HTTP POST request that bypasses the permission check on the individual field, allowing them to update its value. This vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin, or by a user who has not been granted edit access to the model in question. The editing interfaces for pages and snippets are also unaffected. Patched versions have been released as Wagtail 6.0.3 and 6.1. Wagtail releases prior to 6.0 are unaffected. Users are advised to upgrade. Site owners who are unable to upgrade to a patched version can avoid the vulnerability as follows: 1.For models registered through `ModelViewSet`, register the model as a snippet instead; 2. For settings models, place the restricted fields in a separate settings model, and configure permission at the model level.</description>
      <guid isPermaLink="false">CVE-2024-32882|2024-08-02T02:20:35.672Z</guid>
      <pubDate>Thu, 02 May 2024 06:52:59 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-39317|2024-08-02T04:19:20.749Z -- wagtail -- wagtail</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-39317</link>
      <description>Wagtail is an open source content management system built on Django. A bug in Wagtail's `parse_query_string` would result in it taking a long time to process suitably crafted inputs. When used to parse sufficiently long strings of characters without a space, `parse_query_string` would take an unexpectedly large amount of time to process, resulting in a denial of service. In an initial Wagtail installation, the vulnerability can be exploited by any Wagtail admin user. It cannot be exploited by end users. If your Wagtail site has a custom search implementation which uses `parse_query_string`, it may be exploitable by other users (e.g. unauthenticated users). Patched versions have been released as Wagtail 5.2.6, 6.0.6 and 6.1.3.</description>
      <guid isPermaLink="false">CVE-2024-39317|2024-08-02T04:19:20.749Z</guid>
      <pubDate>Thu, 11 Jul 2024 15:23:22 +0000</pubDate>
    </item>
  </channel>
</rss>
