<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for OpenSSL Software Foundation -- OpenSSL</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/openssl%20software%20foundation/openssl.rss</link>
    <description>The latest CVEs for OpenSSL Software Foundation -- OpenSSL</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 17 Sep 2024 18:25:04 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2017-3737|2024-09-17T03:53:31.262Z -- openssl%20software%20foundation -- openssl
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-3737</link>
      <description>OpenSSL 1.0.2 (starting from version 1.0.2b) introduced an "error state" mechanism. The intent was that if a fatal error occurred during a handshake then OpenSSL would move into the error state and would immediately fail if you attempted to continue the handshake. This works as designed for the explicit handshake functions (SSL_do_handshake(), SSL_accept() and SSL_connect()), however due to a bug it does not work correctly if SSL_read() or SSL_write() is called directly. In that scenario, if the handshake fails then a fatal error will be returned in the initial function call. If SSL_read()/SSL_write() is subsequently called by the application for the same SSL object then it will succeed and the data is passed without being decrypted/encrypted directly from the SSL/TLS record layer. In order to exploit this issue an application bug would have to be present that resulted in a call to SSL_read()/SSL_write() being issued after having already received a fatal error. OpenSSL version 1.0.2b-1.0.2m are affected. Fixed in OpenSSL 1.0.2n. OpenSSL 1.1.0 is not affected.</description>
      <guid isPermaLink="false">CVE-2017-3737|2024-09-17T03:53:31.262Z</guid>
      <pubDate>Thu, 07 Dec 2017 16:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
