<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for HackerOne -- sequelize node module</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/hackerone/sequelize%20node%20module.rss</link>
    <description>The latest CVEs for HackerOne -- sequelize node module</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 06 Aug 2024 07:21:37 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2016-10554|2024-08-06T03:21:52.158Z -- hackerone -- sequelize%20node%20module
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2016-10554</link>
      <description>sequelize is an Object-relational mapping, or a middleman to convert things from Postgres, MySQL, MariaDB, SQLite and Microsoft SQL Server into usable data for NodeJS. Before version 1.7.0-alpha3, sequelize defaulted SQLite to use MySQL backslash escaping, even though SQLite uses Postgres escaping.</description>
      <guid isPermaLink="false">CVE-2016-10554|2024-08-06T03:21:52.158Z</guid>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2016-10550|2024-08-06T03:21:52.228Z -- hackerone -- sequelize%20node%20module
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2016-10550</link>
      <description>sequelize is an Object-relational mapping, or a middleman to convert things from Postgres, MySQL, MariaDB, SQLite and Microsoft SQL Server into usable data for NodeJS If user input goes into the `limit` or `order` parameters, a malicious user can put in their own SQL statements. This affects sequelize 3.16.0 and earlier.</description>
      <guid isPermaLink="false">CVE-2016-10550|2024-08-06T03:21:52.228Z</guid>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2016-10556|2024-08-06T03:30:18.167Z -- hackerone -- sequelize%20node%20module
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2016-10556</link>
      <description>sequelize is an Object-relational mapping, or a middleman to convert things from Postgres, MySQL, MariaDB, SQLite and Microsoft SQL Server into usable data for NodeJS In Postgres, SQLite, and Microsoft SQL Server there is an issue where arrays are treated as strings and improperly escaped. This causes potential SQL injection in sequelize 3.19.3 and earlier, where a malicious user could put `["test", "'); DELETE TestTable WHERE Id = 1 --')"]` inside of ``` database.query('SELECT * FROM TestTable WHERE Name IN (:names)', { replacements: { names: directCopyOfUserInput } }); ``` and cause the SQL statement to become `SELECT Id FROM Table WHERE Name IN ('test', '\'); DELETE TestTable WHERE Id = 1 --')`. In Postgres, MSSQL, and SQLite, the backslash has no special meaning. This causes the the statement to delete whichever Id has a value of 1 in the TestTable table.</description>
      <guid isPermaLink="false">CVE-2016-10556|2024-08-06T03:30:18.167Z</guid>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2016-10553|2024-08-06T03:21:52.242Z -- hackerone -- sequelize%20node%20module
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2016-10553</link>
      <description>sequelize is an Object-relational mapping, or a middleman to convert things from Postgres, MySQL, MariaDB, SQLite and Microsoft SQL Server into usable data for NodeJS. A fix was pushed out that fixed potential SQL injection in sequelize 2.1.3 and earlier.</description>
      <guid isPermaLink="false">CVE-2016-10553|2024-08-06T03:21:52.242Z</guid>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
