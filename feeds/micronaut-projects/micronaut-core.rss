<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for micronaut-projects -- micronaut-core</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/micronaut-projects/micronaut-core.rss</link>
    <description>The latest CVEs for micronaut-projects -- micronaut-core</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 08:24:20 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-21700|2024-08-03T02:53:34.717Z -- micronaut-projects -- micronaut-core
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-21700</link>
      <description>Micronaut is a JVM-based, full stack Java framework designed for building JVM web applications with support for Java, Kotlin and the Groovy language. In affected versions sending an invalid Content Type header leads to memory leak in DefaultArgumentConversionContext as this type is erroneously used in static state. ### Impact Sending an invalid Content Type header leads to memory leak in `DefaultArgumentConversionContext` as this type is erroneously used in static state. ### Patches The problem is patched in Micronaut 3.2.7 and above. ### Workarounds The default content type binder can be replaced in an existing Micronaut application to mitigate the issue: ```java package example; import java.util.List; import io.micronaut.context.annotation.Replaces; import io.micronaut.core.convert.ConversionService; import io.micronaut.http.MediaType; import io.micronaut.http.bind.DefaultRequestBinderRegistry; import io.micronaut.http.bind.binders.RequestArgumentBinder; import jakarta.inject.Singleton; @Singleton @Replaces(DefaultRequestBinderRegistry.class) class FixedRequestBinderRegistry extends DefaultRequestBinderRegistry { public FixedRequestBinderRegistry(ConversionService conversionService, List&lt;RequestArgumentBinder&gt; binders) { super(conversionService, binders); } @Override protected void registerDefaultConverters(ConversionService&lt;?&gt; conversionService) { super.registerDefaultConverters(conversionService); conversionService.addConverter(CharSequence.class, MediaType.class, charSequence -&gt; { try { return MediaType.of(charSequence); } catch (IllegalArgumentException e) { return null; } }); } } ``` ### References Commit that introduced the vulnerability https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3 ### For more information If you have any questions or comments about this advisory: * Open an issue in [Micronaut Core](https://github.com/micronaut-projects/micronaut-core/issues) * Email us at [info@micronaut.io](mailto:info@micronaut.io)</description>
      <guid isPermaLink="false">CVE-2022-21700|2024-08-03T02:53:34.717Z</guid>
      <pubDate>Tue, 18 Jan 2022 22:15:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-23639|2024-06-04T17:46:04.323Z -- micronaut-projects -- micronaut-core</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23639</link>
      <description>Micronaut Framework is a modern, JVM-based, full stack Java framework designed for building modular, easily testable JVM applications with support for Java, Kotlin and the Groovy language. Enabled but unsecured management endpoints are susceptible to drive-by localhost attacks. While not typical of a production application, these attacks may have more impact on a development environment where such endpoints may be flipped on without much thought. A malicious/compromised website can make HTTP requests to `localhost`. Normally, such requests would trigger a CORS preflight check which would prevent the request; however, some requests are "simple" and do not require a preflight check. These endpoints, if enabled and not secured, are vulnerable to being triggered. Production environments typically disable unused endpoints and secure/restrict access to needed endpoints. A more likely victim is the developer in their local development host, who has enabled endpoints without security for the sake of easing development. This issue has been addressed in version 3.8.3. Users are advised to upgrade.</description>
      <guid isPermaLink="false">CVE-2024-23639|2024-06-04T17:46:04.323Z</guid>
      <pubDate>Fri, 09 Feb 2024 00:15:34 +0000</pubDate>
    </item>
  </channel>
</rss>
