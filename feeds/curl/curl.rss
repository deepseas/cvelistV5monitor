<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for curl -- curl</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/curl/curl.rss</link>
    <description>The latest CVEs for curl -- curl</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 09 Jul 2024 21:22:21 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-38545|2023-10-18T03:52:00.816Z -- curl -- curl
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-38545</link>
      <description>This flaw makes curl overflow a heap based buffer in the SOCKS5 proxy
handshake.

When curl is asked to pass along the host name to the SOCKS5 proxy to allow
that to resolve the address instead of it getting done by curl itself, the
maximum length that host name can be is 255 bytes.

If the host name is detected to be longer, curl switches to local name
resolving and instead passes on the resolved address only. Due to this bug,
the local variable that means "let the host resolve the name" could get the
wrong value during a slow SOCKS5 handshake, and contrary to the intention,
copy the too long host name to the target buffer instead of copying just the
resolved address there.

The target buffer being a heap based buffer, and the host name coming from the
URL that curl has been told to operate with.
</description>
      <guid isPermaLink="false">CVE-2023-38545|2023-10-18T03:52:00.816Z</guid>
      <pubDate>Wed, 18 Oct 2023 03:52:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-38546|2023-10-18T03:51:31.276Z -- curl -- curl
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-38546</link>
      <description>This flaw allows an attacker to insert cookies at will into a running program
using libcurl, if the specific series of conditions are met.

libcurl performs transfers. In its API, an application creates "easy handles"
that are the individual handles for single transfers.

libcurl provides a function call that duplicates en easy handle called
[curl_easy_duphandle](https://curl.se/libcurl/c/curl_easy_duphandle.html).

If a transfer has cookies enabled when the handle is duplicated, the
cookie-enable state is also cloned - but without cloning the actual
cookies. If the source handle did not read any cookies from a specific file on
disk, the cloned version of the handle would instead store the file name as
`none` (using the four ASCII letters, no quotes).

Subsequent use of the cloned handle that does not explicitly set a source to
load cookies from would then inadvertently load cookies from a file named
`none` - if such a file exists and is readable in the current directory of the
program using libcurl. And if using the correct file format of course.
</description>
      <guid isPermaLink="false">CVE-2023-38546|2023-10-18T03:51:31.276Z</guid>
      <pubDate>Wed, 18 Oct 2023 03:51:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-0853|2024-02-03T13:35:25.863Z -- curl -- curl</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-0853</link>
      <description>curl inadvertently kept the SSL session ID for connections in its cache even when the verify status (*OCSP stapling*) test failed. A subsequent transfer to
the same hostname could then succeed if the session ID cache was still fresh, which then skipped the verify status check.</description>
      <guid isPermaLink="false">CVE-2024-0853|2024-02-03T13:35:25.863Z</guid>
      <pubDate>Sat, 03 Feb 2024 13:35:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2004|2024-03-27T07:54:27.157Z -- curl -- curl</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2004</link>
      <description>When a protocol selection parameter option disables all protocols without adding any then the default set of protocols would remain in the allowed set due to an error in the logic for removing protocols. The below command would perform a request to curl.se with a plaintext protocol which has been explicitly disabled.      curl --proto -all,-http http://curl.se  The flaw is only present if the set of selected protocols disables the entire set of available protocols, in itself a command with no practical use and therefore unlikely to be encountered in real situations. The curl security team has thus assessed this to be low severity bug.</description>
      <guid isPermaLink="false">CVE-2024-2004|2024-03-27T07:54:27.157Z</guid>
      <pubDate>Wed, 27 Mar 2024 07:54:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2398|2024-06-04T17:30:40.286Z -- curl -- curl</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2398</link>
      <description>When an application tells libcurl it wants to allow HTTP/2 server push, and the amount of received headers for the push surpasses the maximum allowed limit (1000), libcurl aborts the server push. When aborting, libcurl inadvertently does not free all the previously allocated headers and instead leaks the memory.  Further, this error condition fails silently and is therefore not easily detected by an application.</description>
      <guid isPermaLink="false">CVE-2024-2398|2024-06-04T17:30:40.286Z</guid>
      <pubDate>Wed, 27 Mar 2024 07:55:48 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2466|2024-03-27T07:58:24.520Z -- curl -- curl</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2466</link>
      <description>libcurl did not check the server certificate of TLS connections done to a host specified as an IP address, when built to use mbedTLS.  libcurl would wrongly avoid using the set hostname function when the specified hostname was given as an IP address, therefore completely skipping the certificate check. This affects all uses of TLS protocols (HTTPS, FTPS, IMAPS, POPS3, SMTPS, etc).</description>
      <guid isPermaLink="false">CVE-2024-2466|2024-03-27T07:58:24.520Z</guid>
      <pubDate>Wed, 27 Mar 2024 07:58:24 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2379|2024-03-27T07:56:41.158Z -- curl -- curl</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2379</link>
      <description>libcurl skips the certificate verification for a QUIC connection under certain conditions, when built to use wolfSSL. If told to use an unknown/bad cipher or curve, the error path accidentally skips the verification and returns OK, thus ignoring any certificate problems.</description>
      <guid isPermaLink="false">CVE-2024-2379|2024-03-27T07:56:41.158Z</guid>
      <pubDate>Wed, 27 Mar 2024 07:56:41 +0000</pubDate>
    </item>
  </channel>
</rss>
