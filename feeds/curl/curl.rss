<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for curl -- curl</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/curl/curl.rss</link>
    <description>The latest CVEs for curl -- curl</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 11 Oct 2024 23:22:48 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-8096|2024-10-11T22:03:21.760Z -- curl -- curl
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8096</link>
      <description>When curl is told to use the Certificate Status Request TLS extension, often referred to as OCSP stapling, to verify that the server certificate is valid, it might fail to detect some OCSP problems and instead wrongly consider the response as fine.  If the returned status reports another error than 'revoked' (like for example 'unauthorized') it is not treated as a bad certficate.</description>
      <guid isPermaLink="false">CVE-2024-8096|2024-10-11T22:03:21.760Z</guid>
      <pubDate>Wed, 11 Sep 2024 10:03:59 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8096|2024-09-11T11:02:48.827Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8096</link>
      <description>When curl is told to use the Certificate Status Request TLS extension, often referred to as OCSP stapling, to verify that the server certificate is valid, it might fail to detect some OCSP problems and instead wrongly consider the response as fine.  If the returned status reports another error than 'revoked' (like for example 'unauthorized') it is not treated as a bad certficate.</description>
      <guid isPermaLink="false">CVE-2024-8096|2024-09-11T11:02:48.827Z</guid>
      <pubDate>Wed, 11 Sep 2024 10:03:59 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-7264|2024-08-28T15:02:52.325Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-7264</link>
      <description>libcurl's ASN1 parser code has the `GTime2str()` function, used for parsing an
ASN.1 Generalized Time field. If given an syntactically incorrect field, the
parser might end up using -1 for the length of the *time fraction*, leading to
a `strlen()` getting performed on a pointer to a heap buffer area that is not
(purposely) null terminated.

This flaw most likely leads to a crash, but can also lead to heap contents
getting returned to the application when
[CURLINFO_CERTINFO](https://curl.se/libcurl/c/CURLINFO_CERTINFO.html) is used.</description>
      <guid isPermaLink="false">CVE-2024-7264|2024-08-28T15:02:52.325Z</guid>
      <pubDate>Wed, 31 Jul 2024 08:08:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6874|2024-08-22T18:03:17.766Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6874</link>
      <description>libcurl's URL API function
[curl_url_get()](https://curl.se/libcurl/c/curl_url_get.html) offers punycode
conversions, to and from IDN. Asking to convert a name that is exactly 256
bytes, libcurl ends up reading outside of a stack based buffer when built to
use the *macidn* IDN backend. The conversion function then fills up the
provided buffer exactly - but does not null terminate the string.

This flaw can lead to stack contents accidently getting returned as part of
the converted string.</description>
      <guid isPermaLink="false">CVE-2024-6874|2024-08-22T18:03:17.766Z</guid>
      <pubDate>Wed, 24 Jul 2024 07:36:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-7264|2024-08-01T20:05:56.326Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-7264</link>
      <description>libcurl's ASN1 parser code has the `GTime2str()` function, used for parsing an
ASN.1 Generalized Time field. If given an syntactically incorrect field, the
parser might end up using -1 for the length of the *time fraction*, leading to
a `strlen()` getting performed on a pointer to a heap buffer area that is not
(purposely) null terminated.

This flaw most likely leads to a crash, but can also lead to heap contents
getting returned to the application when
[CURLINFO_CERTINFO](https://curl.se/libcurl/c/CURLINFO_CERTINFO.html) is used.</description>
      <guid isPermaLink="false">CVE-2024-7264|2024-08-01T20:05:56.326Z</guid>
      <pubDate>Wed, 31 Jul 2024 08:08:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-7264|2024-07-31T08:08:14.585Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-7264</link>
      <description>libcurl's ASN1 parser code has the `GTime2str()` function, used for parsing an
ASN.1 Generalized Time field. If given an syntactically incorrect field, the
parser might end up using -1 for the length of the *time fraction*, leading to
a `strlen()` getting performed on a pointer to a heap buffer area that is not
(purposely) null terminated.

This flaw most likely leads to a crash, but can also lead to heap contents
getting returned to the application when
[CURLINFO_CERTINFO](https://curl.se/libcurl/c/CURLINFO_CERTINFO.html) is used.</description>
      <guid isPermaLink="false">CVE-2024-7264|2024-07-31T08:08:14.585Z</guid>
      <pubDate>Wed, 31 Jul 2024 08:08:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6197|2024-07-24T18:44:18.885Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6197</link>
      <description>libcurl's ASN1 parser has this utf8asn1str() function used for parsing an ASN.1 UTF-8 string. Itcan detect an invalid field and return error. Unfortunately, when doing so it also invokes `free()` on a 4 byte localstack buffer.  Most modern malloc implementations detect this error and immediately abort. Some however accept the input pointer and add that memory to its list of available chunks. This leads to the overwriting of nearby stack memory. The content of the overwrite is decided by the `free()` implementation; likely to be memory pointers and a set of flags.  The most likely outcome of exploting this flaw is a crash, although it cannot be ruled out that more serious results can be had in special circumstances.</description>
      <guid isPermaLink="false">CVE-2024-6197|2024-07-24T18:44:18.885Z</guid>
      <pubDate>Wed, 24 Jul 2024 07:29:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6197|2024-07-24T07:29:50.003Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6197</link>
      <description>libcurl's ASN1 parser has this utf8asn1str() function used for parsing an ASN.1 UTF-8 string. Itcan detect an invalid field and return error. Unfortunately, when doing so it also invokes `free()` on a 4 byte localstack buffer.  Most modern malloc implementations detect this error and immediately abort. Some however accept the input pointer and add that memory to its list of available chunks. This leads to the overwriting of nearby stack memory. The content of the overwrite is decided by the `free()` implementation; likely to be memory pointers and a set of flags.  The most likely outcome of exploting this flaw is a crash, although it cannot be ruled out that more serious results can be had in special circumstances.</description>
      <guid isPermaLink="false">CVE-2024-6197|2024-07-24T07:29:50.003Z</guid>
      <pubDate>Wed, 24 Jul 2024 07:29:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6874|2024-07-24T07:36:26.887Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6874</link>
      <description>libcurl's URL API function
[curl_url_get()](https://curl.se/libcurl/c/curl_url_get.html) offers punycode
conversions, to and from IDN. Asking to convert a name that is exactly 256
bytes, libcurl ends up reading outside of a stack based buffer when built to
use the *macidn* IDN backend. The conversion function then fills up the
provided buffer exactly - but does not null terminate the string.

This flaw can lead to stack contents accidently getting returned as part of
the converted string.</description>
      <guid isPermaLink="false">CVE-2024-6874|2024-07-24T07:36:26.887Z</guid>
      <pubDate>Wed, 24 Jul 2024 07:36:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6874|2024-07-24T16:25:51.575Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6874</link>
      <description>libcurl's URL API function
[curl_url_get()](https://curl.se/libcurl/c/curl_url_get.html) offers punycode
conversions, to and from IDN. Asking to convert a name that is exactly 256
bytes, libcurl ends up reading outside of a stack based buffer when built to
use the *macidn* IDN backend. The conversion function then fills up the
provided buffer exactly - but does not null terminate the string.

This flaw can lead to stack contents accidently getting returned as part of
the converted string.</description>
      <guid isPermaLink="false">CVE-2024-6874|2024-07-24T16:25:51.575Z</guid>
      <pubDate>Wed, 24 Jul 2024 07:36:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-7264|2024-08-01T13:50:09.754Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-7264</link>
      <description>libcurl's ASN1 parser code has the `GTime2str()` function, used for parsing an
ASN.1 Generalized Time field. If given an syntactically incorrect field, the
parser might end up using -1 for the length of the *time fraction*, leading to
a `strlen()` getting performed on a pointer to a heap buffer area that is not
(purposely) null terminated.

This flaw most likely leads to a crash, but can also lead to heap contents
getting returned to the application when
[CURLINFO_CERTINFO](https://curl.se/libcurl/c/CURLINFO_CERTINFO.html) is used.</description>
      <guid isPermaLink="false">CVE-2024-7264|2024-08-01T13:50:09.754Z</guid>
      <pubDate>Wed, 31 Jul 2024 08:08:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6197|2024-08-01T21:33:04.981Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6197</link>
      <description>libcurl's ASN1 parser has this utf8asn1str() function used for parsing an ASN.1 UTF-8 string. Itcan detect an invalid field and return error. Unfortunately, when doing so it also invokes `free()` on a 4 byte localstack buffer.  Most modern malloc implementations detect this error and immediately abort. Some however accept the input pointer and add that memory to its list of available chunks. This leads to the overwriting of nearby stack memory. The content of the overwrite is decided by the `free()` implementation; likely to be memory pointers and a set of flags.  The most likely outcome of exploting this flaw is a crash, although it cannot be ruled out that more serious results can be had in special circumstances.</description>
      <guid isPermaLink="false">CVE-2024-6197|2024-08-01T21:33:04.981Z</guid>
      <pubDate>Wed, 24 Jul 2024 07:29:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6874|2024-08-01T21:45:38.111Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6874</link>
      <description>libcurl's URL API function
[curl_url_get()](https://curl.se/libcurl/c/curl_url_get.html) offers punycode
conversions, to and from IDN. Asking to convert a name that is exactly 256
bytes, libcurl ends up reading outside of a stack based buffer when built to
use the *macidn* IDN backend. The conversion function then fills up the
provided buffer exactly - but does not null terminate the string.

This flaw can lead to stack contents accidently getting returned as part of
the converted string.</description>
      <guid isPermaLink="false">CVE-2024-6874|2024-08-01T21:45:38.111Z</guid>
      <pubDate>Wed, 24 Jul 2024 07:36:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-7264|2024-08-02T15:16:16.541Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-7264</link>
      <description>libcurl's ASN1 parser code has the `GTime2str()` function, used for parsing an
ASN.1 Generalized Time field. If given an syntactically incorrect field, the
parser might end up using -1 for the length of the *time fraction*, leading to
a `strlen()` getting performed on a pointer to a heap buffer area that is not
(purposely) null terminated.

This flaw most likely leads to a crash, but can also lead to heap contents
getting returned to the application when
[CURLINFO_CERTINFO](https://curl.se/libcurl/c/CURLINFO_CERTINFO.html) is used.</description>
      <guid isPermaLink="false">CVE-2024-7264|2024-08-02T15:16:16.541Z</guid>
      <pubDate>Wed, 31 Jul 2024 08:08:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8096|2024-09-11T10:03:59.489Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8096</link>
      <description>When curl is told to use the Certificate Status Request TLS extension, often referred to as OCSP stapling, to verify that the server certificate is valid, it might fail to detect some OCSP problems and instead wrongly consider the response as fine.  If the returned status reports another error than 'revoked' (like for example 'unauthorized') it is not treated as a bad certficate.</description>
      <guid isPermaLink="false">CVE-2024-8096|2024-09-11T10:03:59.489Z</guid>
      <pubDate>Wed, 11 Sep 2024 10:03:59 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8096|2024-09-11T13:46:36.676Z -- curl -- curl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8096</link>
      <description>When curl is told to use the Certificate Status Request TLS extension, often referred to as OCSP stapling, to verify that the server certificate is valid, it might fail to detect some OCSP problems and instead wrongly consider the response as fine.  If the returned status reports another error than 'revoked' (like for example 'unauthorized') it is not treated as a bad certficate.</description>
      <guid isPermaLink="false">CVE-2024-8096|2024-09-11T13:46:36.676Z</guid>
      <pubDate>Wed, 11 Sep 2024 10:03:59 +0000</pubDate>
    </item>
  </channel>
</rss>
