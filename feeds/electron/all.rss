<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for electron -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/electron/all.rss</link>
    <description>The latest CVEs for electron -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 18:24:35 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-15215|2024-08-04T13:08:22.830Z -- electron -- electron
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15215</link>
      <description>Electron before versions 11.0.0-beta.6, 10.1.2, 9.3.1 or 8.5.2 is vulnerable to a context isolation bypass. Apps using both `contextIsolation` and `sandbox: true` are affected. Apps using both `contextIsolation` and `nodeIntegrationInSubFrames: true` are affected. This is a context isolation bypass, meaning that code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions.</description>
      <guid isPermaLink="false">CVE-2020-15215|2024-08-04T13:08:22.830Z</guid>
      <pubDate>Tue, 06 Oct 2020 18:00:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-4075|2024-08-04T07:52:20.843Z -- electron -- electron
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-4075</link>
      <description>In Electron before versions 7.2.4, 8.2.4, and 9.0.0-beta21, arbitrary local file read is possible by defining unsafe window options on a child window opened via window.open. As a workaround, ensure you are calling `event.preventDefault()` on all new-window events where the `url` or `options` is not something you expect. This is fixed in versions 9.0.0-beta.21, 8.2.4 and 7.2.4.</description>
      <guid isPermaLink="false">CVE-2020-4075|2024-08-04T07:52:20.843Z</guid>
      <pubDate>Tue, 07 Jul 2020 00:05:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-39184|2024-08-04T01:58:18.275Z -- electron -- electron
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-39184</link>
      <description>Electron is a framework for writing cross-platform desktop applications using JavaScript, HTML and CSS. A vulnerability in versions prior to 11.5.0, 12.1.0, and 13.3.0 allows a sandboxed renderer to request a "thumbnail" image of an arbitrary file on the user's system. The thumbnail can potentially include significant parts of the original file, including textual data in many cases. Versions 15.0.0-alpha.10, 14.0.0, 13.3.0, 12.1.0, and 11.5.0 all contain a fix for the vulnerability. Two workarounds aside from upgrading are available. One may make the vulnerability significantly more difficult for an attacker to exploit by enabling `contextIsolation` in one's app. One may also disable the functionality of the `createThumbnailFromPath` API if one does not need it.</description>
      <guid isPermaLink="false">CVE-2021-39184|2024-08-04T01:58:18.275Z</guid>
      <pubDate>Tue, 12 Oct 2021 19:05:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-15174|2024-08-04T13:08:22.398Z -- electron -- electron
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15174</link>
      <description>In Electron before versions 11.0.0-beta.1, 10.0.1, 9.3.0 or 8.5.1 the `will-navigate` event that apps use to prevent navigations to unexpected destinations as per our security recommendations can be bypassed when a sub-frame performs a top-frame navigation across sites. The issue is patched in versions 11.0.0-beta.1, 10.0.1, 9.3.0 or 8.5.1 As a workaround sandbox all your iframes using the sandbox attribute. This will prevent them creating top-frame navigations and is good practice anyway.</description>
      <guid isPermaLink="false">CVE-2020-15174|2024-08-04T13:08:22.398Z</guid>
      <pubDate>Tue, 06 Oct 2020 17:35:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-4076|2024-08-04T07:52:20.967Z -- electron -- electron
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-4076</link>
      <description>In Electron before versions 7.2.4, 8.2.4, and 9.0.0-beta21, there is a context isolation bypass. Code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions. Apps using contextIsolation are affected. This is fixed in versions 9.0.0-beta.21, 8.2.4 and 7.2.4.</description>
      <guid isPermaLink="false">CVE-2020-4076|2024-08-04T07:52:20.967Z</guid>
      <pubDate>Tue, 07 Jul 2020 00:05:21 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-15096|2024-08-04T13:08:22.273Z -- electron -- electron
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15096</link>
      <description>In Electron before versions 6.1.1, 7.2.4, 8.2.4, and 9.0.0-beta21, there is a context isolation bypass, meaning that code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions. Apps using "contextIsolation" are affected. There are no app-side workarounds, you must update your Electron version to be protected. This is fixed in versions 6.1.1, 7.2.4, 8.2.4, and 9.0.0-beta21.</description>
      <guid isPermaLink="false">CVE-2020-15096|2024-08-04T13:08:22.273Z</guid>
      <pubDate>Tue, 07 Jul 2020 00:10:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-4077|2024-08-04T07:52:20.939Z -- electron -- electron
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-4077</link>
      <description>In Electron before versions 7.2.4, 8.2.4, and 9.0.0-beta21, there is a context isolation bypass. Code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions. Apps using both `contextIsolation` and `contextBridge` are affected. This is fixed in versions 9.0.0-beta.21, 8.2.4 and 7.2.4.</description>
      <guid isPermaLink="false">CVE-2020-4077|2024-08-04T07:52:20.939Z</guid>
      <pubDate>Tue, 07 Jul 2020 00:05:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-26272|2024-08-04T15:56:04.080Z -- electron -- electron
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-26272</link>
      <description>The Electron framework lets you write cross-platform desktop applications using JavaScript, HTML and CSS. In affected versions of Electron IPC messages sent from the main process to a subframe in the renderer process, through webContents.sendToFrame, event.reply or when using the remote module, can in some cases be delivered to the wrong frame. If your app uses remote, calls webContents.sendToFrame, or calls event.reply in an IPC message handler then it is impacted by this issue. This has been fixed in versions 9.4.0, 10.2.0, 11.1.0, and 12.0.0-beta.9. There are no workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2020-26272|2024-08-04T15:56:04.080Z</guid>
      <pubDate>Thu, 28 Jan 2021 18:25:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29900|2024-07-30T17:50:41.198Z -- electron -- packager</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29900</link>
      <description>Electron Packager bundles Electron-based application source code with a renamed Electron executable and supporting files into folders ready for distribution. A random segment of ~1-10kb of Node.js heap memory allocated either side of a known buffer will be leaked into the final executable. This memory _could_ contain sensitive information such as environment variables, secrets files, etc. This issue is patched in 18.3.1.</description>
      <guid isPermaLink="false">CVE-2024-29900|2024-07-30T17:50:41.198Z</guid>
      <pubDate>Fri, 29 Mar 2024 15:15:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29900|2024-03-29T15:15:45.766Z -- electron -- packager</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29900</link>
      <description>Electron Packager bundles Electron-based application source code with a renamed Electron executable and supporting files into folders ready for distribution. A random segment of ~1-10kb of Node.js heap memory allocated either side of a known buffer will be leaked into the final executable. This memory _could_ contain sensitive information such as environment variables, secrets files, etc. This issue is patched in 18.3.1.</description>
      <guid isPermaLink="false">CVE-2024-29900|2024-03-29T15:15:45.766Z</guid>
      <pubDate>Fri, 29 Mar 2024 15:15:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29900|2024-08-02T01:17:58.508Z -- electron -- packager</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29900</link>
      <description>Electron Packager bundles Electron-based application source code with a renamed Electron executable and supporting files into folders ready for distribution. A random segment of ~1-10kb of Node.js heap memory allocated either side of a known buffer will be leaked into the final executable. This memory _could_ contain sensitive information such as environment variables, secrets files, etc. This issue is patched in 18.3.1.</description>
      <guid isPermaLink="false">CVE-2024-29900|2024-08-02T01:17:58.508Z</guid>
      <pubDate>Fri, 29 Mar 2024 15:15:45 +0000</pubDate>
    </item>
  </channel>
</rss>
