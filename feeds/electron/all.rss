<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for electron -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/electron/all.rss</link>
    <description>The latest CVEs for electron -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 19:20:23 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-23623|2024-08-02T10:35:33.639Z -- electron -- electron
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-23623</link>
      <description>Electron is a framework which lets you write cross-platform desktop applications using JavaScript, HTML and CSS. A Content-Security-Policy that disables eval, specifically setting a `script-src` directive and _not_ providing `unsafe-eval` in that directive, is not respected in renderers that have sandbox disabled.  i.e. `sandbox: false` in the `webPreferences` object. This allows usage of methods like `eval()` and `new Function` unexpectedly which can result in an expanded attack surface. This issue only ever affected the 22 and 23 major versions of Electron and has been fixed in the latest versions of those release lines. Specifically, these versions contain the fixes: 22.0.1 and 23.0.0-alpha.2 We recommend all apps upgrade to the latest stable version of Electron. If upgrading isn't possible, this issue can be addressed without upgrading by enabling `sandbox: true` on all renderers.</description>
      <guid isPermaLink="false">CVE-2023-23623|2024-08-02T10:35:33.639Z</guid>
      <pubDate>Wed, 06 Sep 2023 20:16:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-29198|2024-08-02T14:00:15.868Z -- electron -- electron
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-29198</link>
      <description>Electron is a framework which lets you write cross-platform desktop applications using JavaScript, HTML and CSS. Electron apps using `contextIsolation` and `contextBridge` are affected. This is a context isolation bypass, meaning that code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions. This issue is only exploitable if an API exposed to the main world via `contextBridge` can return an object or array that contains a javascript object which cannot be serialized, for instance, a canvas rendering context. This would normally result in an exception being thrown `Error: object could not be cloned`. The app side workaround is to ensure that such a case is not possible. Ensure all values returned from a function exposed over the context bridge are supported. This issue has been fixed in versions `25.0.0-alpha.2`, `24.0.1`, `23.2.3`, and `22.3.6`.</description>
      <guid isPermaLink="false">CVE-2023-29198|2024-08-02T14:00:15.868Z</guid>
      <pubDate>Wed, 06 Sep 2023 20:13:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-39956|2024-08-02T18:18:10.164Z -- electron -- electron
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39956</link>
      <description>Electron is a framework which lets you write cross-platform desktop applications using JavaScript, HTML and CSS. Electron apps that are launched as command line executables are impacted.   Specifically this issue can only be exploited if the following conditions are met: 1. The app is launched with an attacker-controlled working directory and 2. The attacker has the ability to write files to that working directory. This makes the risk quite low, in fact normally issues of this kind are considered outside of our threat model as similar to Chromium we exclude Physically Local Attacks but given the ability for this issue to bypass certain protections like ASAR Integrity it is being treated with higher importance.  This issue has been fixed in versions:`26.0.0-beta.13`, `25.4.1`, `24.7.1`, `23.3.13`, and `22.3.19`. There are no app side workarounds, users must update to a patched version of Electron.</description>
      <guid isPermaLink="false">CVE-2023-39956|2024-08-02T18:18:10.164Z</guid>
      <pubDate>Wed, 06 Sep 2023 20:09:33 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29900|2024-07-30T17:50:41.198Z -- electron -- packager</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29900</link>
      <description>Electron Packager bundles Electron-based application source code with a renamed Electron executable and supporting files into folders ready for distribution. A random segment of ~1-10kb of Node.js heap memory allocated either side of a known buffer will be leaked into the final executable. This memory _could_ contain sensitive information such as environment variables, secrets files, etc. This issue is patched in 18.3.1.</description>
      <guid isPermaLink="false">CVE-2024-29900|2024-07-30T17:50:41.198Z</guid>
      <pubDate>Fri, 29 Mar 2024 15:15:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29900|2024-03-29T15:15:45.766Z -- electron -- packager</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29900</link>
      <description>Electron Packager bundles Electron-based application source code with a renamed Electron executable and supporting files into folders ready for distribution. A random segment of ~1-10kb of Node.js heap memory allocated either side of a known buffer will be leaked into the final executable. This memory _could_ contain sensitive information such as environment variables, secrets files, etc. This issue is patched in 18.3.1.</description>
      <guid isPermaLink="false">CVE-2024-29900|2024-03-29T15:15:45.766Z</guid>
      <pubDate>Fri, 29 Mar 2024 15:15:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29900|2024-08-02T01:17:58.508Z -- electron -- packager</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29900</link>
      <description>Electron Packager bundles Electron-based application source code with a renamed Electron executable and supporting files into folders ready for distribution. A random segment of ~1-10kb of Node.js heap memory allocated either side of a known buffer will be leaked into the final executable. This memory _could_ contain sensitive information such as environment variables, secrets files, etc. This issue is patched in 18.3.1.</description>
      <guid isPermaLink="false">CVE-2024-29900|2024-08-02T01:17:58.508Z</guid>
      <pubDate>Fri, 29 Mar 2024 15:15:45 +0000</pubDate>
    </item>
  </channel>
</rss>
