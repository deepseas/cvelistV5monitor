<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>CVE Feed for envoyproxy -- envoy</title><link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/envoyproxy/envoy.rss</link><description>The latest CVEs for envoyproxy -- envoy</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><lastBuildDate>Tue, 28 May 2024 22:02:43 +0000</lastBuildDate><ttl>60</ttl><item><title>CVE-2024-32475|2024-04-18T14:18:18.947Z -- envoyproxy -- envoy
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32475</link><description>Envoy is a cloud-native, open source edge and service proxy. When an upstream TLS cluster is used with `auto_sni` enabled, a request containing a `host`/`:authority` header longer than 255 characters triggers an abnormal termination of Envoy process. Envoy does not gracefully handle an error when setting SNI for outbound TLS connection. The error can occur when Envoy attempts to use the `host`/`:authority` header value longer than 255 characters as SNI for outbound TLS connection. SNI length is limited to 255 characters per the standard. Envoy always expects this operation to succeed and abnormally aborts the process when it fails. This vulnerability is fixed in 1.30.1, 1.29.4, 1.28.3, and 1.27.5.
</description><guid isPermaLink="false">CVE-2024-32475|2024-04-18T14:18:18.947Z</guid><pubDate>Thu, 18 Apr 2024 14:18:18 +0000</pubDate></item><item><title>CVE-2024-27919|2024-04-04T14:30:11.144Z -- envoyproxy -- envoy
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27919</link><description>Envoy is a cloud-native, open-source edge and service proxy. In versions 1.29.0 and 1.29.1, theEnvoy HTTP/2 protocol stack is vulnerable to the flood of CONTINUATION frames. Envoy's HTTP/2 codec does not reset a request when header map limits have been exceeded. This allows an attacker to send an sequence of CONTINUATION frames without the END_HEADERS bit set causing unlimited memory consumption. This can lead to denial of service through memory exhaustion. Users should upgrade to versions 1.29.2 to mitigate the effects of the CONTINUATION flood. Note that this vulnerability is a regression in Envoy version 1.29.0 and 1.29.1 only. As a workaround, downgrade to version 1.28.1 or earlier or disable HTTP/2 protocol for downstream connections.</description><guid isPermaLink="false">CVE-2024-27919|2024-04-04T14:30:11.144Z</guid><pubDate>Thu, 04 Apr 2024 14:30:11 +0000</pubDate></item><item><title>CVE-2024-23327|2024-02-09T22:41:54.896Z -- envoyproxy -- envoy
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23327</link><description>Envoy is a high-performance edge/middle/service proxy. When PPv2 is enabled both on a listener and subsequent cluster, the Envoy instance will segfault when attempting to craft the upstream PPv2 header. This occurs when the downstream request has a command type of LOCAL and does not have the protocol block. This issue has been addressed in releases 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description><guid isPermaLink="false">CVE-2024-23327|2024-02-09T22:41:54.896Z</guid><pubDate>Fri, 09 Feb 2024 22:41:54 +0000</pubDate></item><item><title>CVE-2024-23322|2024-02-09T22:51:53.539Z -- envoyproxy -- envoy
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23322</link><description>Envoy is a high-performance edge/middle/service proxy. Envoy will crash when certain timeouts happen within the same interval. The crash occurs when the following are true: 1. hedge_on_per_try_timeout is enabled, 2. per_try_idle_timeout is enabled (it can only be done in configuration), 3. per-try-timeout is enabled, either through headers or configuration and its value is equal, or within the backoff interval of the per_try_idle_timeout. This issue has been addressed in released 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description><guid isPermaLink="false">CVE-2024-23322|2024-02-09T22:51:53.539Z</guid><pubDate>Fri, 09 Feb 2024 22:51:53 +0000</pubDate></item><item><title>CVE-2024-23323|2024-02-09T22:50:18.938Z -- envoyproxy -- envoy
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23323</link><description>Envoy is a high-performance edge/middle/service proxy. The regex expression is compiled for every request and can result in high CPU usage and increased request latency when multiple routes are configured with such matchers. This issue has been addressed in released 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description><guid isPermaLink="false">CVE-2024-23323|2024-02-09T22:50:18.938Z</guid><pubDate>Fri, 09 Feb 2024 22:50:18 +0000</pubDate></item><item><title>CVE-2024-23324|2024-02-09T22:48:26.889Z -- envoyproxy -- envoy
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23324</link><description>Envoy is a high-performance edge/middle/service proxy. External authentication can be bypassed by downstream connections. Downstream clients can force invalid gRPC requests to be sent to ext_authz, circumventing ext_authz checks when failure_mode_allow is set to true. This issue has been addressed in released 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.
</description><guid isPermaLink="false">CVE-2024-23324|2024-02-09T22:48:26.889Z</guid><pubDate>Fri, 09 Feb 2024 22:48:26 +0000</pubDate></item><item><title>CVE-2024-23325|2024-02-09T22:47:13.048Z -- envoyproxy -- envoy
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23325</link><description>Envoy is a high-performance edge/middle/service proxy. Envoy crashes in Proxy protocol when using an address type that isnâ€™t supported by the OS. Envoy is susceptible to crashing on a host with IPv6 disabled and a listener config with proxy protocol enabled when it receives a request where the client presents its IPv6 address.  It is valid for a client to present its IPv6 address to a target server even though the whole chain is connected via IPv4. This issue has been addressed in released 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description><guid isPermaLink="false">CVE-2024-23325|2024-02-09T22:47:13.048Z</guid><pubDate>Fri, 09 Feb 2024 22:47:13 +0000</pubDate></item><item><title>CVE-2024-30255|2024-04-04T19:41:02.634Z -- envoyproxy -- envoy
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-30255</link><description>Envoy is a cloud-native, open source edge and service proxy. The HTTP/2 protocol stack in Envoy versions prior to 1.29.3, 1.28.2, 1.27.4, and 1.26.8 are vulnerable to CPU exhaustion due to flood of CONTINUATION frames. Envoy's HTTP/2 codec allows the client to send an unlimited number of CONTINUATION frames even after exceeding Envoy's header map limits. This allows an attacker to send a sequence of CONTINUATION frames without the END_HEADERS bit set causing CPU utilization, consuming approximately 1 core per 300Mbit/s of traffic and culminating in denial of service through CPU exhaustion. Users should upgrade to version 1.29.3, 1.28.2, 1.27.4, or 1.26.8 to mitigate the effects of the CONTINUATION flood. As a workaround, disable HTTP/2 protocol for downstream connections.</description><guid isPermaLink="false">CVE-2024-30255|2024-04-04T19:41:02.634Z</guid><pubDate>Thu, 04 Apr 2024 19:41:02 +0000</pubDate></item></channel></rss>