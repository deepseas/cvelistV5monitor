<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Byron -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/byron/all.rss</link>
    <description>The latest CVEs for Byron -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 06 Sep 2024 14:22:54 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-45405|2024-09-06T13:10:31.602Z -- byron -- gitoxide
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45405</link>
      <description>`gix-path` is a crate of the `gitoxide` project (an implementation of `git` written in Rust) dealing paths and their conversions. Prior to version 0.10.11, `gix-path` runs `git` to find the path of a configuration file associated with the `git` installation, but improperly resolves paths containing unusual or non-ASCII characters, in rare cases enabling a local attacker to inject configuration leading to code execution. Version 0.10.11 contains a patch for the issue.

In `gix_path::env`, the underlying implementation of the `installation_config` and `installation_config_prefix` functions calls `git config -l --show-origin` to find the path of a file to treat as belonging to the `git` installation. Affected versions of `gix-path` do not pass `-z`/`--null` to cause `git` to report literal paths. Instead, to cover the occasional case that `git` outputs a quoted path, they attempt to parse the path by stripping the quotation marks. The problem is that, when a path is quoted, it may change in substantial ways beyond the concatenation of quotation marks. If not reversed, these changes can result in another valid path that is not equivalent to the original.

On a single-user system, it is not possible to exploit this, unless `GIT_CONFIG_SYSTEM` and `GIT_CONFIG_GLOBAL` have been set to unusual values or Git has been installed in an unusual way. Such a scenario is not expected. Exploitation is unlikely even on a multi-user system, though it is plausible in some uncommon configurations or use cases. In general, exploitation is more likely to succeed if users are expected to install `git` themselves, and are likely to do so in predictable locations; locations where `git` is installed, whether due to usernames in their paths or otherwise, contain characters that `git` quotes by default in paths, such as non-English letters and accented letters; a custom `system`-scope configuration file is specified with the `GIT_CONFIG_SYSTEM` environment variable, and its path is in an unusual location or has strangely named components; or a `system`-scope configuration file is absent, empty, or suppressed by means other than `GIT_CONFIG_NOSYSTEM`. Currently, `gix-path` can treat a `global`-scope configuration file as belonging to the installation if no higher scope configuration file is available. This increases the likelihood of exploitation even on a system where `git` is installed system-wide in an ordinary way. However, exploitation is expected to be very difficult even under any combination of those factors.</description>
      <guid isPermaLink="false">CVE-2024-45405|2024-09-06T13:10:31.602Z</guid>
      <pubDate>Fri, 06 Sep 2024 13:10:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-45305|2024-09-02T16:30:25.446Z -- byron -- gitoxide</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45305</link>
      <description>gix-path is a crate of the gitoxide project dealing with git paths and their conversions. `gix-path` executes `git` to find the path of a configuration file that belongs to the `git` installation itself, but mistakenly treats the local repository's configuration as system-wide if no higher scoped configuration is found. In rare cases, this causes a less trusted repository to be treated as more trusted, or leaks sensitive information from one repository to another, such as sending credentials to another repository's remote. In `gix_path::env`, the underlying implementation of the `installation_config` and `installation_config_prefix` functions calls `git config -l --show-origin` and parses the first line of the output to extract the path to the configuration file holding the configuration variable of highest scope. It is believed to be very difficult to exploit this vulnerability deliberately, due to the need either to anticipate a situation in which higher-scoped configuration variables would be absent, or to arrange for this to happen. Although any operating system may be affected, users running Apple Git on macOS are much less likely to be affected. This issue has been addressed in release version 0.10.10. All users are advised to upgrade.</description>
      <guid isPermaLink="false">CVE-2024-45305|2024-09-02T16:30:25.446Z</guid>
      <pubDate>Mon, 02 Sep 2024 16:30:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-43785|2024-08-22T16:38:20.271Z -- byron -- gitoxide</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-43785</link>
      <description>gitoxide An idiomatic, lean, fast &amp; safe pure Rust implementation of Git. gitoxide-core, which provides most underlying functionality of the gix and ein commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</description>
      <guid isPermaLink="false">CVE-2024-43785|2024-08-22T16:38:20.271Z</guid>
      <pubDate>Thu, 22 Aug 2024 14:19:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40644|2024-08-02T04:33:11.977Z -- byron -- gitoxide</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40644</link>
      <description>gitoxide An idiomatic, lean, fast &amp; safe pure Rust implementation of Git. `gix-path` can be tricked into running another `git.exe` placed in an untrusted location by a limited user account on Windows systems. Windows permits limited user accounts without administrative privileges to create new directories in the root of the system drive. While `gix-path` first looks for `git` using a `PATH` search, in version 0.10.8 it also has a fallback strategy on Windows of checking two hard-coded paths intended to be the 64-bit and 32-bit Program Files directories. Existing functions, as well as the newly introduced `exe_invocation` function, were updated to make use of these alternative locations. This causes facilities in `gix_path::env` to directly execute `git.exe` in those locations, as well as to return its path or whatever configuration it reports to callers who rely on it. Although unusual setups where the system drive is not `C:`, or even where Program Files directories have non-default names, are technically possible, the main problem arises on a 32-bit Windows system. Such a system has no `C:\Program Files (x86)` directory. A limited user on a 32-bit Windows system can therefore create the `C:\Program Files (x86)` directory and populate it with arbitrary contents. Once a payload has been placed at the second of the two hard-coded paths in this way, other user accounts including administrators will execute it if they run an application that uses `gix-path` and do not have `git` in a `PATH` directory. (While having `git` found in a `PATH` search prevents exploitation, merely having it installed in the default location under the real `C:\Program Files` directory does not. This is because the first hard-coded path's `mingw64` component assumes a 64-bit installation.). Only Windows is affected. Exploitation is unlikely except on a 32-bit system. In particular, running a 32-bit build on a 64-bit system is not a risk factor. Furthermore, the attacker must have a user account on the system, though it may be a relatively unprivileged account. Such a user can perform privilege escalation and execute code as another user, though it may be difficult to do so reliably because the targeted user account must run an application or service that uses `gix-path` and must not have `git` in its `PATH`. The main exploitable configuration is one where Git for Windows has been installed but not added to `PATH`. This is one of the options in its installer, though not the default option. Alternatively, an affected program that sanitizes its `PATH` to remove seemingly nonessential directories could allow exploitation. But for the most part, if the target user has configured a `PATH` in which the real `git.exe` can be found, then this cannot be exploited. This issue has been addressed in release version 0.10.9 and all users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-40644|2024-08-02T04:33:11.977Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:56:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32884|2024-08-02T02:20:35.704Z -- byron -- gitoxide</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32884</link>
      <description>gitoxide is a pure Rust implementation of Git. `gix-transport` does not check the username part of a URL for text that the external `ssh` program would interpret as an option. A specially crafted clone URL can smuggle options to SSH. The possibilities are syntactically limited, but if a malicious clone URL is used by an application whose current working directory contains a malicious file, arbitrary code execution occurs. This is related to the patched vulnerability GHSA-rrjw-j4m2-mf34, but appears less severe due to a greater attack complexity. This issue has been patched in versions 0.35.0, 0.42.0 and 0.62.0.</description>
      <guid isPermaLink="false">CVE-2024-32884|2024-08-02T02:20:35.704Z</guid>
      <pubDate>Fri, 26 Apr 2024 18:04:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40644|2024-07-18T16:56:35.915Z -- byron -- gitoxide</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40644</link>
      <description>gitoxide An idiomatic, lean, fast &amp; safe pure Rust implementation of Git. `gix-path` can be tricked into running another `git.exe` placed in an untrusted location by a limited user account on Windows systems. Windows permits limited user accounts without administrative privileges to create new directories in the root of the system drive. While `gix-path` first looks for `git` using a `PATH` search, in version 0.10.8 it also has a fallback strategy on Windows of checking two hard-coded paths intended to be the 64-bit and 32-bit Program Files directories. Existing functions, as well as the newly introduced `exe_invocation` function, were updated to make use of these alternative locations. This causes facilities in `gix_path::env` to directly execute `git.exe` in those locations, as well as to return its path or whatever configuration it reports to callers who rely on it. Although unusual setups where the system drive is not `C:`, or even where Program Files directories have non-default names, are technically possible, the main problem arises on a 32-bit Windows system. Such a system has no `C:\Program Files (x86)` directory. A limited user on a 32-bit Windows system can therefore create the `C:\Program Files (x86)` directory and populate it with arbitrary contents. Once a payload has been placed at the second of the two hard-coded paths in this way, other user accounts including administrators will execute it if they run an application that uses `gix-path` and do not have `git` in a `PATH` directory. (While having `git` found in a `PATH` search prevents exploitation, merely having it installed in the default location under the real `C:\Program Files` directory does not. This is because the first hard-coded path's `mingw64` component assumes a 64-bit installation.). Only Windows is affected. Exploitation is unlikely except on a 32-bit system. In particular, running a 32-bit build on a 64-bit system is not a risk factor. Furthermore, the attacker must have a user account on the system, though it may be a relatively unprivileged account. Such a user can perform privilege escalation and execute code as another user, though it may be difficult to do so reliably because the targeted user account must run an application or service that uses `gix-path` and must not have `git` in its `PATH`. The main exploitable configuration is one where Git for Windows has been installed but not added to `PATH`. This is one of the options in its installer, though not the default option. Alternatively, an affected program that sanitizes its `PATH` to remove seemingly nonessential directories could allow exploitation. But for the most part, if the target user has configured a `PATH` in which the real `git.exe` can be found, then this cannot be exploited. This issue has been addressed in release version 0.10.9 and all users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-40644|2024-07-18T16:56:35.915Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:56:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35186|2024-06-04T17:34:36.271Z -- byron -- gitoxide</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35186</link>
      <description>gitoxide is a pure Rust implementation of Git. During checkout, `gix-worktree-state` does not verify that paths point to locations in the working tree. A specially crafted repository can, when cloned, place new files anywhere writable by the application. This vulnerability leads to a major loss of confidentiality, integrity, and availability, but creating files outside a working tree without attempting to execute code can directly impact integrity as well. This vulnerability has been patched in version(s) 0.36.0.</description>
      <guid isPermaLink="false">CVE-2024-35186|2024-06-04T17:34:36.271Z</guid>
      <pubDate>Thu, 23 May 2024 08:55:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35197|2024-06-04T17:34:47.644Z -- byron -- gitoxide</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35197</link>
      <description>gitoxide is a pure Rust implementation of Git. On Windows, fetching refs that clash with legacy device names reads from the devices, and checking out paths that clash with such names writes arbitrary data to the devices. This allows a repository, when cloned, to cause indefinite blocking or the production of arbitrary message that appear to have come from the application, and potentially other harmful effects under limited circumstances. If Windows is not used, or untrusted repositories are not cloned or otherwise used, then there is no impact. A minor degradation in availability may also be possible, such as with a very large file named `CON`, though the user could interrupt the application.</description>
      <guid isPermaLink="false">CVE-2024-35197|2024-06-04T17:34:47.644Z</guid>
      <pubDate>Thu, 23 May 2024 12:09:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32884|2024-06-04T17:49:52.416Z -- byron -- gitoxide</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32884</link>
      <description>gitoxide is a pure Rust implementation of Git. `gix-transport` does not check the username part of a URL for text that the external `ssh` program would interpret as an option. A specially crafted clone URL can smuggle options to SSH. The possibilities are syntactically limited, but if a malicious clone URL is used by an application whose current working directory contains a malicious file, arbitrary code execution occurs. This is related to the patched vulnerability GHSA-rrjw-j4m2-mf34, but appears less severe due to a greater attack complexity. This issue has been patched in versions 0.35.0, 0.42.0 and 0.62.0.</description>
      <guid isPermaLink="false">CVE-2024-32884|2024-06-04T17:49:52.416Z</guid>
      <pubDate>Fri, 26 Apr 2024 18:04:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40644|2024-07-18T19:36:08.077Z -- byron -- gitoxide</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40644</link>
      <description>gitoxide An idiomatic, lean, fast &amp; safe pure Rust implementation of Git. `gix-path` can be tricked into running another `git.exe` placed in an untrusted location by a limited user account on Windows systems. Windows permits limited user accounts without administrative privileges to create new directories in the root of the system drive. While `gix-path` first looks for `git` using a `PATH` search, in version 0.10.8 it also has a fallback strategy on Windows of checking two hard-coded paths intended to be the 64-bit and 32-bit Program Files directories. Existing functions, as well as the newly introduced `exe_invocation` function, were updated to make use of these alternative locations. This causes facilities in `gix_path::env` to directly execute `git.exe` in those locations, as well as to return its path or whatever configuration it reports to callers who rely on it. Although unusual setups where the system drive is not `C:`, or even where Program Files directories have non-default names, are technically possible, the main problem arises on a 32-bit Windows system. Such a system has no `C:\Program Files (x86)` directory. A limited user on a 32-bit Windows system can therefore create the `C:\Program Files (x86)` directory and populate it with arbitrary contents. Once a payload has been placed at the second of the two hard-coded paths in this way, other user accounts including administrators will execute it if they run an application that uses `gix-path` and do not have `git` in a `PATH` directory. (While having `git` found in a `PATH` search prevents exploitation, merely having it installed in the default location under the real `C:\Program Files` directory does not. This is because the first hard-coded path's `mingw64` component assumes a 64-bit installation.). Only Windows is affected. Exploitation is unlikely except on a 32-bit system. In particular, running a 32-bit build on a 64-bit system is not a risk factor. Furthermore, the attacker must have a user account on the system, though it may be a relatively unprivileged account. Such a user can perform privilege escalation and execute code as another user, though it may be difficult to do so reliably because the targeted user account must run an application or service that uses `gix-path` and must not have `git` in its `PATH`. The main exploitable configuration is one where Git for Windows has been installed but not added to `PATH`. This is one of the options in its installer, though not the default option. Alternatively, an affected program that sanitizes its `PATH` to remove seemingly nonessential directories could allow exploitation. But for the most part, if the target user has configured a `PATH` in which the real `git.exe` can be found, then this cannot be exploited. This issue has been addressed in release version 0.10.9 and all users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-40644|2024-07-18T19:36:08.077Z</guid>
      <pubDate>Thu, 18 Jul 2024 16:56:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35186|2024-08-02T03:07:46.876Z -- byron -- gitoxide</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-35186</link>
      <description>gitoxide is a pure Rust implementation of Git. During checkout, `gix-worktree-state` does not verify that paths point to locations in the working tree. A specially crafted repository can, when cloned, place new files anywhere writable by the application. This vulnerability leads to a major loss of confidentiality, integrity, and availability, but creating files outside a working tree without attempting to execute code can directly impact integrity as well. This vulnerability has been patched in version(s) 0.36.0.</description>
      <guid isPermaLink="false">CVE-2024-35186|2024-08-02T03:07:46.876Z</guid>
      <pubDate>Thu, 23 May 2024 08:55:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35197|2024-08-02T03:07:46.729Z -- byron -- gitoxide</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-35197</link>
      <description>gitoxide is a pure Rust implementation of Git. On Windows, fetching refs that clash with legacy device names reads from the devices, and checking out paths that clash with such names writes arbitrary data to the devices. This allows a repository, when cloned, to cause indefinite blocking or the production of arbitrary message that appear to have come from the application, and potentially other harmful effects under limited circumstances. If Windows is not used, or untrusted repositories are not cloned or otherwise used, then there is no impact. A minor degradation in availability may also be possible, such as with a very large file named `CON`, though the user could interrupt the application.</description>
      <guid isPermaLink="false">CVE-2024-35197|2024-08-02T03:07:46.729Z</guid>
      <pubDate>Thu, 23 May 2024 12:09:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-43785|2024-08-22T14:19:31.070Z -- byron -- gitoxide</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-43785</link>
      <description>gitoxide An idiomatic, lean, fast &amp; safe pure Rust implementation of Git. gitoxide-core, which provides most underlying functionality of the gix and ein commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</description>
      <guid isPermaLink="false">CVE-2024-43785|2024-08-22T14:19:31.070Z</guid>
      <pubDate>Thu, 22 Aug 2024 14:19:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-43785|2024-08-22T21:45:40.662Z -- byron -- gitoxide</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-43785</link>
      <description>gitoxide An idiomatic, lean, fast &amp; safe pure Rust implementation of Git. gitoxide-core, which provides most underlying functionality of the gix and ein commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</description>
      <guid isPermaLink="false">CVE-2024-43785|2024-08-22T21:45:40.662Z</guid>
      <pubDate>Thu, 22 Aug 2024 14:19:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-45305|2024-09-03T14:12:44.258Z -- byron -- gitoxide</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45305</link>
      <description>gix-path is a crate of the gitoxide project dealing with git paths and their conversions. `gix-path` executes `git` to find the path of a configuration file that belongs to the `git` installation itself, but mistakenly treats the local repository's configuration as system-wide if no higher scoped configuration is found. In rare cases, this causes a less trusted repository to be treated as more trusted, or leaks sensitive information from one repository to another, such as sending credentials to another repository's remote. In `gix_path::env`, the underlying implementation of the `installation_config` and `installation_config_prefix` functions calls `git config -l --show-origin` and parses the first line of the output to extract the path to the configuration file holding the configuration variable of highest scope. It is believed to be very difficult to exploit this vulnerability deliberately, due to the need either to anticipate a situation in which higher-scoped configuration variables would be absent, or to arrange for this to happen. Although any operating system may be affected, users running Apple Git on macOS are much less likely to be affected. This issue has been addressed in release version 0.10.10. All users are advised to upgrade.</description>
      <guid isPermaLink="false">CVE-2024-45305|2024-09-03T14:12:44.258Z</guid>
      <pubDate>Mon, 02 Sep 2024 16:30:25 +0000</pubDate>
    </item>
  </channel>
</rss>
