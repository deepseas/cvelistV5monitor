<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for yandex -- clickhouse</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/yandex/clickhouse.rss</link>
    <description>The latest CVEs for yandex -- clickhouse</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 14:23:04 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-42391|2024-08-04T03:30:38.353Z -- yandex -- clickhouse
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-42391</link>
      <description>Divide-by-zero in Clickhouse's Gorilla compression codec when parsing a malicious query. The first byte of the compressed buffer is used in a modulo operation without being checked for 0.</description>
      <guid isPermaLink="false">CVE-2021-42391|2024-08-04T03:30:38.353Z</guid>
      <pubDate>Mon, 14 Mar 2022 22:20:33 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-42388|2024-08-04T03:30:38.323Z -- yandex -- clickhouse
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-42388</link>
      <description>Heap out-of-bounds read in Clickhouse's LZ4 compression codec when parsing a malicious query. As part of the LZ4::decompressImpl() loop, a 16-bit unsigned user-supplied value ('offset') is read from the compressed data. The offset is later used in the length of a copy operation, without checking the lower bounds of the source of the copy operation.</description>
      <guid isPermaLink="false">CVE-2021-42388|2024-08-04T03:30:38.323Z</guid>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-42387|2024-08-04T03:30:38.465Z -- yandex -- clickhouse
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-42387</link>
      <description>Heap out-of-bounds read in Clickhouse's LZ4 compression codec when parsing a malicious query. As part of the LZ4::decompressImpl() loop, a 16-bit unsigned user-supplied value ('offset') is read from the compressed data. The offset is later used in the length of a copy operation, without checking the upper bounds of the source of the copy operation.</description>
      <guid isPermaLink="false">CVE-2021-42387|2024-08-04T03:30:38.465Z</guid>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-42390|2024-08-04T03:30:38.448Z -- yandex -- clickhouse
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-42390</link>
      <description>Divide-by-zero in Clickhouse's DeltaDouble compression codec when parsing a malicious query. The first byte of the compressed buffer is used in a modulo operation without being checked for 0.</description>
      <guid isPermaLink="false">CVE-2021-42390|2024-08-04T03:30:38.448Z</guid>
      <pubDate>Mon, 14 Mar 2022 22:20:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-43305|2024-08-04T03:55:29.085Z -- yandex -- clickhouse
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-43305</link>
      <description>Heap buffer overflow in Clickhouse's LZ4 compression codec when parsing a malicious query. There is no verification that the copy operations in the LZ4::decompressImpl loop and especially the arbitrary copy operation wildCopy&lt;copy_amount&gt;(op, ip, copy_end), don’t exceed the destination buffer’s limits. This issue is very similar to CVE-2021-43304, but the vulnerable copy operation is in a different wildCopy call.</description>
      <guid isPermaLink="false">CVE-2021-43305|2024-08-04T03:55:29.085Z</guid>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-42389|2024-08-04T03:30:38.260Z -- yandex -- clickhouse
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-42389</link>
      <description>Divide-by-zero in Clickhouse's Delta compression codec when parsing a malicious query. The first byte of the compressed buffer is used in a modulo operation without being checked for 0.</description>
      <guid isPermaLink="false">CVE-2021-42389|2024-08-04T03:30:38.260Z</guid>
      <pubDate>Mon, 14 Mar 2022 22:20:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-43304|2024-08-04T03:55:28.381Z -- yandex -- clickhouse
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-43304</link>
      <description>Heap buffer overflow in Clickhouse's LZ4 compression codec when parsing a malicious query. There is no verification that the copy operations in the LZ4::decompressImpl loop and especially the arbitrary copy operation wildCopy&lt;copy_amount&gt;(op, ip, copy_end), don’t exceed the destination buffer’s limits.</description>
      <guid isPermaLink="false">CVE-2021-43304|2024-08-04T03:55:28.381Z</guid>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
