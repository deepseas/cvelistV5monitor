<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for open-quantum-safe -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/open-quantum-safe/all.rss</link>
    <description>The latest CVEs for open-quantum-safe -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 18 Jun 2024 14:21:55 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-37305|2024-06-18T13:42:29.675Z -- open-quantum-safe -- oqs-provider
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37305</link>
      <description>oqs-provider is a provider for the OpenSSL 3 cryptography library that adds support for post-quantum cryptography in TLS, X.509, and S/MIME using post-quantum algorithms from liboqs. Flaws have been identified in the way oqs-provider handles lengths decoded with DECODE_UINT32 at the start of serialized hybrid (traditional + post-quantum) keys and signatures. Unchecked length values are later used for memory reads and writes; malformed input can lead to crashes or information leakage. Handling of plain/non-hybrid PQ key operation is not affected. This issue has been patched in in v0.6.1. All users are advised to upgrade. There are no workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2024-37305|2024-06-18T13:42:29.675Z</guid>
      <pubDate>Mon, 17 Jun 2024 19:42:22 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-36405|2024-06-10T18:09:22.295Z -- open-quantum-safe -- liboqs</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-36405</link>
      <description>liboqs is a C-language cryptographic library that provides implementations of post-quantum cryptography algorithms. A control-flow timing lean has been identified in the reference implementation of the Kyber key encapsulation mechanism when it is compiled with Clang 15-18 for `-Os`, `-O1`, and other compilation options. A proof-of-concept local attack on the reference implementation leaks the entire ML-KEM 512 secret key in ~10 minutes using end-to-end decapsulation timing measurements. The issue has been fixed in version 0.10.1. As a possible workaround, some compiler options may produce vectorized code that does not leak secret information, however relying on these compiler options as a workaround may not be reliable.</description>
      <guid isPermaLink="false">CVE-2024-36405|2024-06-10T18:09:22.295Z</guid>
      <pubDate>Mon, 10 Jun 2024 12:47:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-37305|2024-06-17T19:42:22.091Z -- open-quantum-safe -- oqs-provider</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-37305</link>
      <description>oqs-provider is a provider for the OpenSSL 3 cryptography library that adds support for post-quantum cryptography in TLS, X.509, and S/MIME using post-quantum algorithms from liboqs. Flaws have been identified in the way oqs-provider handles lengths decoded with DECODE_UINT32 at the start of serialized hybrid (traditional + post-quantum) keys and signatures. Unchecked length values are later used for memory reads and writes; malformed input can lead to crashes or information leakage. Handling of plain/non-hybrid PQ key operation is not affected. This issue has been patched in in v0.6.1. All users are advised to upgrade. There are no workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2024-37305|2024-06-17T19:42:22.091Z</guid>
      <pubDate>Mon, 17 Jun 2024 19:42:22 +0000</pubDate>
    </item>
  </channel>
</rss>
