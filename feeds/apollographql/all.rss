<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for apollographql -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/apollographql/all.rss</link>
    <description>The latest CVEs for apollographql -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Wed, 03 Jul 2024 21:21:36 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-32971|2024-07-03T20:56:05.085Z -- apollographql -- router
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32971</link>
      <description>Apollo Router is a configurable, graph router written in Rust to run a federated supergraph that uses Apollo Federation 2. The affected versions of Apollo Router contain a bug that in limited circumstances, could lead to unexpected operations being executed which can result in unintended data or effects. This only affects Router instances configured to use distributed query plan caching. The root cause of this defect is a bug in Apollo Router’s cache retrieval logic: When this defect is present and distributed query planning caching is enabled, asking the Router to execute an operation (whether it is a query, a mutation, or a subscription) may result in an unexpected variation of that operation being executed or the generation of unexpected errors. The issue stems from inadvertently executing a modified version of a previously executed operation, whose query plan is stored in the underlying cache (specifically, Redis). Depending on the type of the operation, the result may vary. For a query, results may be fetched that don’t match what was requested (e.g., rather than running `fetchUsers(type: ENTERPRISE)` the Router may run `fetchUsers(type: TRIAL)`. For a mutation, this may result in incorrect mutations being sent to underlying subgraph servers (e.g., rather than sending `deleteUser(id: 10)` to a subgraph, the Router may run `deleteUser(id: 12)`. Users who are using distributed query plan caching, are advised to either upgrade to version 1.45.1 or above or downgrade to version 1.43.2 of the Apollo Router. Apollo Router versions 1.44.0 or 1.45.0 are not recommended for use and have been withdrawn. Users unable to upgrade can disable distributed query plan caching to mitigate this issue.</description>
      <guid isPermaLink="false">CVE-2024-32971|2024-07-03T20:56:05.085Z</guid>
      <pubDate>Thu, 02 May 2024 06:43:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-23841|2024-01-30T17:14:12.023Z -- apollographql -- apollo-client-nextjs</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-23841</link>
      <description>apollo-client-nextjs is the Apollo Client support for the Next.js App Router. The @apollo/experimental-apollo-client-nextjs NPM package is vulnerable to a cross-site scripting vulnerability. To exploit this vulnerability, an attacker would need to either inject malicious input (e.g. by redirecting a user to a specifically-crafted link) or arrange to have malicious input be returned by a GraphQL server (e.g. by persisting it in a database). To fix this issue, please update to version 0.7.0 or later.</description>
      <guid isPermaLink="false">CVE-2024-23841|2024-01-30T17:14:12.023Z</guid>
      <pubDate>Tue, 30 Jan 2024 17:14:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32971|2024-05-02T06:43:27.646Z -- apollographql -- router</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32971</link>
      <description>Apollo Router is a configurable, graph router written in Rust to run a federated supergraph that uses Apollo Federation 2. The affected versions of Apollo Router contain a bug that in limited circumstances, could lead to unexpected operations being executed which can result in unintended data or effects. This only affects Router instances configured to use distributed query plan caching. The root cause of this defect is a bug in Apollo Router’s cache retrieval logic: When this defect is present and distributed query planning caching is enabled, asking the Router to execute an operation (whether it is a query, a mutation, or a subscription) may result in an unexpected variation of that operation being executed or the generation of unexpected errors. The issue stems from inadvertently executing a modified version of a previously executed operation, whose query plan is stored in the underlying cache (specifically, Redis). Depending on the type of the operation, the result may vary. For a query, results may be fetched that don’t match what was requested (e.g., rather than running `fetchUsers(type: ENTERPRISE)` the Router may run `fetchUsers(type: TRIAL)`. For a mutation, this may result in incorrect mutations being sent to underlying subgraph servers (e.g., rather than sending `deleteUser(id: 10)` to a subgraph, the Router may run `deleteUser(id: 12)`. Users who are using distributed query plan caching, are advised to either upgrade to version 1.45.1 or above or downgrade to version 1.43.2 of the Apollo Router. Apollo Router versions 1.44.0 or 1.45.0 are not recommended for use and have been withdrawn. Users unable to upgrade can disable distributed query plan caching to mitigate this issue.</description>
      <guid isPermaLink="false">CVE-2024-32971|2024-05-02T06:43:27.646Z</guid>
      <pubDate>Thu, 02 May 2024 06:43:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-28101|2024-03-06T21:07:36.476Z -- apollographql -- router</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-28101</link>
      <description>The Apollo Router is a graph router written in Rust to run a federated supergraph that uses Apollo Federation. Versions 0.9.5 until 1.40.2 are subject to a Denial-of-Service (DoS) type vulnerability. When receiving compressed HTTP payloads, affected versions of the Router evaluate the `limits.http_max_request_bytes` configuration option after the entirety of the compressed payload is decompressed. If affected versions of the Router receive highly compressed payloads, this could result in significant memory consumption while the compressed payload is expanded. Router version 1.40.2 has a fix for the vulnerability. Those who are unable to upgrade may be able to implement mitigations at proxies or load balancers positioned in front of their Router fleet (e.g. Nginx, HAProxy, or cloud-native WAF services) by creating limits on HTTP body upload size.</description>
      <guid isPermaLink="false">CVE-2024-28101|2024-03-06T21:07:36.476Z</guid>
      <pubDate>Wed, 06 Mar 2024 21:07:36 +0000</pubDate>
    </item>
  </channel>
</rss>
