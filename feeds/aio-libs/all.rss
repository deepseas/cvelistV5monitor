<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for aio-libs -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/aio-libs/all.rss</link>
    <description>The latest CVEs for aio-libs -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 22:22:55 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-49082|2024-08-02T21:46:29.121Z -- aio-libs -- aiohttp
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-49082</link>
      <description>aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Improper validation makes it possible for an attacker to modify the HTTP request (e.g. insert a new header) or even create a new HTTP request if the attacker controls the HTTP method. The vulnerability occurs only if the attacker can control the HTTP method (GET, POST etc.) of the request. If the attacker can control the HTTP version of the request it will be able to modify the request (request smuggling). This issue has been patched in version 3.9.0.</description>
      <guid isPermaLink="false">CVE-2023-49082|2024-08-02T21:46:29.121Z</guid>
      <pubDate>Wed, 29 Nov 2023 20:07:29 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-47627|2024-08-02T21:16:42.304Z -- aio-libs -- aiohttp
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-47627</link>
      <description>aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. The HTTP parser in AIOHTTP has numerous problems with header parsing, which could lead to request smuggling. This parser is only used when AIOHTTP_NO_EXTENSIONS is enabled (or not using a prebuilt wheel). These bugs have been addressed in commit `d5c12ba89` which has been included in release version 3.8.6. Users are advised to upgrade. There are no known workarounds for these issues.</description>
      <guid isPermaLink="false">CVE-2023-47627|2024-08-02T21:16:42.304Z</guid>
      <pubDate>Tue, 14 Nov 2023 20:48:48 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-49081|2024-08-02T21:46:28.933Z -- aio-libs -- aiohttp
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-49081</link>
      <description>aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Improper validation made it possible for an attacker to modify the HTTP request (e.g. to insert a new header) or create a new HTTP request if the attacker controls the HTTP version. The vulnerability only occurs if the attacker can control the HTTP version of the request. This issue has been patched in version 3.9.0.</description>
      <guid isPermaLink="false">CVE-2023-49081|2024-08-02T21:46:28.933Z</guid>
      <pubDate>Thu, 30 Nov 2023 06:56:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-47641|2024-08-02T21:16:42.297Z -- aio-libs -- aiohttp
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-47641</link>
      <description>aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Affected versions of aiohttp have a security vulnerability regarding the inconsistent interpretation of the http protocol. HTTP/1.1 is a persistent protocol, if both Content-Length(CL) and Transfer-Encoding(TE) header values are present it can lead to incorrect interpretation of two entities that parse the HTTP and we can poison other sockets with this incorrect interpretation. A possible Proof-of-Concept (POC) would be a configuration with a reverse proxy(frontend) that accepts both CL and TE headers and aiohttp as backend. As aiohttp parses anything with chunked, we can pass a chunked123 as TE, the frontend entity will ignore this header and will parse Content-Length. The impact of this vulnerability is that it is possible to bypass any proxy rule, poisoning sockets to other users like passing Authentication Headers, also if it is present an Open Redirect an attacker could combine it to redirect random users to another website and log the request. This vulnerability has been addressed in release 3.8.0 of aiohttp. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2023-47641|2024-08-02T21:16:42.297Z</guid>
      <pubDate>Tue, 14 Nov 2023 20:44:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-37276|2024-08-02T17:09:34.028Z -- aio-libs -- aiohttp
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-37276</link>
      <description>aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. aiohttp v3.8.4 and earlier are bundled with llhttp v6.0.6. Vulnerable code is used by aiohttp for its HTTP request parser when available which is the default case when installing from a wheel. This vulnerability only affects users of aiohttp as an HTTP server (ie `aiohttp.Application`), you are not affected by this vulnerability if you are using aiohttp as an HTTP client library (ie `aiohttp.ClientSession`). Sending a crafted HTTP request will cause the server to misinterpret one of the HTTP header values leading to HTTP request smuggling. This issue has been addressed in version 3.8.5. Users are advised to upgrade. Users unable to upgrade can reinstall aiohttp using `AIOHTTP_NO_EXTENSIONS=1` as an environment variable to disable the llhttp HTTP request parser implementation. The pure Python implementation isn't vulnerable.</description>
      <guid isPermaLink="false">CVE-2023-37276|2024-08-02T17:09:34.028Z</guid>
      <pubDate>Wed, 19 Jul 2023 19:39:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-30251|2024-08-02T01:32:05.424Z -- aio-libs -- aiohttp</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-30251</link>
      <description>aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. In affected versions an attacker can send a specially crafted POST (multipart/form-data) request. When the aiohttp server processes it, the server will enter an infinite loop and be unable to process any further requests. An attacker can stop the application from serving requests after sending a single request. This issue has been addressed in version 3.9.4. Users are advised to upgrade. Users unable to upgrade may manually apply a patch to their systems. Please see the linked GHSA for instructions.</description>
      <guid isPermaLink="false">CVE-2024-30251|2024-08-02T01:32:05.424Z</guid>
      <pubDate>Thu, 02 May 2024 13:55:06 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27306|2024-06-20T13:35:26.968Z -- aio-libs -- aiohttp</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-27306</link>
      <description>aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. A XSS vulnerability exists on index pages for static file handling. This vulnerability is fixed in 3.9.4. We have always recommended using a reverse proxy server (e.g. nginx) for serving static files. Users following the recommendation are unaffected. Other users can disable `show_index` if unable to upgrade.</description>
      <guid isPermaLink="false">CVE-2024-27306|2024-06-20T13:35:26.968Z</guid>
      <pubDate>Thu, 18 Apr 2024 14:23:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-30251|2024-06-04T17:38:32.295Z -- aio-libs -- aiohttp</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-30251</link>
      <description>aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. In affected versions an attacker can send a specially crafted POST (multipart/form-data) request. When the aiohttp server processes it, the server will enter an infinite loop and be unable to process any further requests. An attacker can stop the application from serving requests after sending a single request. This issue has been addressed in version 3.9.4. Users are advised to upgrade. Users unable to upgrade may manually apply a patch to their systems. Please see the linked GHSA for instructions.</description>
      <guid isPermaLink="false">CVE-2024-30251|2024-06-04T17:38:32.295Z</guid>
      <pubDate>Thu, 02 May 2024 13:55:06 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34083|2024-06-04T17:42:19.001Z -- aio-libs -- aiosmtpd</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-34083</link>
      <description>aiosmptd is  a reimplementation of the Python stdlib smtpd.py based on asyncio. Prior to version 1.4.6, servers based on aiosmtpd accept extra unencrypted commands after STARTTLS, treating them as if they came from inside the encrypted connection. This could be exploited by a man-in-the-middle attack. Version 1.4.6 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-34083|2024-06-04T17:42:19.001Z</guid>
      <pubDate>Sat, 18 May 2024 18:12:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27306|2024-06-04T17:46:31.150Z -- aio-libs -- aiohttp</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27306</link>
      <description>aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. A XSS vulnerability exists on index pages for static file handling. This vulnerability is fixed in 3.9.4. We have always recommended using a reverse proxy server (e.g. nginx) for serving static files. Users following the recommendation are unaffected. Other users can disable `show_index` if unable to upgrade.</description>
      <guid isPermaLink="false">CVE-2024-27306|2024-06-04T17:46:31.150Z</guid>
      <pubDate>Thu, 18 Apr 2024 14:23:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27305|2024-03-12T20:29:54.592Z -- aio-libs -- aiosmtpd</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27305</link>
      <description>aiosmtpd is a reimplementation of the Python stdlib smtpd.py based on asyncio. aiosmtpd is vulnerable to inbound SMTP smuggling. SMTP smuggling is a novel vulnerability based on not so novel interpretation differences of the SMTP protocol. By exploiting SMTP smuggling, an attacker may send smuggle/spoof e-mails with fake sender addresses, allowing advanced phishing attacks. This issue is also existed in other SMTP software like Postfix. With the right SMTP server constellation, an attacker can send spoofed e-mails to inbound/receiving aiosmtpd instances. This issue has been addressed in version 1.4.5. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-27305|2024-03-12T20:29:54.592Z</guid>
      <pubDate>Tue, 12 Mar 2024 20:29:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27305|2024-07-19T21:14:34.139Z -- aio-libs -- aiosmtpd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-27305</link>
      <description>aiosmtpd is a reimplementation of the Python stdlib smtpd.py based on asyncio. aiosmtpd is vulnerable to inbound SMTP smuggling. SMTP smuggling is a novel vulnerability based on not so novel interpretation differences of the SMTP protocol. By exploiting SMTP smuggling, an attacker may send smuggle/spoof e-mails with fake sender addresses, allowing advanced phishing attacks. This issue is also existed in other SMTP software like Postfix. With the right SMTP server constellation, an attacker can send spoofed e-mails to inbound/receiving aiosmtpd instances. This issue has been addressed in version 1.4.5. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-27305|2024-07-19T21:14:34.139Z</guid>
      <pubDate>Tue, 12 Mar 2024 20:29:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27305|2024-08-02T00:27:59.989Z -- aio-libs -- aiosmtpd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-27305</link>
      <description>aiosmtpd is a reimplementation of the Python stdlib smtpd.py based on asyncio. aiosmtpd is vulnerable to inbound SMTP smuggling. SMTP smuggling is a novel vulnerability based on not so novel interpretation differences of the SMTP protocol. By exploiting SMTP smuggling, an attacker may send smuggle/spoof e-mails with fake sender addresses, allowing advanced phishing attacks. This issue is also existed in other SMTP software like Postfix. With the right SMTP server constellation, an attacker can send spoofed e-mails to inbound/receiving aiosmtpd instances. This issue has been addressed in version 1.4.5. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-27305|2024-08-02T00:27:59.989Z</guid>
      <pubDate>Tue, 12 Mar 2024 20:29:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-27306|2024-08-02T00:27:59.957Z -- aio-libs -- aiohttp</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-27306</link>
      <description>aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. A XSS vulnerability exists on index pages for static file handling. This vulnerability is fixed in 3.9.4. We have always recommended using a reverse proxy server (e.g. nginx) for serving static files. Users following the recommendation are unaffected. Other users can disable `show_index` if unable to upgrade.</description>
      <guid isPermaLink="false">CVE-2024-27306|2024-08-02T00:27:59.957Z</guid>
      <pubDate>Thu, 18 Apr 2024 14:23:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-34083|2024-08-02T02:42:59.884Z -- aio-libs -- aiosmtpd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-34083</link>
      <description>aiosmptd is  a reimplementation of the Python stdlib smtpd.py based on asyncio. Prior to version 1.4.6, servers based on aiosmtpd accept extra unencrypted commands after STARTTLS, treating them as if they came from inside the encrypted connection. This could be exploited by a man-in-the-middle attack. Version 1.4.6 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-34083|2024-08-02T02:42:59.884Z</guid>
      <pubDate>Sat, 18 May 2024 18:12:19 +0000</pubDate>
    </item>
  </channel>
</rss>
