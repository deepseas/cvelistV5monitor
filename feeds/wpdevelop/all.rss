<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for wpdevelop -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/wpdevelop/all.rss</link>
    <description>The latest CVEs for wpdevelop -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 05 Aug 2024 19:21:13 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2017-2151|2024-08-05T13:48:03.509Z -- wpdevelop -- booking%20calendar
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-2151</link>
      <description>Cross-site scripting vulnerability in Booking Calendar version 7.1 and earlier allows remote attackers to inject arbitrary web script or HTML via unspecified vectors.</description>
      <guid isPermaLink="false">CVE-2017-2151|2024-08-05T13:48:03.509Z</guid>
      <pubDate>Fri, 28 Apr 2017 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2017-2150|2024-08-05T13:48:03.531Z -- wpdevelop -- booking%20calendar
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2017-2150</link>
      <description>Directory traversal vulnerability in Booking Calendar version 7.0 and earlier allows remote attackers to read arbitrary files via specially crafted captcha_chalange parameter.</description>
      <guid isPermaLink="false">CVE-2017-2150|2024-08-05T13:48:03.531Z</guid>
      <pubDate>Fri, 28 Apr 2017 16:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6930|2024-08-01T21:45:38.335Z -- wpdevelop -- wp%20booking%20calendar</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6930</link>
      <description>The WP Booking Calendar plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the 'type' attribute within the plugin's bookingform shortcode in all versions up to, and including, 10.2.1 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers, with contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.</description>
      <guid isPermaLink="false">CVE-2024-6930|2024-08-01T21:45:38.335Z</guid>
      <pubDate>Wed, 24 Jul 2024 07:31:48 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6930|2024-07-24T13:34:17.545Z -- wpdevelop -- wp%20booking%20calendar</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6930</link>
      <description>The WP Booking Calendar plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the 'type' attribute within the plugin's bookingform shortcode in all versions up to, and including, 10.2.1 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers, with contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.</description>
      <guid isPermaLink="false">CVE-2024-6930|2024-07-24T13:34:17.545Z</guid>
      <pubDate>Wed, 24 Jul 2024 07:31:48 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1207|2024-07-05T17:20:46.943Z -- wpdevelop -- wp%20booking%20calendar</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1207</link>
      <description>The WP Booking Calendar plugin for WordPress is vulnerable to SQL Injection via the 'calendar_request_params[dates_ddmmyy_csv]' parameter in all versions up to, and including, 9.9 due to insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query.  This makes it possible for unauthenticated attackers to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database.</description>
      <guid isPermaLink="false">CVE-2024-1207|2024-07-05T17:20:46.943Z</guid>
      <pubDate>Thu, 08 Feb 2024 08:32:07 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1207|2024-02-08T08:32:07.622Z -- wpdevelop -- wp%20booking%20calendar</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1207</link>
      <description>The WP Booking Calendar plugin for WordPress is vulnerable to SQL Injection via the 'calendar_request_params[dates_ddmmyy_csv]' parameter in all versions up to, and including, 9.9 due to insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query.  This makes it possible for unauthenticated attackers to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database.</description>
      <guid isPermaLink="false">CVE-2024-1207|2024-02-08T08:32:07.622Z</guid>
      <pubDate>Thu, 08 Feb 2024 08:32:07 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6930|2024-07-24T07:31:48.088Z -- wpdevelop -- wp%20booking%20calendar</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6930</link>
      <description>The WP Booking Calendar plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the 'type' attribute within the plugin's bookingform shortcode in all versions up to, and including, 10.2.1 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers, with contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.</description>
      <guid isPermaLink="false">CVE-2024-6930|2024-07-24T07:31:48.088Z</guid>
      <pubDate>Wed, 24 Jul 2024 07:31:48 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1207|2024-08-01T18:33:25.155Z -- wpdevelop -- wp%20booking%20calendar</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1207</link>
      <description>The WP Booking Calendar plugin for WordPress is vulnerable to SQL Injection via the 'calendar_request_params[dates_ddmmyy_csv]' parameter in all versions up to, and including, 9.9 due to insufficient escaping on the user supplied parameter and lack of sufficient preparation on the existing SQL query.  This makes it possible for unauthenticated attackers to append additional SQL queries into already existing queries that can be used to extract sensitive information from the database.</description>
      <guid isPermaLink="false">CVE-2024-1207|2024-08-01T18:33:25.155Z</guid>
      <pubDate>Thu, 08 Feb 2024 08:32:07 +0000</pubDate>
    </item>
  </channel>
</rss>
