<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Python Software Foundation -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/python%20software%20foundation/all.rss</link>
    <description>The latest CVEs for Python Software Foundation -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 22 Oct 2024 18:24:54 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-9287|2024-10-22T17:13:32.968Z -- python%20software%20foundation -- cpython
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-9287</link>
      <description>A vulnerability has been found in the CPython `venv` module and CLI where path names provided when creating a virtual environment were not quoted properly, allowing the creator to inject commands into virtual environment "activation" scripts (ie "source venv/bin/activate"). This means that attacker-controlled virtual environments are able to run commands when the virtual environment is activated. Virtual environments which are not created by an attacker or which aren't activated before being used (ie "./venv/bin/python") are not affected.</description>
      <guid isPermaLink="false">CVE-2024-9287|2024-10-22T17:13:32.968Z</guid>
      <pubDate>Tue, 22 Oct 2024 16:34:39 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6232|2024-10-18T13:07:45.640Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6232</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.





Regular expressions that allowed excessive backtracking during tarfile.TarFile header parsing are vulnerable to ReDoS via specifically-crafted tar archives.</description>
      <guid isPermaLink="false">CVE-2024-6232|2024-10-18T13:07:45.640Z</guid>
      <pubDate>Tue, 03 Sep 2024 12:29:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-7592|2024-10-18T13:07:47.143Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-7592</link>
      <description>There is a LOW severity vulnerability affecting CPython, specifically the
'http.cookies' standard library module.


When parsing cookies that contained backslashes for quoted characters in
the cookie value, the parser would use an algorithm with quadratic
complexity, resulting in excess CPU resources being used while parsing the
value.</description>
      <guid isPermaLink="false">CVE-2024-7592|2024-10-18T13:07:47.143Z</guid>
      <pubDate>Mon, 19 Aug 2024 19:06:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8088|2024-10-11T22:03:20.370Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8088</link>
      <description>There is a HIGH severity vulnerability affecting the CPython "zipfile"
module affecting "zipfile.Path". Note that the more common API "zipfile.ZipFile" class is unaffected.





When iterating over names of entries in a zip archive (for example, methods
of "zipfile.Path" like "namelist()", "iterdir()", etc)
the process can be put into an infinite loop with a maliciously crafted
zip archive. This defect applies when reading only metadata or extracting
the contents of the zip archive. Programs that are not handling
user-controlled zip archives are not affected.</description>
      <guid isPermaLink="false">CVE-2024-8088|2024-10-11T22:03:20.370Z</guid>
      <pubDate>Thu, 22 Aug 2024 18:45:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-0397|2024-09-17T18:24:43.948Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-0397</link>
      <description>A defect was discovered in the Python “ssl” module where there is a memory
race condition with the ssl.SSLContext methods “cert_store_stats()” and
“get_ca_certs()”. The race condition can be triggered if the methods are
called at the same time as certificates are loaded into the SSLContext,
such as during the TLS handshake with a certificate directory configured.
This issue is fixed in CPython 3.10.14, 3.11.9, 3.12.3, and 3.13.0a5.</description>
      <guid isPermaLink="false">CVE-2024-0397|2024-09-17T18:24:43.948Z</guid>
      <pubDate>Mon, 17 Jun 2024 15:09:40 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-7592|2024-09-09T20:53:12.739Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-7592</link>
      <description>There is a LOW severity vulnerability affecting CPython, specifically the
'http.cookies' standard library module.


When parsing cookies that contained backslashes for quoted characters in
the cookie value, the parser would use an algorithm with quadratic
complexity, resulting in excess CPU resources being used while parsing the
value.</description>
      <guid isPermaLink="false">CVE-2024-7592|2024-09-09T20:53:12.739Z</guid>
      <pubDate>Mon, 19 Aug 2024 19:06:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-7592|2024-09-04T20:24:00.123Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-7592</link>
      <description>There is a LOW severity vulnerability affecting CPython, specifically the
'http.cookies' standard library module.


When parsing cookies that contained backslashes for quoted characters in
the cookie value, the parser would use an algorithm with quadratic
complexity, resulting in excess CPU resources being used while parsing the
value.</description>
      <guid isPermaLink="false">CVE-2024-7592|2024-09-04T20:24:00.123Z</guid>
      <pubDate>Mon, 19 Aug 2024 19:06:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6232|2024-09-04T20:23:45.993Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6232</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.





Regular expressions that allowed excessive backtracking during tarfile.TarFile header parsing are vulnerable to ReDoS via specifically-crafted tar archives.</description>
      <guid isPermaLink="false">CVE-2024-6232|2024-09-04T20:23:45.993Z</guid>
      <pubDate>Tue, 03 Sep 2024 12:29:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8088|2024-09-04T20:24:11.685Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8088</link>
      <description>There is a HIGH severity vulnerability affecting the CPython "zipfile"
module affecting "zipfile.Path". Note that the more common API "zipfile.ZipFile" class is unaffected.





When iterating over names of entries in a zip archive (for example, methods
of "zipfile.Path" like "namelist()", "iterdir()", etc)
the process can be put into an infinite loop with a maliciously crafted
zip archive. This defect applies when reading only metadata or extracting
the contents of the zip archive. Programs that are not handling
user-controlled zip archives are not affected.</description>
      <guid isPermaLink="false">CVE-2024-8088|2024-09-04T20:24:11.685Z</guid>
      <pubDate>Thu, 22 Aug 2024 18:45:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6923|2024-09-04T20:23:53.356Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6923</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The 
email module didn’t properly quote newlines for email headers when 
serializing an email message allowing for header injection when an email
 is serialized.</description>
      <guid isPermaLink="false">CVE-2024-6923|2024-09-04T20:23:53.356Z</guid>
      <pubDate>Thu, 01 Aug 2024 13:40:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-7592|2024-09-03T17:22:40.318Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-7592</link>
      <description>There is a LOW severity vulnerability affecting CPython, specifically the
'http.cookies' standard library module.


When parsing cookies that contained backslashes for quoted characters in
the cookie value, the parser would use an algorithm with quadratic
complexity, resulting in excess CPU resources being used while parsing the
value.</description>
      <guid isPermaLink="false">CVE-2024-7592|2024-09-03T17:22:40.318Z</guid>
      <pubDate>Mon, 19 Aug 2024 19:06:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6232|2024-09-03T13:50:23.624Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6232</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.





Regular expressions that allowed excessive backtracking during tarfile.TarFile header parsing are vulnerable to ReDoS via specifically-crafted tar archives.</description>
      <guid isPermaLink="false">CVE-2024-6232|2024-09-03T13:50:23.624Z</guid>
      <pubDate>Tue, 03 Sep 2024 12:29:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4032|2024-08-29T20:29:47.824Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4032</link>
      <description>The “ipaddress” module contained incorrect information about whether certain IPv4 and IPv6 addresses were designated as “globally reachable” or “private”. This affected the is_private and is_global properties of the ipaddress.IPv4Address, ipaddress.IPv4Network, ipaddress.IPv6Address, and ipaddress.IPv6Network classes, where values wouldn’t be returned in accordance with the latest information from the IANA Special-Purpose Address Registries.

CPython 3.12.4 and 3.13.0a6 contain updated information from these registries and thus have the intended behavior.</description>
      <guid isPermaLink="false">CVE-2024-4032|2024-08-29T20:29:47.824Z</guid>
      <pubDate>Mon, 17 Jun 2024 15:05:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8088|2024-08-26T18:41:06.425Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8088</link>
      <description>There is a HIGH severity vulnerability affecting the CPython "zipfile"
module affecting "zipfile.Path". Note that the more common API "zipfile.ZipFile" class is unaffected.





When iterating over names of entries in a zip archive (for example, methods
of "zipfile.Path" like "namelist()", "iterdir()", etc)
the process can be put into an infinite loop with a maliciously crafted
zip archive. This defect applies when reading only metadata or extracting
the contents of the zip archive. Programs that are not handling
user-controlled zip archives are not affected.</description>
      <guid isPermaLink="false">CVE-2024-8088|2024-08-26T18:41:06.425Z</guid>
      <pubDate>Thu, 22 Aug 2024 18:45:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8088|2024-08-23T17:32:19.819Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8088</link>
      <description>There is a HIGH severity vulnerability affecting the CPython "zipfile"
module.





When iterating over names of entries in a zip archive (for example, methods
of "zipfile.ZipFile" like "namelist()", "iterdir()", "extractall()", etc)
the process can be put into an infinite loop with a maliciously crafted
zip archive. This defect applies when reading only metadata or extracting
the contents of the zip archive. Programs that are not handling
user-controlled zip archives are not affected.</description>
      <guid isPermaLink="false">CVE-2024-8088|2024-08-23T17:32:19.819Z</guid>
      <pubDate>Thu, 22 Aug 2024 18:45:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8088|2024-08-22T21:03:39.571Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8088</link>
      <description>There is a HIGH severity vulnerability affecting the CPython "zipfile"
module.





When iterating over names of entries in a zip archive (for example, methods
of "zipfile.ZipFile" like "namelist()", "iterdir()", "extractall()", etc)
the process can be put into an infinite loop with a maliciously crafted
zip archive. This defect applies when reading only metadata or extracting
the contents of the zip archive. Programs that are not handling
user-controlled zip archives are not affected.</description>
      <guid isPermaLink="false">CVE-2024-8088|2024-08-22T21:03:39.571Z</guid>
      <pubDate>Thu, 22 Aug 2024 18:45:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8088|2024-08-22T18:56:11.589Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8088</link>
      <description>There is a HIGH severity vulnerability affecting the CPython "zipfile"
module.





When iterating over names of entries in a zip archive (for example, methods
of "zipfile.ZipFile" like "namelist()", "iterdir()", "extractall()", etc)
the process can be put into an infinite loop with a maliciously crafted
zip archive. This defect applies when reading only metadata or extracting
the contents of the zip archive. Programs that are not handling
user-controlled zip archives are not affected.</description>
      <guid isPermaLink="false">CVE-2024-8088|2024-08-22T18:56:11.589Z</guid>
      <pubDate>Thu, 22 Aug 2024 18:45:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6923|2024-08-07T15:07:56.538Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6923</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The 
email module didn’t properly quote newlines for email headers when 
serializing an email message allowing for header injection when an email
 is serialized.</description>
      <guid isPermaLink="false">CVE-2024-6923|2024-08-07T15:07:56.538Z</guid>
      <pubDate>Thu, 01 Aug 2024 13:40:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3219|2024-08-07T15:07:38.378Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3219</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The
 “socket” module provides a pure-Python fallback to the 
socket.socketpair() function for platforms that don’t support AF_UNIX, 
such as Windows. This pure-Python implementation uses AF_INET or 
AF_INET6 to create a local connected pair of sockets. The connection 
between the two sockets was not verified before passing the two sockets 
back to the user, which leaves the server socket vulnerable to a 
connection race from a malicious local peer.

Platforms that support AF_UNIX such as Linux and macOS are not affected by this vulnerability. Versions prior to CPython 3.5 are not affected due to the vulnerable API not being included.</description>
      <guid isPermaLink="false">CVE-2024-3219|2024-08-07T15:07:38.378Z</guid>
      <pubDate>Mon, 29 Jul 2024 21:54:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-5642|2024-08-01T21:18:06.642Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-5642</link>
      <description>CPython 3.9 and earlier doesn't disallow configuring an empty list ("[]") for SSLContext.set_npn_protocols() which is an invalid value for the underlying OpenSSL API. This results in a buffer over-read when NPN is used (see CVE-2024-5535 for OpenSSL). This vulnerability is of low severity due to NPN being not widely used and specifying an empty list likely being uncommon in-practice (typically a protocol name would be configured).</description>
      <guid isPermaLink="false">CVE-2024-5642|2024-08-01T21:18:06.642Z</guid>
      <pubDate>Thu, 27 Jun 2024 21:05:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-0397|2024-08-01T18:04:49.771Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-0397</link>
      <description>A defect was discovered in the Python “ssl” module where there is a memory
race condition with the ssl.SSLContext methods “cert_store_stats()” and
“get_ca_certs()”. The race condition can be triggered if the methods are
called at the same time as certificates are loaded into the SSLContext,
such as during the TLS handshake with a certificate directory configured.
This issue is fixed in CPython 3.10.14, 3.11.9, 3.12.3, and 3.13.0a5.</description>
      <guid isPermaLink="false">CVE-2024-0397|2024-08-01T18:04:49.771Z</guid>
      <pubDate>Mon, 17 Jun 2024 15:09:40 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6923|2024-08-01T18:18:12.965Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6923</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The 
email module didn’t properly quote newlines for email headers when 
serializing an email message allowing for header injection when an email
 is serialized.</description>
      <guid isPermaLink="false">CVE-2024-6923|2024-08-01T18:18:12.965Z</guid>
      <pubDate>Thu, 01 Aug 2024 13:40:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3219|2024-08-01T13:43:17.624Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3219</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The
 “socket” module provides a pure-Python fallback to the 
socket.socketpair() function for platforms that don’t support AF_UNIX, 
such as Windows. This pure-Python implementation uses AF_INET or 
AF_INET6 to create a local connected pair of sockets. The connection 
between the two sockets was not verified before passing the two sockets 
back to the user, which leaves the server socket vulnerable to a 
connection race from a malicious local peer.

Platforms that support AF_UNIX such as Linux and macOS are not affected by this vulnerability. Versions prior to CPython 3.5 are not affected due to the vulnerable API not being included.</description>
      <guid isPermaLink="false">CVE-2024-3219|2024-08-01T13:43:17.624Z</guid>
      <pubDate>Mon, 29 Jul 2024 21:54:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6923|2024-08-01T13:40:11.069Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6923</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The 
email module didn’t properly quote newlines for email headers when 
serializing an email message allowing for header injection when an email
 is serialized.</description>
      <guid isPermaLink="false">CVE-2024-6923|2024-08-01T13:40:11.069Z</guid>
      <pubDate>Thu, 01 Aug 2024 13:40:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3219|2024-07-30T12:45:56.043Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3219</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The
 “socket” module provides a pure-Python fallback to the 
socket.socketpair() function for platforms that don’t support AF_UNIX, 
such as Windows. This pure-Python implementation uses AF_INET or 
AF_INET6 to create a local connected pair of sockets. The connection 
between the two sockets was not verified before passing the two sockets 
back to the user, which leaves the server socket vulnerable to a 
connection race from a malicious local peer.

Platforms that support AF_UNIX such as Linux and macOS are not affected by this vulnerability. Versions prior to CPython 3.5 are not affected due to the vulnerable API not being included.</description>
      <guid isPermaLink="false">CVE-2024-3219|2024-07-30T12:45:56.043Z</guid>
      <pubDate>Mon, 29 Jul 2024 21:54:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3219|2024-07-29T21:55:38.610Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3219</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The
 “socket” module provides a pure-Python fallback to the 
socket.socketpair() function for platforms that don’t support AF_UNIX, 
such as Windows. This pure-Python implementation uses AF_INET or 
AF_INET6 to create a local connected pair of sockets. The connection 
between the two sockets was not verified before passing the two sockets 
back to the user, which leaves the server socket vulnerable to a 
connection race from a malicious local peer.

Platforms that support AF_UNIX such as Linux and macOS are not affected by this vulnerability. Versions prior to CPython 3.5 are not affected due to the vulnerable API not being included.</description>
      <guid isPermaLink="false">CVE-2024-3219|2024-07-29T21:55:38.610Z</guid>
      <pubDate>Mon, 29 Jul 2024 21:54:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-5642|2024-07-01T13:51:32.404Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-5642</link>
      <description>CPython 3.9 and earlier doesn't disallow configuring an empty list ("[]") for SSLContext.set_npn_protocols() which is an invalid value for the underlying OpenSSL API. This results in a buffer over-read when NPN is used (see CVE-2024-5535 for OpenSSL). This vulnerability is of low severity due to NPN being not widely used and specifying an empty list likely being uncommon in-practice (typically a protocol name would be configured).</description>
      <guid isPermaLink="false">CVE-2024-5642|2024-07-01T13:51:32.404Z</guid>
      <pubDate>Thu, 27 Jun 2024 21:05:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-5642|2024-06-27T22:13:17.948Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-5642</link>
      <description>CPython 3.9 and earlier doesn't disallow configuring an empty list ("[]") for SSLContext.set_npn_protocols() which is an invalid value for the underlying OpenSSL API. This results in a buffer over-read when NPN is used (see CVE-2024-5535 for OpenSSL). This vulnerability is of low severity due to NPN being not widely used and specifying an empty list likely being uncommon in-practice (typically a protocol name would be configured).</description>
      <guid isPermaLink="false">CVE-2024-5642|2024-06-27T22:13:17.948Z</guid>
      <pubDate>Thu, 27 Jun 2024 21:05:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-0397|2024-06-20T16:08:46.179Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-0397</link>
      <description>A defect was discovered in the Python “ssl” module where there is a memory
race condition with the ssl.SSLContext methods “cert_store_stats()” and
“get_ca_certs()”. The race condition can be triggered if the methods are
called at the same time as certificates are loaded into the SSLContext,
such as during the TLS handshake with a certificate directory configured.
This issue is fixed in CPython 3.10.14, 3.11.9, 3.12.3, and 3.13.0a5.</description>
      <guid isPermaLink="false">CVE-2024-0397|2024-06-20T16:08:46.179Z</guid>
      <pubDate>Mon, 17 Jun 2024 15:09:40 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4030|2024-06-13T19:24:24.254Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4030</link>
      <description>On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.

If you’re not using Windows or haven’t changed the temporary directory location then you aren’t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.

This issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix “700” for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.</description>
      <guid isPermaLink="false">CVE-2024-4030|2024-06-13T19:24:24.254Z</guid>
      <pubDate>Tue, 07 May 2024 21:02:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4030|2024-06-04T17:55:02.857Z -- python%20software%20foundation -- cpython</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4030</link>
      <description>On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.

If you’re not using Windows or haven’t changed the temporary directory location then you aren’t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.

This issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix “700” for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.</description>
      <guid isPermaLink="false">CVE-2024-4030|2024-06-04T17:55:02.857Z</guid>
      <pubDate>Tue, 07 May 2024 21:02:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4032|2024-06-17T15:11:36.402Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4032</link>
      <description>The “ipaddress” module contained incorrect information about whether certain IPv4 and IPv6 addresses were designated as “globally reachable” or “private”. This affected the is_private and is_global properties of the ipaddress.IPv4Address, ipaddress.IPv4Network, ipaddress.IPv6Address, and ipaddress.IPv6Network classes, where values wouldn’t be returned in accordance with the latest information from the IANA Special-Purpose Address Registries.

CPython 3.12.4 and 3.13.0a6 contain updated information from these registries and thus have the intended behavior.</description>
      <guid isPermaLink="false">CVE-2024-4032|2024-06-17T15:11:36.402Z</guid>
      <pubDate>Mon, 17 Jun 2024 15:05:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-0397|2024-06-17T15:11:16.322Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-0397</link>
      <description>A defect was discovered in the Python “ssl” module where there is a memory
race condition with the ssl.SSLContext methods “cert_store_stats()” and
“get_ca_certs()”. The race condition can be triggered if the methods are
called at the same time as certificates are loaded into the SSLContext,
such as during the TLS handshake with a certificate directory configured.
This issue is fixed in CPython 3.10.14, 3.11.9, 3.12.3, and 3.13.0a5.</description>
      <guid isPermaLink="false">CVE-2024-0397|2024-06-17T15:11:16.322Z</guid>
      <pubDate>Mon, 17 Jun 2024 15:09:40 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-5642|2024-06-27T21:10:41.861Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-5642</link>
      <description>CPython 3.9 and earlier doesn't disallow configuring an empty list ("[]") for SSLContext.set_npn_protocols() which is an invalid value for the underlying OpenSSL API. This results in a buffer over-read when NPN is used (see CVE-2024-5535 for OpenSSL). This vulnerability is of low severity due to NPN being not widely used and specifying an empty list likely being uncommon in-practice (typically a protocol name would be configured).</description>
      <guid isPermaLink="false">CVE-2024-5642|2024-06-27T21:10:41.861Z</guid>
      <pubDate>Thu, 27 Jun 2024 21:05:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-5642|2024-06-28T13:47:48.118Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-5642</link>
      <description>CPython 3.9 and earlier doesn't disallow configuring an empty list ("[]") for SSLContext.set_npn_protocols() which is an invalid value for the underlying OpenSSL API. This results in a buffer over-read when NPN is used (see CVE-2024-5535 for OpenSSL). This vulnerability is of low severity due to NPN being not widely used and specifying an empty list likely being uncommon in-practice (typically a protocol name would be configured).</description>
      <guid isPermaLink="false">CVE-2024-5642|2024-06-28T13:47:48.118Z</guid>
      <pubDate>Thu, 27 Jun 2024 21:05:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3219|2024-07-29T21:58:59.074Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3219</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The
 “socket” module provides a pure-Python fallback to the 
socket.socketpair() function for platforms that don’t support AF_UNIX, 
such as Windows. This pure-Python implementation uses AF_INET or 
AF_INET6 to create a local connected pair of sockets. The connection 
between the two sockets was not verified before passing the two sockets 
back to the user, which leaves the server socket vulnerable to a 
connection race from a malicious local peer.

Platforms that support AF_UNIX such as Linux and macOS are not affected by this vulnerability. Versions prior to CPython 3.5 are not affected due to the vulnerable API not being included.</description>
      <guid isPermaLink="false">CVE-2024-3219|2024-07-29T21:58:59.074Z</guid>
      <pubDate>Mon, 29 Jul 2024 21:54:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3219|2024-07-31T18:45:11.922Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3219</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The
 “socket” module provides a pure-Python fallback to the 
socket.socketpair() function for platforms that don’t support AF_UNIX, 
such as Windows. This pure-Python implementation uses AF_INET or 
AF_INET6 to create a local connected pair of sockets. The connection 
between the two sockets was not verified before passing the two sockets 
back to the user, which leaves the server socket vulnerable to a 
connection race from a malicious local peer.

Platforms that support AF_UNIX such as Linux and macOS are not affected by this vulnerability. Versions prior to CPython 3.5 are not affected due to the vulnerable API not being included.</description>
      <guid isPermaLink="false">CVE-2024-3219|2024-07-31T18:45:11.922Z</guid>
      <pubDate>Mon, 29 Jul 2024 21:54:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6923|2024-08-01T14:29:51.269Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6923</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The 
email module didn’t properly quote newlines for email headers when 
serializing an email message allowing for header injection when an email
 is serialized.</description>
      <guid isPermaLink="false">CVE-2024-6923|2024-08-01T14:29:51.269Z</guid>
      <pubDate>Thu, 01 Aug 2024 13:40:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4032|2024-08-01T20:26:57.360Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4032</link>
      <description>The “ipaddress” module contained incorrect information about whether certain IPv4 and IPv6 addresses were designated as “globally reachable” or “private”. This affected the is_private and is_global properties of the ipaddress.IPv4Address, ipaddress.IPv4Network, ipaddress.IPv6Address, and ipaddress.IPv6Network classes, where values wouldn’t be returned in accordance with the latest information from the IANA Special-Purpose Address Registries.

CPython 3.12.4 and 3.13.0a6 contain updated information from these registries and thus have the intended behavior.</description>
      <guid isPermaLink="false">CVE-2024-4032|2024-08-01T20:26:57.360Z</guid>
      <pubDate>Mon, 17 Jun 2024 15:05:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4030|2024-08-01T20:26:57.265Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4030</link>
      <description>On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.

If you’re not using Windows or haven’t changed the temporary directory location then you aren’t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.

This issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix “700” for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.</description>
      <guid isPermaLink="false">CVE-2024-4030|2024-08-01T20:26:57.265Z</guid>
      <pubDate>Tue, 07 May 2024 21:02:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3219|2024-08-01T20:05:08.371Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3219</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The
 “socket” module provides a pure-Python fallback to the 
socket.socketpair() function for platforms that don’t support AF_UNIX, 
such as Windows. This pure-Python implementation uses AF_INET or 
AF_INET6 to create a local connected pair of sockets. The connection 
between the two sockets was not verified before passing the two sockets 
back to the user, which leaves the server socket vulnerable to a 
connection race from a malicious local peer.

Platforms that support AF_UNIX such as Linux and macOS are not affected by this vulnerability. Versions prior to CPython 3.5 are not affected due to the vulnerable API not being included.</description>
      <guid isPermaLink="false">CVE-2024-3219|2024-08-01T20:05:08.371Z</guid>
      <pubDate>Mon, 29 Jul 2024 21:54:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6923|2024-08-02T00:08:57.412Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6923</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The 
email module didn’t properly quote newlines for email headers when 
serializing an email message allowing for header injection when an email
 is serialized.</description>
      <guid isPermaLink="false">CVE-2024-6923|2024-08-02T00:08:57.412Z</guid>
      <pubDate>Thu, 01 Aug 2024 13:40:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6923|2024-08-02T09:02:50.791Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6923</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The 
email module didn’t properly quote newlines for email headers when 
serializing an email message allowing for header injection when an email
 is serialized.</description>
      <guid isPermaLink="false">CVE-2024-6923|2024-08-02T09:02:50.791Z</guid>
      <pubDate>Thu, 01 Aug 2024 13:40:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3219|2024-08-05T14:14:01.542Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3219</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The
 “socket” module provides a pure-Python fallback to the 
socket.socketpair() function for platforms that don’t support AF_UNIX, 
such as Windows. This pure-Python implementation uses AF_INET or 
AF_INET6 to create a local connected pair of sockets. The connection 
between the two sockets was not verified before passing the two sockets 
back to the user, which leaves the server socket vulnerable to a 
connection race from a malicious local peer.

Platforms that support AF_UNIX such as Linux and macOS are not affected by this vulnerability. Versions prior to CPython 3.5 are not affected due to the vulnerable API not being included.</description>
      <guid isPermaLink="false">CVE-2024-3219|2024-08-05T14:14:01.542Z</guid>
      <pubDate>Mon, 29 Jul 2024 21:54:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-7592|2024-08-19T19:06:45.311Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-7592</link>
      <description>There is a LOW severity vulnerability affecting CPython, specifically the
'http.cookies' standard library module.


When parsing cookies that contained backslashes for quoted characters in
the cookie value, the parser would use an algorithm with quadratic
complexity, resulting in excess CPU resources being used while parsing the
value.</description>
      <guid isPermaLink="false">CVE-2024-7592|2024-08-19T19:06:45.311Z</guid>
      <pubDate>Mon, 19 Aug 2024 19:06:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3219|2024-08-22T19:47:21.022Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3219</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The
 “socket” module provides a pure-Python fallback to the 
socket.socketpair() function for platforms that don’t support AF_UNIX, 
such as Windows. This pure-Python implementation uses AF_INET or 
AF_INET6 to create a local connected pair of sockets. The connection 
between the two sockets was not verified before passing the two sockets 
back to the user, which leaves the server socket vulnerable to a 
connection race from a malicious local peer.

Platforms that support AF_UNIX such as Linux and macOS are not affected by this vulnerability. Versions prior to CPython 3.5 are not affected due to the vulnerable API not being included.</description>
      <guid isPermaLink="false">CVE-2024-3219|2024-08-22T19:47:21.022Z</guid>
      <pubDate>Mon, 29 Jul 2024 21:54:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8088|2024-08-23T00:09:14.061Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8088</link>
      <description>There is a HIGH severity vulnerability affecting the CPython "zipfile"
module.





When iterating over names of entries in a zip archive (for example, methods
of "zipfile.ZipFile" like "namelist()", "iterdir()", "extractall()", etc)
the process can be put into an infinite loop with a maliciously crafted
zip archive. This defect applies when reading only metadata or extracting
the contents of the zip archive. Programs that are not handling
user-controlled zip archives are not affected.</description>
      <guid isPermaLink="false">CVE-2024-8088|2024-08-23T00:09:14.061Z</guid>
      <pubDate>Thu, 22 Aug 2024 18:45:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8088|2024-08-23T18:03:50.518Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8088</link>
      <description>There is a HIGH severity vulnerability affecting the CPython "zipfile"
module.





When iterating over names of entries in a zip archive (for example, methods
of "zipfile.ZipFile" like "namelist()", "iterdir()", "extractall()", etc)
the process can be put into an infinite loop with a maliciously crafted
zip archive. This defect applies when reading only metadata or extracting
the contents of the zip archive. Programs that are not handling
user-controlled zip archives are not affected.</description>
      <guid isPermaLink="false">CVE-2024-8088|2024-08-23T18:03:50.518Z</guid>
      <pubDate>Thu, 22 Aug 2024 18:45:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8088|2024-08-28T14:01:28.680Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8088</link>
      <description>There is a HIGH severity vulnerability affecting the CPython "zipfile"
module affecting "zipfile.Path". Note that the more common API "zipfile.ZipFile" class is unaffected.





When iterating over names of entries in a zip archive (for example, methods
of "zipfile.Path" like "namelist()", "iterdir()", etc)
the process can be put into an infinite loop with a maliciously crafted
zip archive. This defect applies when reading only metadata or extracting
the contents of the zip archive. Programs that are not handling
user-controlled zip archives are not affected.</description>
      <guid isPermaLink="false">CVE-2024-8088|2024-08-28T14:01:28.680Z</guid>
      <pubDate>Thu, 22 Aug 2024 18:45:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6232|2024-09-03T12:32:25.383Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6232</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.





Regular expressions that allowed excessive backtracking during tarfile.TarFile header parsing are vulnerable to ReDoS via specifically-crafted tar archives.</description>
      <guid isPermaLink="false">CVE-2024-6232|2024-09-03T12:32:25.383Z</guid>
      <pubDate>Tue, 03 Sep 2024 12:29:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8088|2024-09-03T15:12:33.775Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8088</link>
      <description>There is a HIGH severity vulnerability affecting the CPython "zipfile"
module affecting "zipfile.Path". Note that the more common API "zipfile.ZipFile" class is unaffected.





When iterating over names of entries in a zip archive (for example, methods
of "zipfile.Path" like "namelist()", "iterdir()", etc)
the process can be put into an infinite loop with a maliciously crafted
zip archive. This defect applies when reading only metadata or extracting
the contents of the zip archive. Programs that are not handling
user-controlled zip archives are not affected.</description>
      <guid isPermaLink="false">CVE-2024-8088|2024-09-03T15:12:33.775Z</guid>
      <pubDate>Thu, 22 Aug 2024 18:45:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6232|2024-09-03T15:12:06.654Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6232</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.





Regular expressions that allowed excessive backtracking during tarfile.TarFile header parsing are vulnerable to ReDoS via specifically-crafted tar archives.</description>
      <guid isPermaLink="false">CVE-2024-6232|2024-09-03T15:12:06.654Z</guid>
      <pubDate>Tue, 03 Sep 2024 12:29:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-7592|2024-09-03T15:12:20.902Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-7592</link>
      <description>There is a LOW severity vulnerability affecting CPython, specifically the
'http.cookies' standard library module.


When parsing cookies that contained backslashes for quoted characters in
the cookie value, the parser would use an algorithm with quadratic
complexity, resulting in excess CPU resources being used while parsing the
value.</description>
      <guid isPermaLink="false">CVE-2024-7592|2024-09-03T15:12:20.902Z</guid>
      <pubDate>Mon, 19 Aug 2024 19:06:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6232|2024-09-03T20:02:40.422Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6232</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.





Regular expressions that allowed excessive backtracking during tarfile.TarFile header parsing are vulnerable to ReDoS via specifically-crafted tar archives.</description>
      <guid isPermaLink="false">CVE-2024-6232|2024-09-03T20:02:40.422Z</guid>
      <pubDate>Tue, 03 Sep 2024 12:29:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8088|2024-09-04T22:31:34.780Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8088</link>
      <description>There is a HIGH severity vulnerability affecting the CPython "zipfile"
module affecting "zipfile.Path". Note that the more common API "zipfile.ZipFile" class is unaffected.





When iterating over names of entries in a zip archive (for example, methods
of "zipfile.Path" like "namelist()", "iterdir()", etc)
the process can be put into an infinite loop with a maliciously crafted
zip archive. This defect applies when reading only metadata or extracting
the contents of the zip archive. Programs that are not handling
user-controlled zip archives are not affected.</description>
      <guid isPermaLink="false">CVE-2024-8088|2024-09-04T22:31:34.780Z</guid>
      <pubDate>Thu, 22 Aug 2024 18:45:31 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4032|2024-09-17T15:55:55.506Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4032</link>
      <description>The “ipaddress” module contained incorrect information about whether certain IPv4 and IPv6 addresses were designated as “globally reachable” or “private”. This affected the is_private and is_global properties of the ipaddress.IPv4Address, ipaddress.IPv4Network, ipaddress.IPv6Address, and ipaddress.IPv6Network classes, where values wouldn’t be returned in accordance with the latest information from the IANA Special-Purpose Address Registries.

CPython 3.12.4 and 3.13.0a6 contain updated information from these registries and thus have the intended behavior.</description>
      <guid isPermaLink="false">CVE-2024-4032|2024-09-17T15:55:55.506Z</guid>
      <pubDate>Mon, 17 Jun 2024 15:05:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-6923|2024-09-26T15:03:13.133Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-6923</link>
      <description>There is a MEDIUM severity vulnerability affecting CPython.

The 
email module didn’t properly quote newlines for email headers when 
serializing an email message allowing for header injection when an email
 is serialized.</description>
      <guid isPermaLink="false">CVE-2024-6923|2024-09-26T15:03:13.133Z</guid>
      <pubDate>Thu, 01 Aug 2024 13:40:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3219|2024-10-17T18:52:44.490Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3219</link>
      <description>The
 “socket” module provides a pure-Python fallback to the 
socket.socketpair() function for platforms that don’t support AF_UNIX, 
such as Windows. This pure-Python implementation uses AF_INET or 
AF_INET6 to create a local connected pair of sockets. The connection 
between the two sockets was not verified before passing the two sockets 
back to the user, which leaves the server socket vulnerable to a 
connection race from a malicious local peer.

Platforms that support AF_UNIX such as Linux and macOS are not affected by this vulnerability. Versions prior to CPython 3.5 are not affected due to the vulnerable API not being included.</description>
      <guid isPermaLink="false">CVE-2024-3219|2024-10-17T18:52:44.490Z</guid>
      <pubDate>Mon, 29 Jul 2024 21:54:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-9287|2024-10-22T16:34:39.210Z -- python%20software%20foundation -- cpython</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-9287</link>
      <description>A vulnerability has been found in the CPython `venv` module and CLI where path names provided when creating a virtual environment were not quoted properly, allowing the creator to inject commands into virtual environment "activation" scripts (ie "source venv/bin/activate"). This means that attacker-controlled virtual environments are able to run commands when the virtual environment is activated. Virtual environments which are not created by an attacker or which aren't activated before being used (ie "./venv/bin/python") are not affected.</description>
      <guid isPermaLink="false">CVE-2024-9287|2024-10-22T16:34:39.210Z</guid>
      <pubDate>Tue, 22 Oct 2024 16:34:39 +0000</pubDate>
    </item>
  </channel>
</rss>
