<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Graylog2 -- graylog2-server</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/graylog2/graylog2-server.rss</link>
    <description>The latest CVEs for Graylog2 -- graylog2-server</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 01 Oct 2024 20:23:57 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-41045|2024-10-01T16:56:12.604Z -- graylog2 -- graylog2-server
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-41045</link>
      <description>Graylog is a free and open log management platform. Graylog makes use of only one single source port for DNS queries. Graylog binds a single socket for outgoing DNS queries and while that socket is bound to a random port number it is never changed again. This goes against recommended practice since 2008, when Dan Kaminsky discovered how easy is to carry out DNS cache poisoning attacks. In order to prevent cache poisoning with spoofed DNS responses, it is necessary to maximise the uncertainty in the choice of a source port for a DNS query. Although unlikely in many setups, an external attacker could inject forged DNS responses into a Graylog's lookup table cache. In order to prevent this, it is at least recommendable to distribute the DNS queries through a pool of distinct sockets, each of them with a random source port and renew them periodically. This issue has been addressed in versions 5.0.9 and 5.1.3. Users are advised to upgrade. There are no known workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2023-41045|2024-10-01T16:56:12.604Z</guid>
      <pubDate>Thu, 31 Aug 2023 17:59:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-41041|2024-10-01T18:12:07.079Z -- graylog2 -- graylog2-server
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-41041</link>
      <description>Graylog is a free and open log management platform. In a multi-node Graylog cluster, after a user has explicitly logged out, a user session may still be used for API requests until it has reached its original expiry time. Each node maintains an in-memory cache of user sessions. Upon a cache-miss, the session is loaded from the database. After that, the node operates solely on the cached session. Modifications to sessions will update the cached version as well as the session persisted in the database. However, each node maintains their isolated version of the session. When the user logs out, the session is removed from the node-local cache and deleted from the database. The other nodes will however still use the cached session. These nodes will only fail to accept the session id if they intent to update the session in the database. They will then notice that the session is gone. This is true for most API requests originating from user interaction with the Graylog UI because these will lead to an update of the session's "last access" timestamp. If the session update is however prevented by setting the `X-Graylog-No-Session-Extension:true` header in the request, the node will consider the (cached) session valid until the session is expired according to its timeout setting. No session identifiers are leaked. After a user has logged out, the UI shows the login screen again, which gives the user the impression that their session is not valid anymore. However, if the session becomes compromised later, it can still be used to perform API requests against the Graylog cluster. The time frame for this is limited to the configured session lifetime, starting from the time when the user logged out. This issue has been addressed in versions 5.0.9 and 5.1.3. Users are advised to upgrade.


</description>
      <guid isPermaLink="false">CVE-2023-41041|2024-10-01T18:12:07.079Z</guid>
      <pubDate>Wed, 30 Aug 2023 21:03:40 +0000</pubDate>
    </item>
  </channel>
</rss>
