<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Graylog2 -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/graylog2/all.rss</link>
    <description>The latest CVEs for Graylog2 -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 05 Jul 2024 18:24:02 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-24823|2024-07-05T17:22:48.251Z -- graylog2 -- graylog2-server
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-24823</link>
      <description>Graylog is a free and open log management platform. Starting in version 4.3.0 and prior to versions 5.1.11 and 5.2.4, reauthenticating with an existing session cookie would re-use that session id, even if for different user credentials. In this case, the pre-existing session could be used to gain elevated access to an existing Graylog login session, provided the malicious user could successfully inject their session cookie into someone else's browser. The complexity of such an attack is high, because it requires presenting a spoofed login screen and injection of a session cookie into an existing browser, potentially through a cross-site scripting attack. No such attack has been discovered. Graylog 5.1.11 and 5.2.4, and any versions of the 6.0 development branch, contain patches to not re-use sessions under any circumstances. Some workarounds are available. Using short session expiration and explicit log outs of unused sessions can help limiting the attack vector. Unpatched this vulnerability exists, but is relatively hard to exploit. A proxy could be leveraged to clear the `authentication` cookie for the Graylog server URL for the `/api/system/sessions` endpoint, as that is the only one vulnerable.</description>
      <guid isPermaLink="false">CVE-2024-24823|2024-07-05T17:22:48.251Z</guid>
      <pubDate>Wed, 07 Feb 2024 17:21:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-24823|2024-02-07T17:21:20.492Z -- graylog2 -- graylog2-server</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-24823</link>
      <description>Graylog is a free and open log management platform. Starting in version 4.3.0 and prior to versions 5.1.11 and 5.2.4, reauthenticating with an existing session cookie would re-use that session id, even if for different user credentials. In this case, the pre-existing session could be used to gain elevated access to an existing Graylog login session, provided the malicious user could successfully inject their session cookie into someone else's browser. The complexity of such an attack is high, because it requires presenting a spoofed login screen and injection of a session cookie into an existing browser, potentially through a cross-site scripting attack. No such attack has been discovered. Graylog 5.1.11 and 5.2.4, and any versions of the 6.0 development branch, contain patches to not re-use sessions under any circumstances. Some workarounds are available. Using short session expiration and explicit log outs of unused sessions can help limiting the attack vector. Unpatched this vulnerability exists, but is relatively hard to exploit. A proxy could be leveraged to clear the `authentication` cookie for the Graylog server URL for the `/api/system/sessions` endpoint, as that is the only one vulnerable.</description>
      <guid isPermaLink="false">CVE-2024-24823|2024-02-07T17:21:20.492Z</guid>
      <pubDate>Wed, 07 Feb 2024 17:21:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-24824|2024-02-07T17:25:20.102Z -- graylog2 -- graylog2-server</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-24824</link>
      <description>Graylog is a free and open log management platform. Starting in version 2.0.0 and prior to versions 5.1.11 and 5.2.4, arbitrary classes can be loaded and instantiated using a HTTP PUT request to the `/api/system/cluster_config/` endpoint. Graylog's cluster config system uses fully qualified class names as config keys. To validate the existence of the requested class before using them, Graylog loads the class using the class loader. If a user with the appropriate permissions performs the request, arbitrary classes with 1-arg String constructors can be instantiated. This will execute arbitrary code that is run during class instantiation. In the specific use case of `java.io.File`, the behavior of the internal web-server stack will lead to information exposure by including the entire file content in the response to the REST request. Versions 5.1.11 and 5.2.4 contain a fix for this issue.</description>
      <guid isPermaLink="false">CVE-2024-24824|2024-02-07T17:25:20.102Z</guid>
      <pubDate>Wed, 07 Feb 2024 17:25:20 +0000</pubDate>
    </item>
  </channel>
</rss>
