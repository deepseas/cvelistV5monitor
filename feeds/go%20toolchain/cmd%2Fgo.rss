<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Go toolchain -- cmd/go</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/go%20toolchain/cmd%2Fgo.rss</link>
    <description>The latest CVEs for Go toolchain -- cmd/go</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 19:20:06 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-39320|2024-08-02T18:02:06.849Z -- go%20toolchain -- cmd%2Fgo
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39320</link>
      <description>The go.mod toolchain directive, introduced in Go 1.21, can be leveraged to execute scripts and binaries relative to the root of the module when the "go" command was executed within the module. This applies to modules downloaded using the "go" command from the module proxy, as well as modules downloaded directly using VCS software.</description>
      <guid isPermaLink="false">CVE-2023-39320|2024-08-02T18:02:06.849Z</guid>
      <pubDate>Fri, 08 Sep 2023 16:13:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-29405|2024-08-02T14:07:45.814Z -- go%20toolchain -- cmd%2Fgo
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-29405</link>
      <description>The go command may execute arbitrary code at build time when using cgo. This may occur when running "go get" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a "#cgo LDFLAGS" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.</description>
      <guid isPermaLink="false">CVE-2023-29405|2024-08-02T14:07:45.814Z</guid>
      <pubDate>Thu, 08 Jun 2023 20:19:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-29402|2024-08-02T14:07:46.220Z -- go%20toolchain -- cmd%2Fgo
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-29402</link>
      <description>The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via "go get", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).</description>
      <guid isPermaLink="false">CVE-2023-29402|2024-08-02T14:07:46.220Z</guid>
      <pubDate>Thu, 08 Jun 2023 20:19:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-29404|2024-08-02T14:07:45.919Z -- go%20toolchain -- cmd%2Fgo
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-29404</link>
      <description>The go command may execute arbitrary code at build time when using cgo. This may occur when running "go get" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a "#cgo LDFLAGS" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.</description>
      <guid isPermaLink="false">CVE-2023-29404|2024-08-02T14:07:45.919Z</guid>
      <pubDate>Thu, 08 Jun 2023 20:19:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-39323|2024-08-02T18:02:06.899Z -- go%20toolchain -- cmd%2Fgo
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-39323</link>
      <description>Line directives ("//line") can be used to bypass the restrictions on "//go:cgo_" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running "go build". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.</description>
      <guid isPermaLink="false">CVE-2023-39323|2024-08-02T18:02:06.899Z</guid>
      <pubDate>Thu, 05 Oct 2023 20:36:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-24531|2024-07-02T19:51:48.731Z -- go%20toolchain -- cmd%2Fgo</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-24531</link>
      <description>Command go env is documented as outputting a shell script containing the Go environment. However, go env doesn't sanitize values, so executing its output as a shell script can cause various bad bahaviors, including executing arbitrary commands or inserting new environment variables. This issue is relatively minor because, in general, if an attacker can set arbitrary environment variables on a system, they have better attack vectors than making "go env" print them out.</description>
      <guid isPermaLink="false">CVE-2023-24531|2024-07-02T19:51:48.731Z</guid>
      <pubDate>Tue, 02 Jul 2024 19:51:48 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-24787|2024-05-08T15:31:14.530Z -- go%20toolchain -- cmd%2Fgo</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-24787</link>
      <description>On Darwin, building a Go module which contains CGO can trigger arbitrary code execution when using the Apple version of ld, due to usage of the -lto_library flag in a "#cgo LDFLAGS" directive.</description>
      <guid isPermaLink="false">CVE-2024-24787|2024-05-08T15:31:14.530Z</guid>
      <pubDate>Wed, 08 May 2024 15:31:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-24531|2024-08-02T10:56:04.290Z -- go%20toolchain -- cmd%2Fgo</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-24531</link>
      <description>Command go env is documented as outputting a shell script containing the Go environment. However, go env doesn't sanitize values, so executing its output as a shell script can cause various bad bahaviors, including executing arbitrary commands or inserting new environment variables. This issue is relatively minor because, in general, if an attacker can set arbitrary environment variables on a system, they have better attack vectors than making "go env" print them out.</description>
      <guid isPermaLink="false">CVE-2023-24531|2024-08-02T10:56:04.290Z</guid>
      <pubDate>Tue, 02 Jul 2024 19:51:48 +0000</pubDate>
    </item>
  </channel>
</rss>
