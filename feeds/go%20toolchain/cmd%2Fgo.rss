<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Go toolchain -- cmd/go</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/go%20toolchain/cmd%2Fgo.rss</link>
    <description>The latest CVEs for Go toolchain -- cmd/go</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 21:22:06 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-28367|2024-08-04T16:33:59.087Z -- go%20toolchain -- cmd%2Fgo
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-28367</link>
      <description>Code injection in the go command with cgo before Go 1.14.12 and Go 1.15.5 allows arbitrary code execution at build time via malicious gcc flags specified via a #cgo directive.</description>
      <guid isPermaLink="false">CVE-2020-28367|2024-08-04T16:33:59.087Z</guid>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-28366|2024-08-04T16:33:58.955Z -- go%20toolchain -- cmd%2Fgo
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-28366</link>
      <description>Code injection in the go command with cgo before Go 1.14.12 and Go 1.15.5 allows arbitrary code execution at build time via a malicious unquoted symbol name in a linked object file.</description>
      <guid isPermaLink="false">CVE-2020-28366|2024-08-04T16:33:58.955Z</guid>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-24531|2024-08-02T10:56:04.290Z -- go%20toolchain -- cmd%2Fgo</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-24531</link>
      <description>Command go env is documented as outputting a shell script containing the Go environment. However, go env doesn't sanitize values, so executing its output as a shell script can cause various bad bahaviors, including executing arbitrary commands or inserting new environment variables. This issue is relatively minor because, in general, if an attacker can set arbitrary environment variables on a system, they have better attack vectors than making "go env" print them out.</description>
      <guid isPermaLink="false">CVE-2023-24531|2024-08-02T10:56:04.290Z</guid>
      <pubDate>Tue, 02 Jul 2024 19:51:48 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-24787|2024-05-08T15:31:14.530Z -- go%20toolchain -- cmd%2Fgo</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-24787</link>
      <description>On Darwin, building a Go module which contains CGO can trigger arbitrary code execution when using the Apple version of ld, due to usage of the -lto_library flag in a "#cgo LDFLAGS" directive.</description>
      <guid isPermaLink="false">CVE-2024-24787|2024-05-08T15:31:14.530Z</guid>
      <pubDate>Wed, 08 May 2024 15:31:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-24531|2024-07-02T19:51:48.731Z -- go%20toolchain -- cmd%2Fgo</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-24531</link>
      <description>Command go env is documented as outputting a shell script containing the Go environment. However, go env doesn't sanitize values, so executing its output as a shell script can cause various bad bahaviors, including executing arbitrary commands or inserting new environment variables. This issue is relatively minor because, in general, if an attacker can set arbitrary environment variables on a system, they have better attack vectors than making "go env" print them out.</description>
      <guid isPermaLink="false">CVE-2023-24531|2024-07-02T19:51:48.731Z</guid>
      <pubDate>Tue, 02 Jul 2024 19:51:48 +0000</pubDate>
    </item>
  </channel>
</rss>
