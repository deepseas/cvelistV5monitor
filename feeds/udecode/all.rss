<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for udecode -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/udecode/all.rss</link>
    <description>The latest CVEs for udecode -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 20:23:41 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-34245|2024-08-02T16:01:54.346Z -- udecode -- plate
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-34245</link>
      <description>@udecode/plate-link is the link handler for the udecode/plate rich-text editor plugin system for Slate &amp; React. Affected versions of the link plugin and link UI component do not sanitize URLs to prevent use of the `javascript:` scheme. As a result, links with JavaScript URLs can be inserted into the Plate editor through various means, including opening or pasting malicious content. `@udecode/plate-link` 20.0.0 resolves this issue by introducing an `allowedSchemes` option to the link plugin, defaulting to `['http', 'https', 'mailto', 'tel']`. URLs using a scheme that isn't in this list will not be rendered to the DOM. Users are advised to upgrade. Users unable to upgrade are advised to override the `LinkElement` and `PlateFloatingLink` components with implementations that explicitly check the URL scheme before rendering any anchor elements.</description>
      <guid isPermaLink="false">CVE-2023-34245|2024-08-02T16:01:54.346Z</guid>
      <pubDate>Fri, 09 Jun 2023 17:04:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40631|2024-07-19T19:49:42.360Z -- udecode -- plate</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40631</link>
      <description>Plate media is an open source, rich-text editor for React. Editors that use `MediaEmbedElement` and pass custom `urlParsers` to the `useMediaState` hook may be vulnerable to XSS if a custom parser allows `javascript:`, `data:` or `vbscript:` URLs to be embedded. Editors that do not use `urlParsers` and consume the `url` property directly may also be vulnerable if the URL is not sanitised. The default parsers `parseTwitterUrl` and `parseVideoUrl` are not affected. `@udecode/plate-media` 36.0.10 resolves this issue by only allowing HTTP and HTTPS URLs during parsing. This affects only the `embed` property returned from `useMediaState`. In addition, the `url` property returned from `useMediaState` has been renamed to `unsafeUrl` to indicate that it has not been sanitised. The `url` property on `element` is also unsafe, but has not been renamed. If you're using either of these properties directly, you will still need to validate the URL yourself. Users are advised to upgrade. Users unable to upgrade should ensure that any custom `urlParsers` do not allow `javascript:`, `data:` or `vbscript:` URLs to be returned in the `url` property of their return values. If `url` is consumed directly, validate the URL protocol before passing it to the `iframe` element.</description>
      <guid isPermaLink="false">CVE-2024-40631|2024-07-19T19:49:42.360Z</guid>
      <pubDate>Mon, 15 Jul 2024 18:21:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40631|2024-07-15T18:21:16.323Z -- udecode -- plate</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40631</link>
      <description>Plate media is an open source, rich-text editor for React. Editors that use `MediaEmbedElement` and pass custom `urlParsers` to the `useMediaState` hook may be vulnerable to XSS if a custom parser allows `javascript:`, `data:` or `vbscript:` URLs to be embedded. Editors that do not use `urlParsers` and consume the `url` property directly may also be vulnerable if the URL is not sanitised. The default parsers `parseTwitterUrl` and `parseVideoUrl` are not affected. `@udecode/plate-media` 36.0.10 resolves this issue by only allowing HTTP and HTTPS URLs during parsing. This affects only the `embed` property returned from `useMediaState`. In addition, the `url` property returned from `useMediaState` has been renamed to `unsafeUrl` to indicate that it has not been sanitised. The `url` property on `element` is also unsafe, but has not been renamed. If you're using either of these properties directly, you will still need to validate the URL yourself. Users are advised to upgrade. Users unable to upgrade should ensure that any custom `urlParsers` do not allow `javascript:`, `data:` or `vbscript:` URLs to be returned in the `url` property of their return values. If `url` is consumed directly, validate the URL protocol before passing it to the `iframe` element.</description>
      <guid isPermaLink="false">CVE-2024-40631|2024-07-15T18:21:16.323Z</guid>
      <pubDate>Mon, 15 Jul 2024 18:21:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40631|2024-08-02T04:33:11.891Z -- udecode -- plate</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40631</link>
      <description>Plate media is an open source, rich-text editor for React. Editors that use `MediaEmbedElement` and pass custom `urlParsers` to the `useMediaState` hook may be vulnerable to XSS if a custom parser allows `javascript:`, `data:` or `vbscript:` URLs to be embedded. Editors that do not use `urlParsers` and consume the `url` property directly may also be vulnerable if the URL is not sanitised. The default parsers `parseTwitterUrl` and `parseVideoUrl` are not affected. `@udecode/plate-media` 36.0.10 resolves this issue by only allowing HTTP and HTTPS URLs during parsing. This affects only the `embed` property returned from `useMediaState`. In addition, the `url` property returned from `useMediaState` has been renamed to `unsafeUrl` to indicate that it has not been sanitised. The `url` property on `element` is also unsafe, but has not been renamed. If you're using either of these properties directly, you will still need to validate the URL yourself. Users are advised to upgrade. Users unable to upgrade should ensure that any custom `urlParsers` do not allow `javascript:`, `data:` or `vbscript:` URLs to be returned in the `url` property of their return values. If `url` is consumed directly, validate the URL protocol before passing it to the `iframe` element.</description>
      <guid isPermaLink="false">CVE-2024-40631|2024-08-02T04:33:11.891Z</guid>
      <pubDate>Mon, 15 Jul 2024 18:21:16 +0000</pubDate>
    </item>
  </channel>
</rss>
