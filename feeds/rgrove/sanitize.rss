<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for rgrove -- sanitize</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/rgrove/sanitize.rss</link>
    <description>The latest CVEs for rgrove -- sanitize</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 22:23:08 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-23627|2024-08-02T10:35:33.641Z -- rgrove -- sanitize
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-23627</link>
      <description>Sanitize is an allowlist-based HTML and CSS sanitizer. Versions 5.0.0 and later, prior to 6.0.1, are vulnerable to Cross-site Scripting. When Sanitize is configured with a custom allowlist that allows `noscript` elements, attackers are able to include arbitrary HTML, resulting in XSS (cross-site scripting) or other undesired behavior when that HTML is rendered in a browser. The default configurations do not allow `noscript` elements and are not vulnerable. This issue only affects users who are using a custom config that adds `noscript` to the element allowlist. This issue has been patched in version 6.0.1. Users who are unable to upgrade can prevent this issue by using one of Sanitize's default configs or by ensuring that their custom config does not include `noscript` in the element allowlist.</description>
      <guid isPermaLink="false">CVE-2023-23627|2024-08-02T10:35:33.641Z</guid>
      <pubDate>Fri, 27 Jan 2023 23:44:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-36823|2024-08-02T17:01:09.986Z -- rgrove -- sanitize
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-36823</link>
      <description>Sanitize is an allowlist-based HTML and CSS sanitizer. Using carefully crafted input, an attacker may be able to sneak arbitrary HTML and CSS through Sanitize starting with version 3.0.0 and prior to version 6.0.2 when Sanitize is configured to use the built-in "relaxed" config or when using a custom config that allows `style` elements and one or more CSS at-rules. This could result in cross-site scripting or other undesired behavior when the malicious HTML and CSS are rendered in a browser. Sanitize 6.0.2 performs additional escaping of CSS in `style` element content, which fixes this issue. Users who are unable to upgrade can prevent this issue by using a Sanitize config that doesn't allow `style` elements, using a Sanitize config that doesn't allow CSS at-rules, or by manually escaping the character sequence `&lt;/` as `&lt;\/` in `style` element content.</description>
      <guid isPermaLink="false">CVE-2023-36823|2024-08-02T17:01:09.986Z</guid>
      <pubDate>Thu, 06 Jul 2023 15:06:00 +0000</pubDate>
    </item>
  </channel>
</rss>
