<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for auth0 -- node-jsonwebtoken</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/auth0/node-jsonwebtoken.rss</link>
    <description>The latest CVEs for auth0 -- node-jsonwebtoken</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 16:24:30 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-23540|2024-08-03T03:43:46.466Z -- auth0 -- node-jsonwebtoken
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23540</link>
      <description>In versions `&lt;=8.5.1` of `jsonwebtoken` library, lack of algorithm definition in the `jwt.verify()` function can lead to signature validation bypass due to defaulting to the `none` algorithm for signature verification. Users are affected if you do not specify algorithms in the `jwt.verify()` function. This issue has been fixed, please update to version 9.0.0 which removes the default support for the none algorithm in the `jwt.verify()` method. There will be no impact, if you update to version 9.0.0 and you don’t need to allow for the `none` algorithm. If you need 'none' algorithm, you have to explicitly specify that in `jwt.verify()` options.
</description>
      <guid isPermaLink="false">CVE-2022-23540|2024-08-03T03:43:46.466Z</guid>
      <pubDate>Thu, 22 Dec 2022 18:02:24 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-23541|2024-08-03T03:43:46.445Z -- auth0 -- node-jsonwebtoken
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23541</link>
      <description>jsonwebtoken is an implementation of JSON Web Tokens. Versions `&lt;= 8.5.1` of `jsonwebtoken` library can be misconfigured so that passing a poorly implemented key retrieval function referring to the `secretOrPublicKey` argument from the readme link will result in incorrect verification of tokens. There is a possibility of using a different algorithm and key combination in verification, other than the one that was used to sign the tokens. Specifically, tokens signed with an asymmetric public key could be verified with a symmetric HS256 algorithm. This can lead to successful validation of  forged tokens. If your application is supporting usage of both symmetric key and asymmetric key in jwt.verify() implementation with the same key retrieval function. This issue has been patched, please update to version 9.0.0.</description>
      <guid isPermaLink="false">CVE-2022-23541|2024-08-03T03:43:46.445Z</guid>
      <pubDate>Thu, 22 Dec 2022 17:52:22 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-23539|2024-08-03T03:43:46.551Z -- auth0 -- node-jsonwebtoken
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-23539</link>
      <description>Versions `&lt;=8.5.1` of `jsonwebtoken` library could be misconfigured so that legacy, insecure key types are used for signature verification. For example, DSA keys could be used with the RS256 algorithm. You are affected if you are using an algorithm and a key type other than a combination listed in the GitHub Security Advisory as unaffected. This issue has been fixed, please update to version 9.0.0. This version validates for asymmetric key type and algorithm combinations. Please refer to the above mentioned algorithm / key type combinations for the valid secure configuration. After updating to version 9.0.0, if you still intend to continue with signing or verifying tokens using invalid key type/algorithm value combinations, you’ll need to set the `allowInvalidAsymmetricKeyTypes` option  to `true` in the `sign()` and/or `verify()` functions.</description>
      <guid isPermaLink="false">CVE-2022-23539|2024-08-03T03:43:46.551Z</guid>
      <pubDate>Thu, 22 Dec 2022 23:20:47 +0000</pubDate>
    </item>
  </channel>
</rss>
