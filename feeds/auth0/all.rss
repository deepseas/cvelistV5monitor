<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for auth0 -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/auth0/all.rss</link>
    <description>The latest CVEs for auth0 -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 22:22:47 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-15259|2024-08-04T13:15:18.939Z -- auth0 -- ad-ldap-connector
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15259</link>
      <description>ad-ldap-connector's admin panel before version 5.0.13 does not provide csrf protection, which when exploited may result in remote code execution or confidential data loss. CSRF exploits may occur if the user visits a malicious page containing CSRF payload on the same machine that has access to the ad-ldap-connector admin console via a browser. You may be affected if you use the admin console included with ad-ldap-connector versions &lt;=5.0.12. If you do not have ad-ldap-connector admin console enabled or do not visit any other public URL while on the machine it is installed on, you are not affected. The issue is fixed in version 5.0.13.</description>
      <guid isPermaLink="false">CVE-2020-15259|2024-08-04T13:15:18.939Z</guid>
      <pubDate>Fri, 06 Nov 2020 19:35:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-41246|2024-08-04T03:08:31.551Z -- auth0 -- express-openid-connect
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-41246</link>
      <description>Express OpenID Connect is express JS middleware implementing sign on for Express web apps using OpenID Connect. Versions before and including `2.5.1` do not regenerate the session id and session cookie when user logs in. This behavior opens up the application to various session fixation vulnerabilities. Versions `2.5.2` contains a patch for this issue.</description>
      <guid isPermaLink="false">CVE-2021-41246|2024-08-04T03:08:31.551Z</guid>
      <pubDate>Thu, 09 Dec 2021 15:55:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-15125|2024-08-04T13:08:22.304Z -- auth0 -- node-auth0
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15125</link>
      <description>In auth0 (npm package) versions before 2.27.1, a DenyList of specific keys that should be sanitized from the request object contained in the error object is used. The key for Authorization header is not sanitized and in certain cases the Authorization header value can be logged exposing a bearer token. You are affected by this vulnerability if you are using the auth0 npm package, and you are using a Machine to Machine application authorized to use Auth0's management API</description>
      <guid isPermaLink="false">CVE-2020-15125|2024-08-04T13:08:22.304Z</guid>
      <pubDate>Wed, 29 Jul 2020 16:25:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-15240|2024-08-04T13:08:22.896Z -- auth0 -- omniauth-auth0
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15240</link>
      <description>omniauth-auth0 (rubygems) versions &gt;= 2.3.0 and &lt; 2.4.1 improperly validate the JWT token signature when using the `jwt_validator.verify` method. Improper validation of the JWT token signature can allow an attacker to bypass authentication and authorization. You are affected by this vulnerability if all of the following conditions apply: 1. You are using `omniauth-auth0`. 2. You are using `JWTValidator.verify` method directly OR you are not authenticating using the SDK’s default Authorization Code Flow. The issue is patched in version 2.4.1.</description>
      <guid isPermaLink="false">CVE-2020-15240|2024-08-04T13:08:22.896Z</guid>
      <pubDate>Wed, 21 Oct 2020 17:25:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-43812|2024-08-04T04:03:08.682Z -- auth0 -- nextjs-auth0
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-43812</link>
      <description>The Auth0 Next.js SDK is a library for implementing user authentication in Next.js applications. Versions before 1.6.2 do not filter out certain returnTo parameter values from the login url, which expose the application to an open redirect vulnerability. Users are advised to upgrade as soon as possible. There are no known workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2021-43812|2024-08-04T04:03:08.682Z</guid>
      <pubDate>Thu, 16 Dec 2021 18:20:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-15119|2024-08-04T13:08:21.963Z -- auth0 -- lock
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15119</link>
      <description>In auth0-lock versions before and including 11.25.1, dangerouslySetInnerHTML is used to update the DOM. When dangerouslySetInnerHTML is used, the application and its users might be exposed to cross-site scripting (XSS) attacks.</description>
      <guid isPermaLink="false">CVE-2020-15119|2024-08-04T13:08:21.963Z</guid>
      <pubDate>Wed, 19 Aug 2020 21:20:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-15084|2024-08-04T13:08:21.793Z -- auth0 -- express-jwt
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15084</link>
      <description>In express-jwt (NPM package) up and including version 5.3.3, the algorithms entry to be specified in the configuration is not being enforced. When algorithms is not specified in the configuration, with the combination of jwks-rsa, it may lead to authorization bypass. You are affected by this vulnerability if all of the following conditions apply: - You are using express-jwt - You do not have **algorithms** configured in your express-jwt configuration. - You are using libraries such as jwks-rsa as the **secret**. You can fix this by specifying **algorithms** in the express-jwt configuration. See linked GHSA for example. This is also fixed in version 6.0.0.</description>
      <guid isPermaLink="false">CVE-2020-15084|2024-08-04T13:08:21.793Z</guid>
      <pubDate>Tue, 30 Jun 2020 16:10:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-5263|2024-08-04T08:22:09.088Z -- auth0 -- auth0.js
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-5263</link>
      <description>auth0.js (NPM package auth0-js) greater than version 8.0.0 and before version 9.12.3 has a vulnerability. In the case of an (authentication) error, the error object returned by the library contains the original request of the user, which may include the plaintext password the user entered. If the error object is exposed or logged without modification, the application risks password exposure. This is fixed in version 9.12.3</description>
      <guid isPermaLink="false">CVE-2020-5263|2024-08-04T08:22:09.088Z</guid>
      <pubDate>Thu, 09 Apr 2020 15:50:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6813|2024-07-10T07:36:43.632Z -- auth0 -- login%20by%20auth0</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6813</link>
      <description>The Login by Auth0 plugin for WordPress is vulnerable to Reflected Cross-Site Scripting via the ‘wle’ parameter in all versions up to, and including, 4.6.0 due to insufficient input sanitization and output escaping. This makes it possible for unauthenticated attackers to inject arbitrary web scripts in pages that execute if they can successfully trick a user into performing an action such as clicking on a link.</description>
      <guid isPermaLink="false">CVE-2023-6813|2024-07-10T07:36:43.632Z</guid>
      <pubDate>Wed, 10 Jul 2024 07:36:43 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6813|2024-07-10T13:07:51.619Z -- auth0 -- login%20by%20auth0</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6813</link>
      <description>The Login by Auth0 plugin for WordPress is vulnerable to Reflected Cross-Site Scripting via the ‘wle’ parameter in all versions up to, and including, 4.6.0 due to insufficient input sanitization and output escaping. This makes it possible for unauthenticated attackers to inject arbitrary web scripts in pages that execute if they can successfully trick a user into performing an action such as clicking on a link.</description>
      <guid isPermaLink="false">CVE-2023-6813|2024-07-10T13:07:51.619Z</guid>
      <pubDate>Wed, 10 Jul 2024 07:36:43 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6813|2024-08-02T08:42:07.447Z -- auth0 -- login%20by%20auth0</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6813</link>
      <description>The Login by Auth0 plugin for WordPress is vulnerable to Reflected Cross-Site Scripting via the ‘wle’ parameter in all versions up to, and including, 4.6.0 due to insufficient input sanitization and output escaping. This makes it possible for unauthenticated attackers to inject arbitrary web scripts in pages that execute if they can successfully trick a user into performing an action such as clicking on a link.</description>
      <guid isPermaLink="false">CVE-2023-6813|2024-08-02T08:42:07.447Z</guid>
      <pubDate>Wed, 10 Jul 2024 07:36:43 +0000</pubDate>
    </item>
  </channel>
</rss>
