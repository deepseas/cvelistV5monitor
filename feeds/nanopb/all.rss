<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for nanopb -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/nanopb/all.rss</link>
    <description>The latest CVEs for nanopb -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 19:19:48 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-5235|2024-08-04T08:22:09.040Z -- nanopb -- nanopb
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-5235</link>
      <description>There is a potentially exploitable out of memory condition In Nanopb before 0.4.1, 0.3.9.5, and 0.2.9.4. When nanopb is compiled with PB_ENABLE_MALLOC, the message to be decoded contains a repeated string, bytes or message field and realloc() runs out of memory when expanding the array nanopb can end up calling `free()` on a pointer value that comes from uninitialized memory. Depending on platform this can result in a crash or further memory corruption, which may be exploitable in some cases. This problem is fixed in nanopb-0.4.1, nanopb-0.3.9.5, nanopb-0.2.9.4.</description>
      <guid isPermaLink="false">CVE-2020-5235|2024-08-04T08:22:09.040Z</guid>
      <pubDate>Tue, 04 Feb 2020 03:00:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-26243|2024-08-04T15:56:04.801Z -- nanopb -- nanopb
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-26243</link>
      <description>Nanopb is a small code-size Protocol Buffers implementation. In Nanopb before versions 0.4.4 and 0.3.9.7, decoding specifically formed message can leak memory if dynamic allocation is enabled and an oneof field contains a static submessage that contains a dynamic field, and the message being decoded contains the submessage multiple times. This is rare in normal messages, but it is a concern when untrusted data is parsed. This is fixed in versions 0.3.9.7 and 0.4.4. The following workarounds are available: 1) Set the option `no_unions` for the oneof field. This will generate fields as separate instead of C union, and avoids triggering the problematic code. 2) Set the type of the submessage field inside oneof to `FT_POINTER`. This way the whole submessage will be dynamically allocated and the problematic code is not executed. 3) Use an arena allocator for nanopb, to make sure all memory can be released afterwards.</description>
      <guid isPermaLink="false">CVE-2020-26243|2024-08-04T15:56:04.801Z</guid>
      <pubDate>Wed, 25 Nov 2020 16:50:15 +0000</pubDate>
    </item>
  </channel>
</rss>
