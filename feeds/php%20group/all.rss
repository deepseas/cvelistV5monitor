<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for PHP Group -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/php%20group/all.rss</link>
    <description>The latest CVEs for PHP Group -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 13 Jun 2024 05:22:28 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-4577|2024-06-09T19:42:36.464Z -- php%20group -- php
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4577</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows, if the system is set up to use certain code pages, Windows may use "Best-Fit" behavior to replace characters in command line given to Win32 API functions. PHP CGI module may misinterpret those characters as PHP options, which may allow a malicious user to pass options to PHP binary being run, and thus reveal the source code of scripts, run arbitrary PHP code on the server, etc.</description>
      <guid isPermaLink="false">CVE-2024-4577|2024-06-09T19:42:36.464Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:42:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4577|2024-06-12T12:19:07.720Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4577</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows, if the system is set up to use certain code pages, Windows may use "Best-Fit" behavior to replace characters in command line given to Win32 API functions. PHP CGI module may misinterpret those characters as PHP options, which may allow a malicious user to pass options to PHP binary being run, and thus reveal the source code of scripts, run arbitrary PHP code on the server, etc.</description>
      <guid isPermaLink="false">CVE-2024-4577|2024-06-12T12:19:07.720Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:42:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-5458|2024-06-09T18:32:45.969Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-5458</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, due to a code logic error, filtering functions such as filter_var when validating URLs (FILTER_VALIDATE_URL) for certain types of URLs the function will result in invalid user information (username + password part of URLs) being treated as valid user information. This may lead to the downstream code accepting invalid URLs as valid and parsing them incorrectly.</description>
      <guid isPermaLink="false">CVE-2024-5458|2024-06-09T18:32:45.969Z</guid>
      <pubDate>Sun, 09 Jun 2024 18:26:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-5585|2024-06-09T18:36:50.477Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-5585</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, the fix for CVE-2024-1874 does not work if the command name includes trailing spaces. Original issue: when using proc_open() command with array syntax, due to insufficient escaping, if the arguments of the executed command are controlled by a malicious user, the user can supply arguments that would execute arbitrary commands in Windows shell.</description>
      <guid isPermaLink="false">CVE-2024-5585|2024-06-09T18:36:50.477Z</guid>
      <pubDate>Sun, 09 Jun 2024 18:36:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1874|2024-04-29T03:57:35.624Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1874</link>
      <description>In PHP versions 8.1.* before 8.1.28, 8.2.* before 8.2.18, 8.3.* before 8.3.5, when using proc_open() command with array syntax, due to insufficient escaping, if the arguments of the executed command are controlled by a malicious user, the user can supply arguments that would execute arbitrary commands in Windows shell.</description>
      <guid isPermaLink="false">CVE-2024-1874|2024-04-29T03:57:35.624Z</guid>
      <pubDate>Mon, 29 Apr 2024 03:57:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4577|2024-06-11T03:56:02.192Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4577</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows, if the system is set up to use certain code pages, Windows may use "Best-Fit" behavior to replace characters in command line given to Win32 API functions. PHP CGI module may misinterpret those characters as PHP options, which may allow a malicious user to pass options to PHP binary being run, and thus reveal the source code of scripts, run arbitrary PHP code on the server, etc.</description>
      <guid isPermaLink="false">CVE-2024-4577|2024-06-11T03:56:02.192Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:42:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3096|2024-04-29T03:42:04.093Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-3096</link>
      <description>In PHP  version 8.1.* before 8.1.28, 8.2.* before 8.2.18, 8.3.* before 8.3.5, if a password stored with password_hash() starts with a null byte (\x00), testing a blank string as the password via password_verify() will incorrectly return true.</description>
      <guid isPermaLink="false">CVE-2024-3096|2024-04-29T03:42:04.093Z</guid>
      <pubDate>Mon, 29 Apr 2024 03:42:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2757|2024-04-29T03:49:15.519Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2757</link>
      <description>In PHP 8.3.* before 8.3.5, function mb_encode_mimeheader() runs endlessly for some inputs that contain long strings of non-space characters followed by a space. This could lead to a potential DoS attack if a hostile user sends data to an application that uses this function.</description>
      <guid isPermaLink="false">CVE-2024-2757|2024-04-29T03:49:15.519Z</guid>
      <pubDate>Mon, 29 Apr 2024 03:49:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2756|2024-04-29T03:34:16.912Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2756</link>
      <description>Due to an incomplete fix to  CVE-2022-31629 https://github.com/advisories/GHSA-c43m-486j-j32p , network and same-site attackers can set a standard insecure cookie in the victim's browser which is treated as a __Host- or __Secure- cookie by PHP applications.</description>
      <guid isPermaLink="false">CVE-2024-2756|2024-04-29T03:34:16.912Z</guid>
      <pubDate>Mon, 29 Apr 2024 03:34:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2408|2024-06-09T19:55:51.625Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2408</link>
      <description>The openssl_private_decrypt function in PHP, when using PKCS1 padding (OPENSSL_PKCS1_PADDING, which is the default), is vulnerable to the Marvin Attack unless it is used with an OpenSSL version that includes the changes from this pull request:  https://github.com/openssl/openssl/pull/13817  (rsa_pkcs1_implicit_rejection). These changes are part of OpenSSL 3.2 and have also been backported to stable versions of various Linux distributions, as well as to the PHP builds provided for Windows since the previous release. All distributors and builders should ensure that this version is used to prevent PHP from being vulnerable.

PHP Windows builds for the versions 8.1.29, 8.2.20 and 8.3.8 and above include OpenSSL patches that fix the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-2408|2024-06-09T19:55:51.625Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:55:51 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4577|2024-06-12T03:55:08.351Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4577</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows, if the system is set up to use certain code pages, Windows may use "Best-Fit" behavior to replace characters in command line given to Win32 API functions. PHP CGI module may misinterpret those characters as PHP options, which may allow a malicious user to pass options to PHP binary being run, and thus reveal the source code of scripts, run arbitrary PHP code on the server, etc.</description>
      <guid isPermaLink="false">CVE-2024-4577|2024-06-12T03:55:08.351Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:42:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4577|2024-06-12T16:20:21.945Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4577</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows, if the system is set up to use certain code pages, Windows may use "Best-Fit" behavior to replace characters in command line given to Win32 API functions. PHP CGI module may misinterpret those characters as PHP options, which may allow a malicious user to pass options to PHP binary being run, and thus reveal the source code of scripts, run arbitrary PHP code on the server, etc.</description>
      <guid isPermaLink="false">CVE-2024-4577|2024-06-12T16:20:21.945Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:42:36 +0000</pubDate>
    </item>
  </channel>
</rss>
