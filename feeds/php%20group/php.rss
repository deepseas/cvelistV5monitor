<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for PHP Group -- PHP</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/php%20group/php.rss</link>
    <description>The latest CVEs for PHP Group -- PHP</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 16 Sep 2024 17:23:01 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-7070|2024-09-16T16:28:36.773Z -- php%20group -- php
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-7070</link>
      <description>In PHP versions 7.2.x below 7.2.34, 7.3.x below 7.3.23 and 7.4.x below 7.4.11, when PHP is processing incoming HTTP cookie values, the cookie names are url-decoded. This may lead to cookies with prefixes like __Host confused with cookies that decode to such prefix, thus leading to an attacker being able to forge cookie which is supposed to be secure. See also CVE-2020-8184 for more information.</description>
      <guid isPermaLink="false">CVE-2020-7070|2024-09-16T16:28:36.773Z</guid>
      <pubDate>Fri, 02 Oct 2020 14:14:45 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-7063|2024-09-16T16:49:14.274Z -- php%20group -- php
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-7063</link>
      <description>In PHP versions 7.2.x below 7.2.28, 7.3.x below 7.3.15 and 7.4.x below 7.4.3, when creating PHAR archive using PharData::buildFromIterator() function, the files are added with default permissions (0666, or all access) even if the original files on the filesystem were with more restrictive permissions. This may result in files having more lax permissions than intended when such archive is extracted.</description>
      <guid isPermaLink="false">CVE-2020-7063|2024-09-16T16:49:14.274Z</guid>
      <pubDate>Thu, 27 Feb 2020 20:25:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4577|2024-08-01T20:47:40.634Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4577</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows, if the system is set up to use certain code pages, Windows may use "Best-Fit" behavior to replace characters in command line given to Win32 API functions. PHP CGI module may misinterpret those characters as PHP options, which may allow a malicious user to pass options to PHP binary being run, and thus reveal the source code of scripts, run arbitrary PHP code on the server, etc.</description>
      <guid isPermaLink="false">CVE-2024-4577|2024-08-01T20:47:40.634Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:42:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1874|2024-08-01T18:56:22.151Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1874</link>
      <description>In PHP versions 8.1.* before 8.1.28, 8.2.* before 8.2.18, 8.3.* before 8.3.5, when using proc_open() command with array syntax, due to insufficient escaping, if the arguments of the executed command are controlled by a malicious user, the user can supply arguments that would execute arbitrary commands in Windows shell.</description>
      <guid isPermaLink="false">CVE-2024-1874|2024-08-01T18:56:22.151Z</guid>
      <pubDate>Mon, 29 Apr 2024 03:57:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-5458|2024-08-01T14:00:57.567Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-5458</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, due to a code logic error, filtering functions such as filter_var when validating URLs (FILTER_VALIDATE_URL) for certain types of URLs the function will result in invalid user information (username + password part of URLs) being treated as valid user information. This may lead to the downstream code accepting invalid URLs as valid and parsing them incorrectly.</description>
      <guid isPermaLink="false">CVE-2024-5458|2024-08-01T14:00:57.567Z</guid>
      <pubDate>Sun, 09 Jun 2024 18:26:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2408|2024-07-30T19:58:20.200Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-2408</link>
      <description>The openssl_private_decrypt function in PHP, when using PKCS1 padding (OPENSSL_PKCS1_PADDING, which is the default), is vulnerable to the Marvin Attack unless it is used with an OpenSSL version that includes the changes from this pull request:  https://github.com/openssl/openssl/pull/13817  (rsa_pkcs1_implicit_rejection). These changes are part of OpenSSL 3.2 and have also been backported to stable versions of various Linux distributions, as well as to the PHP builds provided for Windows since the previous release. All distributors and builders should ensure that this version is used to prevent PHP from being vulnerable.

PHP Windows builds for the versions 8.1.29, 8.2.20 and 8.3.8 and above include OpenSSL patches that fix the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-2408|2024-07-30T19:58:20.200Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:55:51 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4577|2024-06-15T03:55:27.674Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4577</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows, if the system is set up to use certain code pages, Windows may use "Best-Fit" behavior to replace characters in command line given to Win32 API functions. PHP CGI module may misinterpret those characters as PHP options, which may allow a malicious user to pass options to PHP binary being run, and thus reveal the source code of scripts, run arbitrary PHP code on the server, etc.</description>
      <guid isPermaLink="false">CVE-2024-4577|2024-06-15T03:55:27.674Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:42:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4577|2024-06-09T19:42:36.464Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4577</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows, if the system is set up to use certain code pages, Windows may use "Best-Fit" behavior to replace characters in command line given to Win32 API functions. PHP CGI module may misinterpret those characters as PHP options, which may allow a malicious user to pass options to PHP binary being run, and thus reveal the source code of scripts, run arbitrary PHP code on the server, etc.</description>
      <guid isPermaLink="false">CVE-2024-4577|2024-06-09T19:42:36.464Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:42:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4577|2024-06-12T12:19:07.720Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4577</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows, if the system is set up to use certain code pages, Windows may use "Best-Fit" behavior to replace characters in command line given to Win32 API functions. PHP CGI module may misinterpret those characters as PHP options, which may allow a malicious user to pass options to PHP binary being run, and thus reveal the source code of scripts, run arbitrary PHP code on the server, etc.</description>
      <guid isPermaLink="false">CVE-2024-4577|2024-06-12T12:19:07.720Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:42:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-5458|2024-06-09T18:32:45.969Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-5458</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, due to a code logic error, filtering functions such as filter_var when validating URLs (FILTER_VALIDATE_URL) for certain types of URLs the function will result in invalid user information (username + password part of URLs) being treated as valid user information. This may lead to the downstream code accepting invalid URLs as valid and parsing them incorrectly.</description>
      <guid isPermaLink="false">CVE-2024-5458|2024-06-09T18:32:45.969Z</guid>
      <pubDate>Sun, 09 Jun 2024 18:26:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-5585|2024-06-09T18:36:50.477Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-5585</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, the fix for CVE-2024-1874 does not work if the command name includes trailing spaces. Original issue: when using proc_open() command with array syntax, due to insufficient escaping, if the arguments of the executed command are controlled by a malicious user, the user can supply arguments that would execute arbitrary commands in Windows shell.</description>
      <guid isPermaLink="false">CVE-2024-5585|2024-06-09T18:36:50.477Z</guid>
      <pubDate>Sun, 09 Jun 2024 18:36:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1874|2024-04-29T03:57:35.624Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1874</link>
      <description>In PHP versions 8.1.* before 8.1.28, 8.2.* before 8.2.18, 8.3.* before 8.3.5, when using proc_open() command with array syntax, due to insufficient escaping, if the arguments of the executed command are controlled by a malicious user, the user can supply arguments that would execute arbitrary commands in Windows shell.</description>
      <guid isPermaLink="false">CVE-2024-1874|2024-04-29T03:57:35.624Z</guid>
      <pubDate>Mon, 29 Apr 2024 03:57:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4577|2024-06-11T03:56:02.192Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4577</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows, if the system is set up to use certain code pages, Windows may use "Best-Fit" behavior to replace characters in command line given to Win32 API functions. PHP CGI module may misinterpret those characters as PHP options, which may allow a malicious user to pass options to PHP binary being run, and thus reveal the source code of scripts, run arbitrary PHP code on the server, etc.</description>
      <guid isPermaLink="false">CVE-2024-4577|2024-06-11T03:56:02.192Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:42:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3096|2024-04-29T03:42:04.093Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-3096</link>
      <description>In PHP  version 8.1.* before 8.1.28, 8.2.* before 8.2.18, 8.3.* before 8.3.5, if a password stored with password_hash() starts with a null byte (\x00), testing a blank string as the password via password_verify() will incorrectly return true.</description>
      <guid isPermaLink="false">CVE-2024-3096|2024-04-29T03:42:04.093Z</guid>
      <pubDate>Mon, 29 Apr 2024 03:42:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2757|2024-04-29T03:49:15.519Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2757</link>
      <description>In PHP 8.3.* before 8.3.5, function mb_encode_mimeheader() runs endlessly for some inputs that contain long strings of non-space characters followed by a space. This could lead to a potential DoS attack if a hostile user sends data to an application that uses this function.</description>
      <guid isPermaLink="false">CVE-2024-2757|2024-04-29T03:49:15.519Z</guid>
      <pubDate>Mon, 29 Apr 2024 03:49:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2756|2024-04-29T03:34:16.912Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2756</link>
      <description>Due to an incomplete fix to  CVE-2022-31629 https://github.com/advisories/GHSA-c43m-486j-j32p , network and same-site attackers can set a standard insecure cookie in the victim's browser which is treated as a __Host- or __Secure- cookie by PHP applications.</description>
      <guid isPermaLink="false">CVE-2024-2756|2024-04-29T03:34:16.912Z</guid>
      <pubDate>Mon, 29 Apr 2024 03:34:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2408|2024-06-09T19:55:51.625Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2408</link>
      <description>The openssl_private_decrypt function in PHP, when using PKCS1 padding (OPENSSL_PKCS1_PADDING, which is the default), is vulnerable to the Marvin Attack unless it is used with an OpenSSL version that includes the changes from this pull request:  https://github.com/openssl/openssl/pull/13817  (rsa_pkcs1_implicit_rejection). These changes are part of OpenSSL 3.2 and have also been backported to stable versions of various Linux distributions, as well as to the PHP builds provided for Windows since the previous release. All distributors and builders should ensure that this version is used to prevent PHP from being vulnerable.

PHP Windows builds for the versions 8.1.29, 8.2.20 and 8.3.8 and above include OpenSSL patches that fix the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-2408|2024-06-09T19:55:51.625Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:55:51 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4577|2024-06-12T03:55:08.351Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4577</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows, if the system is set up to use certain code pages, Windows may use "Best-Fit" behavior to replace characters in command line given to Win32 API functions. PHP CGI module may misinterpret those characters as PHP options, which may allow a malicious user to pass options to PHP binary being run, and thus reveal the source code of scripts, run arbitrary PHP code on the server, etc.</description>
      <guid isPermaLink="false">CVE-2024-4577|2024-06-12T03:55:08.351Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:42:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4577|2024-06-12T16:20:21.945Z -- php%20group -- php</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-4577</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows, if the system is set up to use certain code pages, Windows may use "Best-Fit" behavior to replace characters in command line given to Win32 API functions. PHP CGI module may misinterpret those characters as PHP options, which may allow a malicious user to pass options to PHP binary being run, and thus reveal the source code of scripts, run arbitrary PHP code on the server, etc.</description>
      <guid isPermaLink="false">CVE-2024-4577|2024-06-12T16:20:21.945Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:42:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4577|2024-06-14T03:55:21.499Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4577</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows, if the system is set up to use certain code pages, Windows may use "Best-Fit" behavior to replace characters in command line given to Win32 API functions. PHP CGI module may misinterpret those characters as PHP options, which may allow a malicious user to pass options to PHP binary being run, and thus reveal the source code of scripts, run arbitrary PHP code on the server, etc.</description>
      <guid isPermaLink="false">CVE-2024-4577|2024-06-14T03:55:21.499Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:42:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-5585|2024-07-16T18:15:25.949Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-5585</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, the fix for CVE-2024-1874 does not work if the command name includes trailing spaces. Original issue: when using proc_open() command with array syntax, due to insufficient escaping, if the arguments of the executed command are controlled by a malicious user, the user can supply arguments that would execute arbitrary commands in Windows shell.</description>
      <guid isPermaLink="false">CVE-2024-5585|2024-07-16T18:15:25.949Z</guid>
      <pubDate>Sun, 09 Jun 2024 18:36:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-3096|2024-08-01T19:32:42.742Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-3096</link>
      <description>In PHP  version 8.1.* before 8.1.28, 8.2.* before 8.2.18, 8.3.* before 8.3.5, if a password stored with password_hash() starts with a null byte (\x00), testing a blank string as the password via password_verify() will incorrectly return true.</description>
      <guid isPermaLink="false">CVE-2024-3096|2024-08-01T19:32:42.742Z</guid>
      <pubDate>Mon, 29 Apr 2024 03:42:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2757|2024-08-01T19:25:41.969Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-2757</link>
      <description>In PHP 8.3.* before 8.3.5, function mb_encode_mimeheader() runs endlessly for some inputs that contain long strings of non-space characters followed by a space. This could lead to a potential DoS attack if a hostile user sends data to an application that uses this function.</description>
      <guid isPermaLink="false">CVE-2024-2757|2024-08-01T19:25:41.969Z</guid>
      <pubDate>Mon, 29 Apr 2024 03:49:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2756|2024-08-01T19:25:41.700Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-2756</link>
      <description>Due to an incomplete fix to  CVE-2022-31629 https://github.com/advisories/GHSA-c43m-486j-j32p , network and same-site attackers can set a standard insecure cookie in the victim's browser which is treated as a __Host- or __Secure- cookie by PHP applications.</description>
      <guid isPermaLink="false">CVE-2024-2756|2024-08-01T19:25:41.700Z</guid>
      <pubDate>Mon, 29 Apr 2024 03:34:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2408|2024-08-01T19:11:53.465Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-2408</link>
      <description>The openssl_private_decrypt function in PHP, when using PKCS1 padding (OPENSSL_PKCS1_PADDING, which is the default), is vulnerable to the Marvin Attack unless it is used with an OpenSSL version that includes the changes from this pull request:  https://github.com/openssl/openssl/pull/13817  (rsa_pkcs1_implicit_rejection). These changes are part of OpenSSL 3.2 and have also been backported to stable versions of various Linux distributions, as well as to the PHP builds provided for Windows since the previous release. All distributors and builders should ensure that this version is used to prevent PHP from being vulnerable.

PHP Windows builds for the versions 8.1.29, 8.2.20 and 8.3.8 and above include OpenSSL patches that fix the vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-2408|2024-08-01T19:11:53.465Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:55:51 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-5458|2024-08-01T21:11:12.787Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-5458</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, due to a code logic error, filtering functions such as filter_var when validating URLs (FILTER_VALIDATE_URL) for certain types of URLs the function will result in invalid user information (username + password part of URLs) being treated as valid user information. This may lead to the downstream code accepting invalid URLs as valid and parsing them incorrectly.</description>
      <guid isPermaLink="false">CVE-2024-5458|2024-08-01T21:11:12.787Z</guid>
      <pubDate>Sun, 09 Jun 2024 18:26:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-5585|2024-08-01T21:18:06.622Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-5585</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, the fix for CVE-2024-1874 does not work if the command name includes trailing spaces. Original issue: when using proc_open() command with array syntax, due to insufficient escaping, if the arguments of the executed command are controlled by a malicious user, the user can supply arguments that would execute arbitrary commands in Windows shell.</description>
      <guid isPermaLink="false">CVE-2024-5585|2024-08-01T21:18:06.622Z</guid>
      <pubDate>Sun, 09 Jun 2024 18:36:50 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1874|2024-08-19T07:32:26.967Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1874</link>
      <description>In PHP versions 8.1.* before 8.1.28, 8.2.* before 8.2.18, 8.3.* before 8.3.5, when using proc_open() command with array syntax, due to insufficient escaping, if the arguments of the executed command are controlled by a malicious user, the user can supply arguments that would execute arbitrary commands in Windows shell.</description>
      <guid isPermaLink="false">CVE-2024-1874|2024-08-19T07:32:26.967Z</guid>
      <pubDate>Mon, 29 Apr 2024 03:57:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-4577|2024-08-19T07:54:59.546Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-4577</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, when using Apache and PHP-CGI on Windows, if the system is set up to use certain code pages, Windows may use "Best-Fit" behavior to replace characters in command line given to Win32 API functions. PHP CGI module may misinterpret those characters as PHP options, which may allow a malicious user to pass options to PHP binary being run, and thus reveal the source code of scripts, run arbitrary PHP code on the server, etc.</description>
      <guid isPermaLink="false">CVE-2024-4577|2024-08-19T07:54:59.546Z</guid>
      <pubDate>Sun, 09 Jun 2024 19:42:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-5585|2024-08-19T07:35:25.799Z -- php%20group -- php</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-5585</link>
      <description>In PHP versions 8.1.* before 8.1.29, 8.2.* before 8.2.20, 8.3.* before 8.3.8, the fix for CVE-2024-1874 does not work if the command name includes trailing spaces. Original issue: when using proc_open() command with array syntax, due to insufficient escaping, if the arguments of the executed command are controlled by a malicious user, the user can supply arguments that would execute arbitrary commands in Windows shell.</description>
      <guid isPermaLink="false">CVE-2024-5585|2024-08-19T07:35:25.799Z</guid>
      <pubDate>Sun, 09 Jun 2024 18:36:50 +0000</pubDate>
    </item>
  </channel>
</rss>
