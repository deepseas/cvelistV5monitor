<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Apache -- Olingo</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/apache/olingo.rss</link>
    <description>The latest CVEs for Apache -- Olingo</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 05 Aug 2024 06:24:43 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2019-17554|2024-08-05T01:40:15.799Z -- apache -- olingo
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-17554</link>
      <description>The XML content type entity deserializer in Apache Olingo versions 4.0.0 to 4.6.0 is not configured to deny the resolution of external entities. Request with content type "application/xml", which trigger the deserialization of entities, can be used to trigger XXE attacks.</description>
      <guid isPermaLink="false">CVE-2019-17554|2024-08-05T01:40:15.799Z</guid>
      <pubDate>Wed, 04 Dec 2019 16:54:22 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-17556|2024-08-05T01:40:15.833Z -- apache -- olingo
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-17556</link>
      <description>Apache Olingo versions 4.0.0 to 4.6.0 provide the AbstractService class, which is public API, uses ObjectInputStream and doesn't check classes being deserialized. If an attacker can feed malicious metadata to the class, then it may result in running attacker's code in the worse case.</description>
      <guid isPermaLink="false">CVE-2019-17556|2024-08-05T01:40:15.833Z</guid>
      <pubDate>Wed, 04 Dec 2019 16:59:49 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-17555|2024-08-05T01:40:15.978Z -- apache -- olingo
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-17555</link>
      <description>The AsyncResponseWrapperImpl class in Apache Olingo versions 4.0.0 to 4.6.0 reads the Retry-After header and passes it to the Thread.sleep() method without any check. If a malicious server returns a huge value in the header, then it can help to implement a DoS attack.</description>
      <guid isPermaLink="false">CVE-2019-17555|2024-08-05T01:40:15.978Z</guid>
      <pubDate>Wed, 04 Dec 2019 17:06:18 +0000</pubDate>
    </item>
  </channel>
</rss>
