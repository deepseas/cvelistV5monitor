<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for wolfSSL -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/wolfssl/all.rss</link>
    <description>The latest CVEs for wolfSSL -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 12:25:58 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-3724|2024-08-02T07:01:57.504Z -- wolfssl -- wolfssl
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-3724</link>
      <description>If a TLS 1.3 client gets neither a PSK (pre shared key) extension nor a KSE (key share extension) when connecting to a malicious server, a default predictable buffer gets used for the IKM (Input Keying Material) value when generating the session master secret. Using a potentially known IKM value when generating the session master secret key compromises the key generated, allowing an eavesdropper to reconstruct it and potentially allowing access to or meddling with message contents in the session. This issue does not affect client validation of connected servers, nor expose private key information, but could result in an insecure TLS 1.3 session when not controlling both sides of the connection. wolfSSL recommends that TLS 1.3 client side users update the version of wolfSSL used. 


</description>
      <guid isPermaLink="false">CVE-2023-3724|2024-08-02T07:01:57.504Z</guid>
      <pubDate>Mon, 17 Jul 2023 21:13:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-0901|2024-08-01T18:39:44.207Z -- wolfssl -- wolfssl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-0901</link>
      <description>Remotely executed SEGV and out of bounds read allows malicious packet sender to crash or cause an out of bounds read via sending a malformed packet with the correct length.</description>
      <guid isPermaLink="false">CVE-2024-0901|2024-08-01T18:39:44.207Z</guid>
      <pubDate>Mon, 25 Mar 2024 22:37:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6936|2024-07-05T17:20:59.134Z -- wolfssl -- wolfssl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6936</link>
      <description>In wolfSSL prior to 5.6.6, if callback functions are enabled (via the WOLFSSL_CALLBACKS flag), then a malicious TLS client or network attacker can trigger a buffer over-read on the heap of 5 bytes (WOLFSSL_CALLBACKS is only intended for debugging).</description>
      <guid isPermaLink="false">CVE-2023-6936|2024-07-05T17:20:59.134Z</guid>
      <pubDate>Tue, 20 Feb 2024 21:52:02 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-0901|2024-03-25T22:37:56.581Z -- wolfssl -- wolfssl</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-0901</link>
      <description>Remotely executed SEGV and out of bounds read allows malicious packet sender to crash or cause an out of bounds read via sending a malformed packet with the correct length.</description>
      <guid isPermaLink="false">CVE-2024-0901|2024-03-25T22:37:56.581Z</guid>
      <pubDate>Mon, 25 Mar 2024 22:37:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6937|2024-02-15T17:21:44.342Z -- wolfssl -- wolfssl</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-6937</link>
      <description>wolfSSL prior to 5.6.6 did not check that messages in one (D)TLS record do not span key boundaries. As a result, it was possible to combine (D)TLS messages using different keys into one (D)TLS record. The most extreme edge case is that, in (D)TLS 1.3, it was possible that an unencrypted (D)TLS 1.3 record from the server containing first a ServerHello message and then the rest of the first server flight would be accepted by a wolfSSL client. In (D)TLS 1.3 the handshake is encrypted after the ServerHello but a wolfSSL client would accept an unencrypted flight from the server. This does not compromise key negotiation and authentication so it is assigned a low severity rating.</description>
      <guid isPermaLink="false">CVE-2023-6937|2024-02-15T17:21:44.342Z</guid>
      <pubDate>Thu, 15 Feb 2024 17:21:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6936|2024-02-20T21:52:02.441Z -- wolfssl -- wolfssl</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-6936</link>
      <description>In wolfSSL prior to 5.6.6, if callback functions are enabled (via the WOLFSSL_CALLBACKS flag), then a malicious TLS client or network attacker can trigger a buffer over-read on the heap of 5 bytes (WOLFSSL_CALLBACKS is only intended for debugging).</description>
      <guid isPermaLink="false">CVE-2023-6936|2024-02-20T21:52:02.441Z</guid>
      <pubDate>Tue, 20 Feb 2024 21:52:02 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6935|2024-06-04T17:17:16.476Z -- wolfssl -- wolfssl</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-6935</link>
      <description>wolfSSL SP Math All RSA implementation is vulnerable to the Marvin Attack, new variation of a timing Bleichenbacher style attack, when built with the following options to configure:

--enable-all CFLAGS="-DWOLFSSL_STATIC_RSA"

The define “WOLFSSL_STATIC_RSA” enables static RSA cipher suites, which is not recommended, and has been disabled by default since wolfSSL 3.6.6.  Therefore the default build since 3.6.6, even with "--enable-all", is not vulnerable to the Marvin Attack. The vulnerability is specific to static RSA cipher suites, and expected to be padding-independent.

The vulnerability allows an attacker to decrypt ciphertexts and forge signatures after probing with a large number of test observations. However the server’s private key is not exposed.</description>
      <guid isPermaLink="false">CVE-2023-6935|2024-06-04T17:17:16.476Z</guid>
      <pubDate>Fri, 09 Feb 2024 22:25:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6937|2024-07-29T15:39:57.008Z -- wolfssl -- wolfssl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6937</link>
      <description>wolfSSL prior to 5.6.6 did not check that messages in one (D)TLS record do not span key boundaries. As a result, it was possible to combine (D)TLS messages using different keys into one (D)TLS record. The most extreme edge case is that, in (D)TLS 1.3, it was possible that an unencrypted (D)TLS 1.3 record from the server containing first a ServerHello message and then the rest of the first server flight would be accepted by a wolfSSL client. In (D)TLS 1.3 the handshake is encrypted after the ServerHello but a wolfSSL client would accept an unencrypted flight from the server. This does not compromise key negotiation and authentication so it is assigned a low severity rating.</description>
      <guid isPermaLink="false">CVE-2023-6937|2024-07-29T15:39:57.008Z</guid>
      <pubDate>Thu, 15 Feb 2024 17:21:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6935|2024-08-02T08:42:08.533Z -- wolfssl -- wolfssl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6935</link>
      <description>wolfSSL SP Math All RSA implementation is vulnerable to the Marvin Attack, new variation of a timing Bleichenbacher style attack, when built with the following options to configure:

--enable-all CFLAGS="-DWOLFSSL_STATIC_RSA"

The define “WOLFSSL_STATIC_RSA” enables static RSA cipher suites, which is not recommended, and has been disabled by default since wolfSSL 3.6.6.  Therefore the default build since 3.6.6, even with "--enable-all", is not vulnerable to the Marvin Attack. The vulnerability is specific to static RSA cipher suites, and expected to be padding-independent.

The vulnerability allows an attacker to decrypt ciphertexts and forge signatures after probing with a large number of test observations. However the server’s private key is not exposed.</description>
      <guid isPermaLink="false">CVE-2023-6935|2024-08-02T08:42:08.533Z</guid>
      <pubDate>Fri, 09 Feb 2024 22:25:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6937|2024-08-02T08:42:08.518Z -- wolfssl -- wolfssl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6937</link>
      <description>wolfSSL prior to 5.6.6 did not check that messages in one (D)TLS record do not span key boundaries. As a result, it was possible to combine (D)TLS messages using different keys into one (D)TLS record. The most extreme edge case is that, in (D)TLS 1.3, it was possible that an unencrypted (D)TLS 1.3 record from the server containing first a ServerHello message and then the rest of the first server flight would be accepted by a wolfSSL client. In (D)TLS 1.3 the handshake is encrypted after the ServerHello but a wolfSSL client would accept an unencrypted flight from the server. This does not compromise key negotiation and authentication so it is assigned a low severity rating.</description>
      <guid isPermaLink="false">CVE-2023-6937|2024-08-02T08:42:08.518Z</guid>
      <pubDate>Thu, 15 Feb 2024 17:21:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-6936|2024-08-02T08:42:08.671Z -- wolfssl -- wolfssl</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-6936</link>
      <description>In wolfSSL prior to 5.6.6, if callback functions are enabled (via the WOLFSSL_CALLBACKS flag), then a malicious TLS client or network attacker can trigger a buffer over-read on the heap of 5 bytes (WOLFSSL_CALLBACKS is only intended for debugging).</description>
      <guid isPermaLink="false">CVE-2023-6936|2024-08-02T08:42:08.671Z</guid>
      <pubDate>Tue, 20 Feb 2024 21:52:02 +0000</pubDate>
    </item>
  </channel>
</rss>
