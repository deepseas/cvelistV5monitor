<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for node-saml -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/node-saml/all.rss</link>
    <description>The latest CVEs for node-saml -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 13:22:30 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-39299|2024-08-03T12:00:44.015Z -- node-saml -- passport-saml
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-39299</link>
      <description>Passport-SAML is a SAML 2.0 authentication provider for Passport, the Node.js authentication library. A remote attacker may be able to bypass SAML authentication on a website using passport-saml. A successful attack requires that the attacker is in possession of an arbitrary IDP signed XML element. Depending on the IDP used, fully unauthenticated attacks (e.g without access to a valid user) might also be feasible if generation of a signed message can be triggered. Users should upgrade to passport-saml version 3.2.2 or newer. The issue was also present in the beta releases of `node-saml` before version 4.0.0-beta.5. If you cannot upgrade, disabling SAML authentication may be done as a workaround.</description>
      <guid isPermaLink="false">CVE-2022-39299|2024-08-03T12:00:44.015Z</guid>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-39300|2024-08-03T12:00:43.991Z -- node-saml -- node-saml
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-39300</link>
      <description>node SAML is a SAML 2.0 library based on the SAML implementation of passport-saml. A remote attacker may be able to bypass SAML authentication on a website using passport-saml. A successful attack requires that the attacker is in possession of an arbitrary IDP signed XML element. Depending on the IDP used, fully unauthenticated attacks (e.g without access to a valid user) might also be feasible if generation of a signed message can be triggered. Users should upgrade to node-saml version 4.0.0-beta5 or newer. Disabling SAML authentication may be done as a workaround.</description>
      <guid isPermaLink="false">CVE-2022-39300|2024-08-03T12:00:43.991Z</guid>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32962|2024-07-19T15:09:38.365Z -- node-saml -- xml-crypto</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32962</link>
      <description>xml-crypto is an xml digital signature and encryption library for Node.js. In affected versions the default configuration does not check authorization of the signer, it only checks the validity of the signature per section 3.2.2 of the w3 xmldsig-core-20080610 spec. As such, without additional validation steps, the default configuration allows a malicious actor to re-sign an XML document, place the certificate in a `` element, and pass `xml-crypto` default validation checks. As a result `xml-crypto` trusts by default any certificate provided via digitally signed XML document's ``. `xml-crypto` prefers to use any certificate provided via digitally signed XML document's `` even if library was configured to use specific certificate (`publicCert`) for signature verification purposes.  An attacker can spoof signature verification by modifying XML document and replacing existing signature with signature generated with malicious private key (created by attacker) and by attaching that private key's certificate to `` element. This vulnerability is combination of changes introduced to `4.0.0` on pull request 301 / commit `c2b83f98` and has been addressed in version 6.0.0 with pull request 445 / commit `21201723d`. Users are advised to upgrade. Users unable to upgrade may either check the certificate extracted via `getCertFromKeyInfo` against trusted certificates before accepting the results of the validation or set `xml-crypto's getCertFromKeyInfo` to `() =&gt; undefined` forcing `xml-crypto` to use an explicitly configured `publicCert` or `privateKey` for signature verification.</description>
      <guid isPermaLink="false">CVE-2024-32962|2024-07-19T15:09:38.365Z</guid>
      <pubDate>Thu, 02 May 2024 06:48:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32962|2024-05-02T06:48:55.906Z -- node-saml -- xml-crypto</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32962</link>
      <description>xml-crypto is an xml digital signature and encryption library for Node.js. In affected versions the default configuration does not check authorization of the signer, it only checks the validity of the signature per section 3.2.2 of the w3 xmldsig-core-20080610 spec. As such, without additional validation steps, the default configuration allows a malicious actor to re-sign an XML document, place the certificate in a `` element, and pass `xml-crypto` default validation checks. As a result `xml-crypto` trusts by default any certificate provided via digitally signed XML document's ``. `xml-crypto` prefers to use any certificate provided via digitally signed XML document's `` even if library was configured to use specific certificate (`publicCert`) for signature verification purposes.  An attacker can spoof signature verification by modifying XML document and replacing existing signature with signature generated with malicious private key (created by attacker) and by attaching that private key's certificate to `` element. This vulnerability is combination of changes introduced to `4.0.0` on pull request 301 / commit `c2b83f98` and has been addressed in version 6.0.0 with pull request 445 / commit `21201723d`. Users are advised to upgrade. Users unable to upgrade may either check the certificate extracted via `getCertFromKeyInfo` against trusted certificates before accepting the results of the validation or set `xml-crypto's getCertFromKeyInfo` to `() =&gt; undefined` forcing `xml-crypto` to use an explicitly configured `publicCert` or `privateKey` for signature verification.</description>
      <guid isPermaLink="false">CVE-2024-32962|2024-05-02T06:48:55.906Z</guid>
      <pubDate>Thu, 02 May 2024 06:48:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32962|2024-08-02T02:27:52.348Z -- node-saml -- xml-crypto</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32962</link>
      <description>xml-crypto is an xml digital signature and encryption library for Node.js. In affected versions the default configuration does not check authorization of the signer, it only checks the validity of the signature per section 3.2.2 of the w3 xmldsig-core-20080610 spec. As such, without additional validation steps, the default configuration allows a malicious actor to re-sign an XML document, place the certificate in a `` element, and pass `xml-crypto` default validation checks. As a result `xml-crypto` trusts by default any certificate provided via digitally signed XML document's ``. `xml-crypto` prefers to use any certificate provided via digitally signed XML document's `` even if library was configured to use specific certificate (`publicCert`) for signature verification purposes.  An attacker can spoof signature verification by modifying XML document and replacing existing signature with signature generated with malicious private key (created by attacker) and by attaching that private key's certificate to `` element. This vulnerability is combination of changes introduced to `4.0.0` on pull request 301 / commit `c2b83f98` and has been addressed in version 6.0.0 with pull request 445 / commit `21201723d`. Users are advised to upgrade. Users unable to upgrade may either check the certificate extracted via `getCertFromKeyInfo` against trusted certificates before accepting the results of the validation or set `xml-crypto's getCertFromKeyInfo` to `() =&gt; undefined` forcing `xml-crypto` to use an explicitly configured `publicCert` or `privateKey` for signature verification.</description>
      <guid isPermaLink="false">CVE-2024-32962|2024-08-02T02:27:52.348Z</guid>
      <pubDate>Thu, 02 May 2024 06:48:55 +0000</pubDate>
    </item>
  </channel>
</rss>
