<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Canonical -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/canonical/all.rss</link>
    <description>The latest CVEs for Canonical -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 13:22:53 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-11934|2024-08-04T11:42:00.558Z -- canonical -- snapd
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-11934</link>
      <description>It was discovered that snapctl user-open allowed altering the $XDG_DATA_DIRS environment variable when calling the system xdg-open. OpenURL() in usersession/userd/launcher.go would alter $XDG_DATA_DIRS to append a path to a directory controlled by the calling snap. A malicious snap could exploit this to bypass intended access restrictions to control how the host system xdg-open script opens the URL and, for example, execute a script shipped with the snap without confinement. This issue did not affect Ubuntu Core systems. Fixed in snapd versions 2.45.1ubuntu0.2, 2.45.1+18.04.2 and 2.45.1+20.04.2.</description>
      <guid isPermaLink="false">CVE-2020-11934|2024-08-04T11:42:00.558Z</guid>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-8833|2024-08-04T10:12:10.622Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-8833</link>
      <description>Time-of-check Time-of-use Race Condition vulnerability on crash report ownership change in Apport allows for a possible privilege escalation opportunity. If fs.protected_symlinks is disabled, this can be exploited between the os.open and os.chown calls when the Apport cron script clears out crash files of size 0. A symlink with the same name as the deleted file can then be created upon which chown will be called, changing the file owner to root. Fixed in versions 2.20.1-0ubuntu2.23, 2.20.9-0ubuntu7.14, 2.20.11-0ubuntu8.8 and 2.20.11-0ubuntu22.</description>
      <guid isPermaLink="false">CVE-2020-8833|2024-08-04T10:12:10.622Z</guid>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-11933|2024-08-04T11:42:00.821Z -- canonical -- snapd
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-11933</link>
      <description>cloud-init as managed by snapd on Ubuntu Core 16 and Ubuntu Core 18 devices was run without restrictions on every boot, which a physical attacker could exploit by crafting cloud-init user-data/meta-data via external media to perform arbitrary changes on the device to bypass intended security mechanisms such as full disk encryption. This issue did not affect traditional Ubuntu systems. Fixed in snapd version 2.45.2, revision 8539 and core version 2.45.2, revision 9659.</description>
      <guid isPermaLink="false">CVE-2020-11933|2024-08-04T11:42:00.821Z</guid>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-8831|2024-08-04T10:12:10.889Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-8831</link>
      <description>Apport creates a world writable lock file with root ownership in the world writable /var/lock/apport directory. If the apport/ directory does not exist (this is not uncommon as /var/lock is a tmpfs), it will create the directory, otherwise it will simply continue execution using the existing directory. This allows for a symlink attack if an attacker were to create a symlink at /var/lock/apport, changing apport's lock file location. This file could then be used to escalate privileges, for example. Fixed in versions 2.20.1-0ubuntu2.23, 2.20.9-0ubuntu7.14, 2.20.11-0ubuntu8.8 and 2.20.11-0ubuntu22.</description>
      <guid isPermaLink="false">CVE-2020-8831|2024-08-04T10:12:10.889Z</guid>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-11937|2024-08-04T11:42:00.469Z -- canonical -- whoopsie
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-11937</link>
      <description>In whoopsie, parse_report() from whoopsie.c allows a local attacker to cause a denial of service via a crafted file. The DoS is caused by resource exhaustion due to a memory leak. Fixed in 0.2.52.5ubuntu0.5, 0.2.62ubuntu0.5 and 0.2.69ubuntu0.1.</description>
      <guid isPermaLink="false">CVE-2020-11937|2024-08-04T11:42:00.469Z</guid>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-11932|2024-08-04T11:42:00.812Z -- canonical -- subiquity
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-11932</link>
      <description>It was discovered that the Subiquity installer for Ubuntu Server logged the LUKS full disk encryption password if one was entered.</description>
      <guid isPermaLink="false">CVE-2020-11932|2024-08-04T11:42:00.812Z</guid>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-11931|2024-08-04T11:42:00.531Z -- canonical -- pulseaudio
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-11931</link>
      <description>An Ubuntu-specific modification to Pulseaudio to provide security mediation for Snap-packaged applications was found to have a bypass of intended access restriction for snaps which plugs any of pulseaudio, audio-playback or audio-record via unloading the pulseaudio snap policy module. This issue affects: pulseaudio 1:8.0 versions prior to 1:8.0-0ubuntu3.12; 1:11.1 versions prior to 1:11.1-1ubuntu7.7; 1:13.0 versions prior to 1:13.0-1ubuntu1.2; 1:13.99.1 versions prior to 1:13.99.1-1ubuntu3.2;</description>
      <guid isPermaLink="false">CVE-2020-11931|2024-08-04T11:42:00.531Z</guid>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-08-02T01:03:51.709Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-08-02T01:03:51.709Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-08-02T01:03:51.700Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-08-02T01:03:51.700Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-07-30T16:08:06.843Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-07-30T16:08:06.843Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-07-25T20:21:43.831Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-07-25T20:21:43.831Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-07-22T14:20:08.920Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-07-22T14:20:08.920Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1724|2024-07-25T19:28:23.939Z -- canonical -- snap</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1724</link>
      <description>In snapd versions prior to 2.62, when using AppArmor for enforcement of 
sandbox permissions, snapd failed to restrict writes to the $HOME/bin
path. In Ubuntu, when this path exists, it is automatically added to
the users PATH. An attacker who could convince a user to install a
malicious snap which used the 'home' plug could use this vulnerability
to install arbitrary scripts into the users PATH which may then be run
by the user outside of the expected snap sandbox and hence allow them
to escape confinement.</description>
      <guid isPermaLink="false">CVE-2024-1724|2024-07-25T19:28:23.939Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:05:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-07-25T19:39:41.050Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-07-25T19:39:41.050Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-07-25T19:28:05.480Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-07-25T19:28:05.480Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-07-26T13:27:49.253Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-07-26T13:27:49.253Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1724|2024-08-01T18:48:21.887Z -- canonical -- snap</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1724</link>
      <description>In snapd versions prior to 2.62, when using AppArmor for enforcement of 
sandbox permissions, snapd failed to restrict writes to the $HOME/bin
path. In Ubuntu, when this path exists, it is automatically added to
the users PATH. An attacker who could convince a user to install a
malicious snap which used the 'home' plug could use this vulnerability
to install arbitrary scripts into the users PATH which may then be run
by the user outside of the expected snap sandbox and hence allow them
to escape confinement.</description>
      <guid isPermaLink="false">CVE-2024-1724|2024-08-01T18:48:21.887Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:05:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-08-02T04:46:52.414Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-08-02T04:46:52.414Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
  </channel>
</rss>
