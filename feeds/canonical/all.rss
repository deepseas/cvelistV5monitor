<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Canonical -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/canonical/all.rss</link>
    <description>The latest CVEs for Canonical -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 05 Aug 2024 03:23:32 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2019-15789|2024-08-05T00:56:22.452Z -- canonical -- microk8s
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-15789</link>
      <description>Privilege escalation vulnerability in MicroK8s allows a low privilege user with local access to obtain root access to the host by provisioning a privileged container. Fixed in MicroK8s 1.15.3.</description>
      <guid isPermaLink="false">CVE-2019-15789|2024-08-05T00:56:22.452Z</guid>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-15796|2024-08-05T00:56:22.408Z -- canonical -- python-apt
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-15796</link>
      <description>Python-apt doesn't check if hashes are signed in `Version.fetch_binary()` and `Version.fetch_source()` of apt/package.py or in `_fetch_archives()` of apt/cache.py in version 1.9.3ubuntu2 and earlier. This allows downloads from unsigned repositories which shouldn't be allowed and has been fixed in verisions 1.9.5, 1.9.0ubuntu1.2, 1.6.5ubuntu0.1, 1.1.0~beta1ubuntu0.16.04.7, 0.9.3.5ubuntu3+esm2, and 0.8.3ubuntu7.5.</description>
      <guid isPermaLink="false">CVE-2019-15796|2024-08-05T00:56:22.408Z</guid>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-15790|2024-08-05T00:56:22.465Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-15790</link>
      <description>Apport reads and writes information on a crashed process to /proc/pid with elevated privileges. Apport then determines which user the crashed process belongs to by reading /proc/pid through get_pid_info() in data/apport. An unprivileged user could exploit this to read information about a privileged running process by exploiting PID recycling. This information could then be used to obtain ASLR offsets for a process with an existing memory corruption vulnerability. The initial fix introduced regressions in the Python Apport library due to a missing argument in Report.add_proc_environ in apport/report.py. It also caused an autopkgtest failure when reading /proc/pid and with Python 2 compatibility by reading /proc maps. The initial and subsequent regression fixes are in 2.20.11-0ubuntu16, 2.20.11-0ubuntu8.6, 2.20.9-0ubuntu7.12, 2.20.1-0ubuntu2.22 and 2.14.1-0ubuntu3.29+esm3.</description>
      <guid isPermaLink="false">CVE-2019-15790|2024-08-05T00:56:22.465Z</guid>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-15795|2024-08-05T00:56:22.746Z -- canonical -- python-apt
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-15795</link>
      <description>python-apt only checks the MD5 sums of downloaded files in `Version.fetch_binary()` and `Version.fetch_source()` of apt/package.py in version 1.9.0ubuntu1 and earlier. This allows a man-in-the-middle attack which could potentially be used to install altered packages and has been fixed in versions 1.9.0ubuntu1.2, 1.6.5ubuntu0.1, 1.1.0~beta1ubuntu0.16.04.7, 0.9.3.5ubuntu3+esm2, and 0.8.3ubuntu7.5.</description>
      <guid isPermaLink="false">CVE-2019-15795|2024-08-05T00:56:22.746Z</guid>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-08-02T04:46:52.414Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-08-02T04:46:52.414Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1724|2024-08-01T18:48:21.887Z -- canonical -- snap</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1724</link>
      <description>In snapd versions prior to 2.62, when using AppArmor for enforcement of 
sandbox permissions, snapd failed to restrict writes to the $HOME/bin
path. In Ubuntu, when this path exists, it is automatically added to
the users PATH. An attacker who could convince a user to install a
malicious snap which used the 'home' plug could use this vulnerability
to install arbitrary scripts into the users PATH which may then be run
by the user outside of the expected snap sandbox and hence allow them
to escape confinement.</description>
      <guid isPermaLink="false">CVE-2024-1724|2024-08-01T18:48:21.887Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:05:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-07-26T13:27:49.253Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-07-26T13:27:49.253Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-07-25T19:28:05.480Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-07-25T19:28:05.480Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-07-25T19:39:41.050Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-07-25T19:39:41.050Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1724|2024-07-25T19:28:23.939Z -- canonical -- snap</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1724</link>
      <description>In snapd versions prior to 2.62, when using AppArmor for enforcement of 
sandbox permissions, snapd failed to restrict writes to the $HOME/bin
path. In Ubuntu, when this path exists, it is automatically added to
the users PATH. An attacker who could convince a user to install a
malicious snap which used the 'home' plug could use this vulnerability
to install arbitrary scripts into the users PATH which may then be run
by the user outside of the expected snap sandbox and hence allow them
to escape confinement.</description>
      <guid isPermaLink="false">CVE-2024-1724|2024-07-25T19:28:23.939Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:05:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-07-22T14:20:08.920Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-07-22T14:20:08.920Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-07-25T20:21:43.831Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-07-25T20:21:43.831Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-07-30T16:08:06.843Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-07-30T16:08:06.843Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-08-02T01:03:51.700Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-08-02T01:03:51.700Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-08-02T01:03:51.709Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-08-02T01:03:51.709Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
  </channel>
</rss>
