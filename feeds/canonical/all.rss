<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Canonical -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/canonical/all.rss</link>
    <description>The latest CVEs for Canonical -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 16 Sep 2024 21:42:56 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-16119|2024-09-16T18:19:48.160Z -- canonical -- linux%20kernel
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-16119</link>
      <description>Use-after-free vulnerability in the Linux kernel exploitable by a local attacker due to reuse of a DCCP socket with an attached dccps_hc_tx_ccid object as a listener after being released. Fixed in Ubuntu Linux kernel 5.4.0-51.56, 5.3.0-68.63, 4.15.0-121.123, 4.4.0-193.224, 3.13.0.182.191 and 3.2.0-149.196.</description>
      <guid isPermaLink="false">CVE-2020-16119|2024-09-16T18:19:48.160Z</guid>
      <pubDate>Thu, 14 Jan 2021 01:10:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-32556|2024-09-16T19:51:18.523Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-32556</link>
      <description>It was discovered that the get_modified_conffiles() function in backends/packaging-apt-dpkg.py allowed injecting modified package names in a manner that would confuse the dpkg(1) call.</description>
      <guid isPermaLink="false">CVE-2021-32556|2024-09-16T19:51:18.523Z</guid>
      <pubDate>Sat, 12 Jun 2021 03:40:42 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-11480|2024-09-16T20:46:41.386Z -- canonical -- pc-kernel
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-11480</link>
      <description>The pc-kernel snap build process hardcoded the --allow-insecure-repositories and --allow-unauthenticated apt options when creating the build chroot environment. This could allow an attacker who is able to perform a MITM attack between the build environment and the Ubuntu archive to install a malicious package within the build chroot. This issue affects pc-kernel versions prior to and including 2019-07-16</description>
      <guid isPermaLink="false">CVE-2019-11480|2024-09-16T20:46:41.386Z</guid>
      <pubDate>Tue, 14 Apr 2020 02:10:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-25684|2024-09-16T19:15:56.426Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-25684</link>
      <description>It was discovered that apport in data/apport did not properly open a report file to prevent hanging reads on a FIFO.</description>
      <guid isPermaLink="false">CVE-2021-25684|2024-09-16T19:15:56.426Z</guid>
      <pubDate>Fri, 11 Jun 2021 02:20:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-32557|2024-09-16T17:53:05.508Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-32557</link>
      <description>It was discovered that the process_report() function in data/whoopsie-upload-all allowed arbitrary file writes via symlinks.</description>
      <guid isPermaLink="false">CVE-2021-32557|2024-09-16T17:53:05.508Z</guid>
      <pubDate>Sat, 12 Jun 2021 03:40:43 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-32548|2024-09-16T18:29:09.540Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-32548</link>
      <description>It was discovered that read_file() in apport/hookutils.py would follow symbolic links or open FIFOs. When this function is used by the openjdk-8 package apport hooks, it could expose private data to other local users.</description>
      <guid isPermaLink="false">CVE-2021-32548|2024-09-16T18:29:09.540Z</guid>
      <pubDate>Sat, 12 Jun 2021 03:40:37 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2012-0955|2024-09-16T17:14:04.258Z -- canonical -- software-properties
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2012-0955</link>
      <description>software-properties was vulnerable to a person-in-the-middle attack due to incorrect TLS certificate validation in softwareproperties/ppa.py. software-properties didn't check TLS certificates under python2 and only checked certificates under python3 if a valid certificate bundle was provided. Fixed in software-properties version 0.92.</description>
      <guid isPermaLink="false">CVE-2012-0955|2024-09-16T17:14:04.258Z</guid>
      <pubDate>Wed, 02 Dec 2020 00:50:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-15701|2024-09-16T20:52:16.329Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15701</link>
      <description>An unhandled exception in check_ignored() in apport/report.py can be exploited by a local attacker to cause a denial of service. If the mtime attribute is a string value in apport-ignore.xml, it will trigger an unhandled exception, resulting in a crash. Fixed in 2.20.1-0ubuntu2.24, 2.20.9-0ubuntu7.16, 2.20.11-0ubuntu27.6.</description>
      <guid isPermaLink="false">CVE-2020-15701|2024-09-16T20:52:16.329Z</guid>
      <pubDate>Thu, 06 Aug 2020 22:50:22 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-7304|2024-09-16T18:38:22.569Z -- canonical -- snapd
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-7304</link>
      <description>Canonical snapd before version 2.37.1 incorrectly performed socket owner validation, allowing an attacker to run arbitrary commands as root. This issue affects: Canonical snapd versions prior to 2.37.1.</description>
      <guid isPermaLink="false">CVE-2019-7304|2024-09-16T18:38:22.569Z</guid>
      <pubDate>Tue, 23 Apr 2019 15:57:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-11485|2024-09-16T16:57:41.110Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-11485</link>
      <description>Sander Bos discovered Apport's lock file was in a world-writable directory which allowed all users to prevent crash handling.</description>
      <guid isPermaLink="false">CVE-2019-11485|2024-09-16T16:57:41.110Z</guid>
      <pubDate>Sat, 08 Feb 2020 04:50:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-8831|2024-09-16T19:00:55.009Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-8831</link>
      <description>Apport creates a world writable lock file with root ownership in the world writable /var/lock/apport directory. If the apport/ directory does not exist (this is not uncommon as /var/lock is a tmpfs), it will create the directory, otherwise it will simply continue execution using the existing directory. This allows for a symlink attack if an attacker were to create a symlink at /var/lock/apport, changing apport's lock file location. This file could then be used to escalate privileges, for example. Fixed in versions 2.20.1-0ubuntu2.23, 2.20.9-0ubuntu7.14, 2.20.11-0ubuntu8.8 and 2.20.11-0ubuntu22.</description>
      <guid isPermaLink="false">CVE-2020-8831|2024-09-16T19:00:55.009Z</guid>
      <pubDate>Wed, 22 Apr 2020 21:15:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2014-1420|2024-09-16T17:08:12.605Z -- canonical -- ubuntu-ui-toolkit
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2014-1420</link>
      <description>On desktop, Ubuntu UI Toolkit's StateSaver would serialise data on tmp/ files which an attacker could use to expose potentially sensitive data. StateSaver would also open files without the O_EXCL flag. An attacker could exploit this to launch a symlink attack, though this is partially mitigated by symlink and hardlink restrictions in Ubuntu. Fixed in 1.1.1188+14.10.20140813.4-0ubuntu1.</description>
      <guid isPermaLink="false">CVE-2014-1420|2024-09-16T17:08:12.605Z</guid>
      <pubDate>Thu, 10 Sep 2020 23:55:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-16123|2024-09-16T19:20:12.173Z -- canonical -- pulseaudio
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-16123</link>
      <description>An Ubuntu-specific patch in PulseAudio created a race condition where the snap policy module would fail to identify a client connection from a snap as coming from a snap if SCM_CREDENTIALS were missing, allowing the snap to connect to PulseAudio without proper confinement. This could be exploited by an attacker to expose sensitive information. Fixed in 1:13.99.3-1ubuntu2, 1:13.99.2-1ubuntu2.1, 1:13.99.1-1ubuntu3.8, 1:11.1-1ubuntu7.11, and 1:8.0-0ubuntu3.15.</description>
      <guid isPermaLink="false">CVE-2020-16123|2024-09-16T19:20:12.173Z</guid>
      <pubDate>Thu, 03 Dec 2020 23:15:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-27348|2024-09-16T17:14:15.768Z -- canonical -- snapcraft
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-27348</link>
      <description>In some conditions, a snap package built by snapcraft includes the current directory in LD_LIBRARY_PATH, allowing a malicious snap to gain code execution within the context of another snap if both plug the home interface or similar. This issue affects snapcraft versions prior to 4.4.4, prior to 2.43.1+16.04.1, and prior to 2.43.1+18.04.1.</description>
      <guid isPermaLink="false">CVE-2020-27348|2024-09-16T17:14:15.768Z</guid>
      <pubDate>Fri, 04 Dec 2020 02:30:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-16128|2024-09-16T16:24:15.489Z -- canonical -- aptdaemon
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-16128</link>
      <description>The aptdaemon DBus interface disclosed file existence disclosure by setting Terminal/DebconfSocket properties, aka GHSL-2020-192 and GHSL-2020-196. This affected versions prior to 1.1.1+bzr982-0ubuntu34.1, 1.1.1+bzr982-0ubuntu32.3, 1.1.1+bzr982-0ubuntu19.5, 1.1.1+bzr982-0ubuntu14.5.</description>
      <guid isPermaLink="false">CVE-2020-16128|2024-09-16T16:24:15.489Z</guid>
      <pubDate>Wed, 09 Dec 2020 03:35:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-15790|2024-09-16T20:43:33.638Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-15790</link>
      <description>Apport reads and writes information on a crashed process to /proc/pid with elevated privileges. Apport then determines which user the crashed process belongs to by reading /proc/pid through get_pid_info() in data/apport. An unprivileged user could exploit this to read information about a privileged running process by exploiting PID recycling. This information could then be used to obtain ASLR offsets for a process with an existing memory corruption vulnerability. The initial fix introduced regressions in the Python Apport library due to a missing argument in Report.add_proc_environ in apport/report.py. It also caused an autopkgtest failure when reading /proc/pid and with Python 2 compatibility by reading /proc maps. The initial and subsequent regression fixes are in 2.20.11-0ubuntu16, 2.20.11-0ubuntu8.6, 2.20.9-0ubuntu7.12, 2.20.1-0ubuntu2.22 and 2.14.1-0ubuntu3.29+esm3.</description>
      <guid isPermaLink="false">CVE-2019-15790|2024-09-16T20:43:33.638Z</guid>
      <pubDate>Mon, 27 Apr 2020 23:25:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-15702|2024-09-16T17:28:12.244Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15702</link>
      <description>TOCTOU Race Condition vulnerability in apport allows a local attacker to escalate privileges and execute arbitrary code. An attacker may exit the crashed process and exploit PID recycling to spawn a root process with the same PID as the crashed process, which can then be used to escalate privileges. Fixed in 2.20.1-0ubuntu2.24, 2.20.9 versions prior to 2.20.9-0ubuntu7.16 and 2.20.11 versions prior to 2.20.11-0ubuntu27.6. Was ZDI-CAN-11234.</description>
      <guid isPermaLink="false">CVE-2020-15702|2024-09-16T17:28:12.244Z</guid>
      <pubDate>Thu, 06 Aug 2020 22:50:22 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-32551|2024-09-16T20:21:31.720Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-32551</link>
      <description>It was discovered that read_file() in apport/hookutils.py would follow symbolic links or open FIFOs. When this function is used by the openjdk-15 package apport hooks, it could expose private data to other local users.</description>
      <guid isPermaLink="false">CVE-2021-32551|2024-09-16T20:21:31.720Z</guid>
      <pubDate>Sat, 12 Jun 2021 03:40:39 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2013-1053|2024-09-16T16:23:22.885Z -- canonical -- remote-login-service
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2013-1053</link>
      <description>In crypt.c of remote-login-service, the cryptographic algorithm used to cache usernames and passwords is insecure. An attacker could use this vulnerability to recover usernames and passwords from the file. This issue affects version 1.0.0-0ubuntu3 and prior versions.</description>
      <guid isPermaLink="false">CVE-2013-1053|2024-09-16T16:23:22.885Z</guid>
      <pubDate>Wed, 13 Jan 2021 23:00:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-15795|2024-09-16T19:45:50.191Z -- canonical -- python-apt
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-15795</link>
      <description>python-apt only checks the MD5 sums of downloaded files in `Version.fetch_binary()` and `Version.fetch_source()` of apt/package.py in version 1.9.0ubuntu1 and earlier. This allows a man-in-the-middle attack which could potentially be used to install altered packages and has been fixed in versions 1.9.0ubuntu1.2, 1.6.5ubuntu0.1, 1.1.0~beta1ubuntu0.16.04.7, 0.9.3.5ubuntu3+esm2, and 0.8.3ubuntu7.5.</description>
      <guid isPermaLink="false">CVE-2019-15795|2024-09-16T19:45:50.191Z</guid>
      <pubDate>Thu, 26 Mar 2020 13:00:21 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-8833|2024-09-16T20:53:27.660Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-8833</link>
      <description>Time-of-check Time-of-use Race Condition vulnerability on crash report ownership change in Apport allows for a possible privilege escalation opportunity. If fs.protected_symlinks is disabled, this can be exploited between the os.open and os.chown calls when the Apport cron script clears out crash files of size 0. A symlink with the same name as the deleted file can then be created upon which chown will be called, changing the file owner to root. Fixed in versions 2.20.1-0ubuntu2.23, 2.20.9-0ubuntu7.14, 2.20.11-0ubuntu8.8 and 2.20.11-0ubuntu22.</description>
      <guid isPermaLink="false">CVE-2020-8833|2024-09-16T20:53:27.660Z</guid>
      <pubDate>Wed, 22 Apr 2020 21:15:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-32555|2024-09-16T20:47:23.455Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-32555</link>
      <description>It was discovered that read_file() in apport/hookutils.py would follow symbolic links or open FIFOs. When this function is used by the xorg-hwe-18.04 package apport hooks, it could expose private data to other local users.</description>
      <guid isPermaLink="false">CVE-2021-32555|2024-09-16T20:47:23.455Z</guid>
      <pubDate>Sat, 12 Jun 2021 03:40:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-27349|2024-09-16T18:50:26.180Z -- canonical -- aptdaemon
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-27349</link>
      <description>Aptdaemon performed policykit checks after interacting with potentially untrusted files with elevated privileges. This affected versions prior to 1.1.1+bzr982-0ubuntu34.1, 1.1.1+bzr982-0ubuntu32.3, 1.1.1+bzr982-0ubuntu19.5, 1.1.1+bzr982-0ubuntu14.5.</description>
      <guid isPermaLink="false">CVE-2020-27349|2024-09-16T18:50:26.180Z</guid>
      <pubDate>Wed, 09 Dec 2020 03:35:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-11483|2024-09-16T18:17:50.401Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-11483</link>
      <description>Sander Bos discovered Apport mishandled crash dumps originating from containers. This could be used by a local attacker to generate a crash report for a privileged process that is readable by an unprivileged user.</description>
      <guid isPermaLink="false">CVE-2019-11483|2024-09-16T18:17:50.401Z</guid>
      <pubDate>Sat, 08 Feb 2020 04:50:22 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-08-02T04:46:52.414Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-08-02T04:46:52.414Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1724|2024-08-01T18:48:21.887Z -- canonical -- snap</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1724</link>
      <description>In snapd versions prior to 2.62, when using AppArmor for enforcement of 
sandbox permissions, snapd failed to restrict writes to the $HOME/bin
path. In Ubuntu, when this path exists, it is automatically added to
the users PATH. An attacker who could convince a user to install a
malicious snap which used the 'home' plug could use this vulnerability
to install arbitrary scripts into the users PATH which may then be run
by the user outside of the expected snap sandbox and hence allow them
to escape confinement.</description>
      <guid isPermaLink="false">CVE-2024-1724|2024-08-01T18:48:21.887Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:05:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-07-26T13:27:49.253Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-07-26T13:27:49.253Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-07-25T19:28:05.480Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-07-25T19:28:05.480Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-07-25T19:39:41.050Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-07-25T19:39:41.050Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1724|2024-07-25T19:28:23.939Z -- canonical -- snap</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1724</link>
      <description>In snapd versions prior to 2.62, when using AppArmor for enforcement of 
sandbox permissions, snapd failed to restrict writes to the $HOME/bin
path. In Ubuntu, when this path exists, it is automatically added to
the users PATH. An attacker who could convince a user to install a
malicious snap which used the 'home' plug could use this vulnerability
to install arbitrary scripts into the users PATH which may then be run
by the user outside of the expected snap sandbox and hence allow them
to escape confinement.</description>
      <guid isPermaLink="false">CVE-2024-1724|2024-07-25T19:28:23.939Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:05:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-07-22T14:20:08.920Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-07-22T14:20:08.920Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-07-25T20:21:43.831Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-07-25T20:21:43.831Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-07-30T16:08:06.843Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-07-30T16:08:06.843Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-08-02T01:03:51.700Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-08-02T01:03:51.700Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-08-02T01:03:51.709Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-08-02T01:03:51.709Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
  </channel>
</rss>
