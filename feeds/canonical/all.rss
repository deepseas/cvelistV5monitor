<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Canonical -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/canonical/all.rss</link>
    <description>The latest CVEs for Canonical -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 16 Sep 2024 18:25:07 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-32557|2024-09-16T17:53:05.508Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-32557</link>
      <description>It was discovered that the process_report() function in data/whoopsie-upload-all allowed arbitrary file writes via symlinks.</description>
      <guid isPermaLink="false">CVE-2021-32557|2024-09-16T17:53:05.508Z</guid>
      <pubDate>Sat, 12 Jun 2021 03:40:43 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2012-0955|2024-09-16T17:14:04.258Z -- canonical -- software-properties
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2012-0955</link>
      <description>software-properties was vulnerable to a person-in-the-middle attack due to incorrect TLS certificate validation in softwareproperties/ppa.py. software-properties didn't check TLS certificates under python2 and only checked certificates under python3 if a valid certificate bundle was provided. Fixed in software-properties version 0.92.</description>
      <guid isPermaLink="false">CVE-2012-0955|2024-09-16T17:14:04.258Z</guid>
      <pubDate>Wed, 02 Dec 2020 00:50:15 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-11485|2024-09-16T16:57:41.110Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-11485</link>
      <description>Sander Bos discovered Apport's lock file was in a world-writable directory which allowed all users to prevent crash handling.</description>
      <guid isPermaLink="false">CVE-2019-11485|2024-09-16T16:57:41.110Z</guid>
      <pubDate>Sat, 08 Feb 2020 04:50:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2014-1420|2024-09-16T17:08:12.605Z -- canonical -- ubuntu-ui-toolkit
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2014-1420</link>
      <description>On desktop, Ubuntu UI Toolkit's StateSaver would serialise data on tmp/ files which an attacker could use to expose potentially sensitive data. StateSaver would also open files without the O_EXCL flag. An attacker could exploit this to launch a symlink attack, though this is partially mitigated by symlink and hardlink restrictions in Ubuntu. Fixed in 1.1.1188+14.10.20140813.4-0ubuntu1.</description>
      <guid isPermaLink="false">CVE-2014-1420|2024-09-16T17:08:12.605Z</guid>
      <pubDate>Thu, 10 Sep 2020 23:55:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-27348|2024-09-16T17:14:15.768Z -- canonical -- snapcraft
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-27348</link>
      <description>In some conditions, a snap package built by snapcraft includes the current directory in LD_LIBRARY_PATH, allowing a malicious snap to gain code execution within the context of another snap if both plug the home interface or similar. This issue affects snapcraft versions prior to 4.4.4, prior to 2.43.1+16.04.1, and prior to 2.43.1+18.04.1.</description>
      <guid isPermaLink="false">CVE-2020-27348|2024-09-16T17:14:15.768Z</guid>
      <pubDate>Fri, 04 Dec 2020 02:30:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-16128|2024-09-16T16:24:15.489Z -- canonical -- aptdaemon
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-16128</link>
      <description>The aptdaemon DBus interface disclosed file existence disclosure by setting Terminal/DebconfSocket properties, aka GHSL-2020-192 and GHSL-2020-196. This affected versions prior to 1.1.1+bzr982-0ubuntu34.1, 1.1.1+bzr982-0ubuntu32.3, 1.1.1+bzr982-0ubuntu19.5, 1.1.1+bzr982-0ubuntu14.5.</description>
      <guid isPermaLink="false">CVE-2020-16128|2024-09-16T16:24:15.489Z</guid>
      <pubDate>Wed, 09 Dec 2020 03:35:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-15702|2024-09-16T17:28:12.244Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15702</link>
      <description>TOCTOU Race Condition vulnerability in apport allows a local attacker to escalate privileges and execute arbitrary code. An attacker may exit the crashed process and exploit PID recycling to spawn a root process with the same PID as the crashed process, which can then be used to escalate privileges. Fixed in 2.20.1-0ubuntu2.24, 2.20.9 versions prior to 2.20.9-0ubuntu7.16 and 2.20.11 versions prior to 2.20.11-0ubuntu27.6. Was ZDI-CAN-11234.</description>
      <guid isPermaLink="false">CVE-2020-15702|2024-09-16T17:28:12.244Z</guid>
      <pubDate>Thu, 06 Aug 2020 22:50:22 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2013-1053|2024-09-16T16:23:22.885Z -- canonical -- remote-login-service
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2013-1053</link>
      <description>In crypt.c of remote-login-service, the cryptographic algorithm used to cache usernames and passwords is insecure. An attacker could use this vulnerability to recover usernames and passwords from the file. This issue affects version 1.0.0-0ubuntu3 and prior versions.</description>
      <guid isPermaLink="false">CVE-2013-1053|2024-09-16T16:23:22.885Z</guid>
      <pubDate>Wed, 13 Jan 2021 23:00:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-08-02T01:03:51.709Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-08-02T01:03:51.709Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-08-02T01:03:51.700Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-08-02T01:03:51.700Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-07-30T16:08:06.843Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-07-30T16:08:06.843Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-07-25T20:21:43.831Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-07-25T20:21:43.831Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-07-22T14:20:08.920Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-07-22T14:20:08.920Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1724|2024-07-25T19:28:23.939Z -- canonical -- snap</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1724</link>
      <description>In snapd versions prior to 2.62, when using AppArmor for enforcement of 
sandbox permissions, snapd failed to restrict writes to the $HOME/bin
path. In Ubuntu, when this path exists, it is automatically added to
the users PATH. An attacker who could convince a user to install a
malicious snap which used the 'home' plug could use this vulnerability
to install arbitrary scripts into the users PATH which may then be run
by the user outside of the expected snap sandbox and hence allow them
to escape confinement.</description>
      <guid isPermaLink="false">CVE-2024-1724|2024-07-25T19:28:23.939Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:05:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-07-25T19:39:41.050Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-07-25T19:39:41.050Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-07-25T19:28:05.480Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-07-25T19:28:05.480Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-07-26T13:27:49.253Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-07-26T13:27:49.253Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1724|2024-08-01T18:48:21.887Z -- canonical -- snap</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1724</link>
      <description>In snapd versions prior to 2.62, when using AppArmor for enforcement of 
sandbox permissions, snapd failed to restrict writes to the $HOME/bin
path. In Ubuntu, when this path exists, it is automatically added to
the users PATH. An attacker who could convince a user to install a
malicious snap which used the 'home' plug could use this vulnerability
to install arbitrary scripts into the users PATH which may then be run
by the user outside of the expected snap sandbox and hence allow them
to escape confinement.</description>
      <guid isPermaLink="false">CVE-2024-1724|2024-08-01T18:48:21.887Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:05:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-08-02T04:46:52.414Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-08-02T04:46:52.414Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
  </channel>
</rss>
