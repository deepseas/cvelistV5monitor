<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Canonical -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/canonical/all.rss</link>
    <description>The latest CVEs for Canonical -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 17 Sep 2024 22:22:53 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-3626|2024-09-17T03:23:37.922Z -- canonical -- multipass
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-3626</link>
      <description>The Windows version of Multipass before 1.7.0 allowed any local process to connect to the localhost TCP control socket to perform mounts from the operating system to a guest, allowing for privilege escalation.</description>
      <guid isPermaLink="false">CVE-2021-3626|2024-09-17T03:23:37.922Z</guid>
      <pubDate>Fri, 01 Oct 2021 02:35:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-11934|2024-09-17T04:04:04.329Z -- canonical -- snapd
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-11934</link>
      <description>It was discovered that snapctl user-open allowed altering the $XDG_DATA_DIRS environment variable when calling the system xdg-open. OpenURL() in usersession/userd/launcher.go would alter $XDG_DATA_DIRS to append a path to a directory controlled by the calling snap. A malicious snap could exploit this to bypass intended access restrictions to control how the host system xdg-open script opens the URL and, for example, execute a script shipped with the snap without confinement. This issue did not affect Ubuntu Core systems. Fixed in snapd versions 2.45.1ubuntu0.2, 2.45.1+18.04.2 and 2.45.1+20.04.2.</description>
      <guid isPermaLink="false">CVE-2020-11934|2024-09-17T04:04:04.329Z</guid>
      <pubDate>Wed, 29 Jul 2020 16:25:26 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-11931|2024-09-17T00:41:25.129Z -- canonical -- pulseaudio
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-11931</link>
      <description>An Ubuntu-specific modification to Pulseaudio to provide security mediation for Snap-packaged applications was found to have a bypass of intended access restriction for snaps which plugs any of pulseaudio, audio-playback or audio-record via unloading the pulseaudio snap policy module. This issue affects: pulseaudio 1:8.0 versions prior to 1:8.0-0ubuntu3.12; 1:11.1 versions prior to 1:11.1-1ubuntu7.7; 1:13.0 versions prior to 1:13.0-1ubuntu1.2; 1:13.99.1 versions prior to 1:13.99.1-1ubuntu3.2;</description>
      <guid isPermaLink="false">CVE-2020-11931|2024-09-17T00:41:25.129Z</guid>
      <pubDate>Fri, 15 May 2020 03:25:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-11937|2024-09-17T04:15:20.926Z -- canonical -- whoopsie
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-11937</link>
      <description>In whoopsie, parse_report() from whoopsie.c allows a local attacker to cause a denial of service via a crafted file. The DoS is caused by resource exhaustion due to a memory leak. Fixed in 0.2.52.5ubuntu0.5, 0.2.62ubuntu0.5 and 0.2.69ubuntu0.1.</description>
      <guid isPermaLink="false">CVE-2020-11937|2024-09-17T04:15:20.926Z</guid>
      <pubDate>Thu, 06 Aug 2020 22:50:21 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-11933|2024-09-17T00:40:28.129Z -- canonical -- snapd
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-11933</link>
      <description>cloud-init as managed by snapd on Ubuntu Core 16 and Ubuntu Core 18 devices was run without restrictions on every boot, which a physical attacker could exploit by crafting cloud-init user-data/meta-data via external media to perform arbitrary changes on the device to bypass intended security mechanisms such as full disk encryption. This issue did not affect traditional Ubuntu systems. Fixed in snapd version 2.45.2, revision 8539 and core version 2.45.2, revision 9659.</description>
      <guid isPermaLink="false">CVE-2020-11933|2024-09-17T00:40:28.129Z</guid>
      <pubDate>Wed, 29 Jul 2020 16:25:25 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-3710|2024-09-17T01:41:25.529Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-3710</link>
      <description>An information disclosure via path traversal was discovered in apport/hookutils.py function read_file(). This issue affects: apport 2.14.1 versions prior to 2.14.1-0ubuntu3.29+esm8; 2.20.1 versions prior to 2.20.1-0ubuntu2.30+esm2; 2.20.9 versions prior to 2.20.9-0ubuntu7.26; 2.20.11 versions prior to 2.20.11-0ubuntu27.20; 2.20.11 versions prior to 2.20.11-0ubuntu65.3;</description>
      <guid isPermaLink="false">CVE-2021-3710|2024-09-17T01:41:25.529Z</guid>
      <pubDate>Fri, 01 Oct 2021 02:35:22 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-11484|2024-09-17T01:50:56.647Z -- canonical -- whoopsie
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-11484</link>
      <description>Kevin Backhouse discovered an integer overflow in bson_ensure_space, as used in whoopsie.</description>
      <guid isPermaLink="false">CVE-2019-11484|2024-09-17T01:50:56.647Z</guid>
      <pubDate>Sat, 08 Feb 2020 04:50:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-3747|2024-09-17T04:19:16.521Z -- canonical -- multipass
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-3747</link>
      <description>The MacOS version of Multipass, version 1.7.0, fixed in 1.7.2, accidentally installed the application directory with incorrect owner.</description>
      <guid isPermaLink="false">CVE-2021-3747|2024-09-17T04:19:16.521Z</guid>
      <pubDate>Fri, 01 Oct 2021 02:35:24 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-32552|2024-09-17T02:37:33.692Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-32552</link>
      <description>It was discovered that read_file() in apport/hookutils.py would follow symbolic links or open FIFOs. When this function is used by the openjdk-16 package apport hooks, it could expose private data to other local users.</description>
      <guid isPermaLink="false">CVE-2021-32552|2024-09-17T02:37:33.692Z</guid>
      <pubDate>Sat, 12 Jun 2021 03:40:39 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-7303|2024-09-17T01:46:16.086Z -- canonical -- snapd
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-7303</link>
      <description>A vulnerability in the seccomp filters of Canonical snapd before version 2.37.4 allows a strict mode snap to insert characters into a terminal on a 64-bit host. The seccomp rules were generated to match 64-bit ioctl(2) commands on a 64-bit platform; however, the Linux kernel only uses the lower 32 bits to determine which ioctl(2) commands to run. This issue affects: Canonical snapd versions prior to 2.37.4.</description>
      <guid isPermaLink="false">CVE-2019-7303|2024-09-17T01:46:16.086Z</guid>
      <pubDate>Tue, 23 Apr 2019 15:57:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2014-1422|2024-09-17T03:18:34.686Z -- canonical -- trust-store%20%28ubuntu%29
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2014-1422</link>
      <description>In Ubuntu's trust-store, if a user revokes location access from an application, the location is still available to the application because the application will honour incorrect, cached permissions. This is because the cache was not ordered by creation time by the Select struct in src/core/trust/impl/sqlite3/store.cpp. Fixed in trust-store (Ubuntu) version 1.1.0+15.04.20150123-0ubuntu1 and trust-store (Ubuntu RTM) version 1.1.0+15.04.20150123~rtm-0ubuntu1.</description>
      <guid isPermaLink="false">CVE-2014-1422|2024-09-17T03:18:34.686Z</guid>
      <pubDate>Wed, 22 Jul 2020 18:05:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-15704|2024-09-17T00:35:29.021Z -- canonical -- ppp
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15704</link>
      <description>The modprobe child process in the ./debian/patches/load_ppp_generic_if_needed patch file incorrectly handled module loading. A local non-root attacker could exploit the MODPROBE_OPTIONS environment variable to read arbitrary root files. Fixed in 2.4.5-5ubuntu1.4, 2.4.5-5.1ubuntu2.3+esm2, 2.4.7-1+2ubuntu1.16.04.3, 2.4.7-2+2ubuntu1.3, 2.4.7-2+4.1ubuntu5.1, 2.4.7-2+4.1ubuntu6. Was ZDI-CAN-11504.</description>
      <guid isPermaLink="false">CVE-2020-15704|2024-09-17T00:35:29.021Z</guid>
      <pubDate>Mon, 31 Aug 2020 23:15:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-27350|2024-09-17T04:29:18.208Z -- canonical -- apt
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-27350</link>
      <description>APT had several integer overflows and underflows while parsing .deb packages, aka GHSL-2020-168 GHSL-2020-169, in files apt-pkg/contrib/extracttar.cc, apt-pkg/deb/debfile.cc, and apt-pkg/contrib/arfile.cc. This issue affects: apt 1.2.32ubuntu0 versions prior to 1.2.32ubuntu0.2; 1.6.12ubuntu0 versions prior to 1.6.12ubuntu0.2; 2.0.2ubuntu0 versions prior to 2.0.2ubuntu0.2; 2.1.10ubuntu0 versions prior to 2.1.10ubuntu0.1;</description>
      <guid isPermaLink="false">CVE-2020-27350|2024-09-17T04:29:18.208Z</guid>
      <pubDate>Thu, 10 Dec 2020 04:05:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-15709|2024-09-17T01:51:18.150Z -- canonical -- add-apt-repository
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15709</link>
      <description>Versions of add-apt-repository before 0.98.9.2, 0.96.24.32.14, 0.96.20.10, and 0.92.37.8ubuntu0.1~esm1, printed a PPA (personal package archive) description to the terminal as-is, which allowed PPA owners to provide ANSI terminal escapes to modify terminal contents in unexpected ways.</description>
      <guid isPermaLink="false">CVE-2020-15709|2024-09-17T01:51:18.150Z</guid>
      <pubDate>Sat, 05 Sep 2020 03:30:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-7305|2024-09-17T03:12:40.148Z -- canonical -- extplorer
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-7305</link>
      <description>Information Exposure vulnerability in eXtplorer makes the /usr/ and /etc/extplorer/ system directories world-accessible over HTTP. Introduced in the Makefile patch file debian/patches/debian-changes-2.1.0b6+dfsg-1 or debian/patches/adds-a-makefile.patch, this can lead to data leakage, information disclosure and potentially remote code execution on the web server. This issue affects all versions of eXtplorer in Ubuntu and Debian</description>
      <guid isPermaLink="false">CVE-2019-7305|2024-09-17T03:12:40.148Z</guid>
      <pubDate>Thu, 09 Apr 2020 23:50:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-15710|2024-09-17T04:04:44.247Z -- canonical -- pulseaudio
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-15710</link>
      <description>Potential double free in Bluez 5 module of PulseAudio could allow a local attacker to leak memory or crash the program. The modargs variable may be freed twice in the fail condition in src/modules/bluetooth/module-bluez5-device.c and src/modules/bluetooth/module-bluez5-device.c. Fixed in 1:8.0-0ubuntu3.14.</description>
      <guid isPermaLink="false">CVE-2020-15710|2024-09-17T04:04:44.247Z</guid>
      <pubDate>Thu, 19 Nov 2020 02:30:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-32547|2024-09-17T03:18:22.707Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-32547</link>
      <description>It was discovered that read_file() in apport/hookutils.py would follow symbolic links or open FIFOs. When this function is used by the openjdk-lts package apport hooks, it could expose private data to other local users.</description>
      <guid isPermaLink="false">CVE-2021-32547|2024-09-17T03:18:22.707Z</guid>
      <pubDate>Sat, 12 Jun 2021 03:40:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-7306|2024-09-17T02:42:21.021Z -- canonical -- byobu
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-7306</link>
      <description>Byobu Apport hook may disclose sensitive information since it automatically uploads the local user's .screenrc which may contain private hostnames, usernames and passwords. This issue affects: byobu</description>
      <guid isPermaLink="false">CVE-2019-7306|2024-09-17T02:42:21.021Z</guid>
      <pubDate>Fri, 17 Apr 2020 01:45:14 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-25682|2024-09-17T00:46:19.717Z -- canonical -- apport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-25682</link>
      <description>It was discovered that the get_pid_info() function in data/apport did not properly parse the /proc/pid/status file from the kernel.</description>
      <guid isPermaLink="false">CVE-2021-25682|2024-09-17T00:46:19.717Z</guid>
      <pubDate>Fri, 11 Jun 2021 02:20:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-08-02T01:03:51.709Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-08-02T01:03:51.709Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-08-02T01:03:51.700Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-08-02T01:03:51.700Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-07-30T16:08:06.843Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-07-30T16:08:06.843Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-07-25T20:21:43.831Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-07-25T20:21:43.831Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-07-22T14:20:08.920Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-07-22T14:20:08.920Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1724|2024-07-25T19:28:23.939Z -- canonical -- snap</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1724</link>
      <description>In snapd versions prior to 2.62, when using AppArmor for enforcement of 
sandbox permissions, snapd failed to restrict writes to the $HOME/bin
path. In Ubuntu, when this path exists, it is automatically added to
the users PATH. An attacker who could convince a user to install a
malicious snap which used the 'home' plug could use this vulnerability
to install arbitrary scripts into the users PATH which may then be run
by the user outside of the expected snap sandbox and hence allow them
to escape confinement.</description>
      <guid isPermaLink="false">CVE-2024-1724|2024-07-25T19:28:23.939Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:05:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-07-25T19:39:41.050Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-07-25T19:39:41.050Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-07-25T19:28:05.480Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-07-25T19:28:05.480Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-07-26T13:27:49.253Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-07-26T13:27:49.253Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-1724|2024-08-01T18:48:21.887Z -- canonical -- snap</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-1724</link>
      <description>In snapd versions prior to 2.62, when using AppArmor for enforcement of 
sandbox permissions, snapd failed to restrict writes to the $HOME/bin
path. In Ubuntu, when this path exists, it is automatically added to
the users PATH. An attacker who could convince a user to install a
malicious snap which used the 'home' plug could use this vulnerability
to install arbitrary scripts into the users PATH which may then be run
by the user outside of the expected snap sandbox and hence allow them
to escape confinement.</description>
      <guid isPermaLink="false">CVE-2024-1724|2024-08-01T18:48:21.887Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:05:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41129|2024-08-02T04:46:52.414Z -- canonical -- operator</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41129</link>
      <description>The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.</description>
      <guid isPermaLink="false">CVE-2024-41129|2024-08-02T04:46:52.414Z</guid>
      <pubDate>Mon, 22 Jul 2024 14:20:08 +0000</pubDate>
    </item>
  </channel>
</rss>
