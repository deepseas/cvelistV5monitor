<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Canonical -- snapd</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/canonical/snapd.rss</link>
    <description>The latest CVEs for Canonical -- snapd</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 13:23:07 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-11934|2024-08-04T11:42:00.558Z -- canonical -- snapd
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-11934</link>
      <description>It was discovered that snapctl user-open allowed altering the $XDG_DATA_DIRS environment variable when calling the system xdg-open. OpenURL() in usersession/userd/launcher.go would alter $XDG_DATA_DIRS to append a path to a directory controlled by the calling snap. A malicious snap could exploit this to bypass intended access restrictions to control how the host system xdg-open script opens the URL and, for example, execute a script shipped with the snap without confinement. This issue did not affect Ubuntu Core systems. Fixed in snapd versions 2.45.1ubuntu0.2, 2.45.1+18.04.2 and 2.45.1+20.04.2.</description>
      <guid isPermaLink="false">CVE-2020-11934|2024-08-04T11:42:00.558Z</guid>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-11933|2024-08-04T11:42:00.821Z -- canonical -- snapd
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-11933</link>
      <description>cloud-init as managed by snapd on Ubuntu Core 16 and Ubuntu Core 18 devices was run without restrictions on every boot, which a physical attacker could exploit by crafting cloud-init user-data/meta-data via external media to perform arbitrary changes on the device to bypass intended security mechanisms such as full disk encryption. This issue did not affect traditional Ubuntu systems. Fixed in snapd version 2.45.2, revision 8539 and core version 2.45.2, revision 9659.</description>
      <guid isPermaLink="false">CVE-2020-11933|2024-08-04T11:42:00.821Z</guid>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-08-02T01:03:51.709Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-08-02T01:03:51.709Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-08-02T01:03:51.700Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-08-02T01:03:51.700Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-07-25T20:21:43.831Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-07-25T20:21:43.831Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-07-25T19:39:41.050Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-07-25T19:39:41.050Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29068|2024-07-25T19:28:05.480Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29068</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the file
type when extracting a snap. The snap format is a squashfs file-system
image and so can contain files that are non-regular files (such as pipes 
or sockets etc). Various file entries within the snap squashfs image
(such as icons etc) are directly read by snapd when it is extracted. An 
attacker who could convince a user to install a malicious snap which
contained non-regular files at these paths could then cause snapd to block
indefinitely trying to read from such files and cause a denial of service.</description>
      <guid isPermaLink="false">CVE-2024-29068|2024-07-25T19:28:05.480Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:28:05 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29069|2024-07-26T13:27:49.253Z -- canonical -- snapd</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29069</link>
      <description>In snapd versions prior to 2.62, snapd failed to properly check the
destination of symbolic links when extracting a snap. The snap format 
is a squashfs file-system image and so can contain symbolic links and
other file types. Various file entries within the snap squashfs image
(such as icons and desktop files etc) are directly read by snapd when
it is extracted. An attacker who could convince a user to install a
malicious snap which contained symbolic links at these paths could then 
cause snapd to write out the contents of the symbolic link destination
into a world-readable directory. This in-turn could allow an unprivileged
user to gain access to privileged information.</description>
      <guid isPermaLink="false">CVE-2024-29069|2024-07-26T13:27:49.253Z</guid>
      <pubDate>Thu, 25 Jul 2024 19:39:41 +0000</pubDate>
    </item>
  </channel>
</rss>
