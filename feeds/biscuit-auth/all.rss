<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for biscuit-auth -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/biscuit-auth/all.rss</link>
    <description>The latest CVEs for biscuit-auth -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 13:22:35 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-31053|2024-08-03T07:03:40.292Z -- biscuit-auth -- biscuit
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-31053</link>
      <description>Biscuit is an authentication and authorization token for microservices architectures. The Biscuit specification version 1 contains a vulnerable algorithm that allows malicious actors to forge valid Î“-signatures. Such an attack would allow an attacker to create a token with any access level. The version 2 of the specification mandates a different algorithm than gamma signatures and as such is not affected by this vulnerability. The Biscuit implementations in Rust, Haskell, Go, Java and Javascript all have published versions following the v2 specification. There are no known workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2022-31053|2024-08-03T07:03:40.292Z</guid>
      <pubDate>Mon, 13 Jun 2022 19:35:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41949|2024-08-02T14:49:52.914Z -- biscuit-auth -- biscuit-rust</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41949</link>
      <description>biscuit-rust is the Rust implementation of Biscuit, an authentication and authorization token for microservices architectures. Third-party blocks can be generated without transferring the whole token to the third-party authority. Instead, a ThirdPartyBlock request can be sent, providing only the necessary info to generate a third-party block and to sign it, which includes the public key of the previous block (used in the signature) and the public keys part of the token symbol table (for public key interning in datalog expressions). A third-part block request forged by a malicious user can trick the third-party authority into generating datalog trusting the wrong keypair.</description>
      <guid isPermaLink="false">CVE-2024-41949|2024-08-02T14:49:52.914Z</guid>
      <pubDate>Thu, 01 Aug 2024 22:03:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41949|2024-08-01T22:03:11.198Z -- biscuit-auth -- biscuit-rust</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41949</link>
      <description>biscuit-rust is the Rust implementation of Biscuit, an authentication and authorization token for microservices architectures. Third-party blocks can be generated without transferring the whole token to the third-party authority. Instead, a ThirdPartyBlock request can be sent, providing only the necessary info to generate a third-party block and to sign it, which includes the public key of the previous block (used in the signature) and the public keys part of the token symbol table (for public key interning in datalog expressions). A third-part block request forged by a malicious user can trick the third-party authority into generating datalog trusting the wrong keypair.</description>
      <guid isPermaLink="false">CVE-2024-41949|2024-08-01T22:03:11.198Z</guid>
      <pubDate>Thu, 01 Aug 2024 22:03:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-41948|2024-08-01T22:03:15.788Z -- biscuit-auth -- biscuit-java</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-41948</link>
      <description>biscuit-java is the java implementation of Biscuit, an authentication and authorization token for microservices architectures. Third-party blocks can be generated without transferring the whole token to the third-party authority. Instead, a ThirdPartyBlock request can be sent, providing only the necessary info to generate a third-party block and to sign it, which includes the public key of the previous block (used in the signature) and the public keys part of the token symbol table (for public key interning in datalog expressions). A third-part block request forged by a malicious user can trick the third-party authority into generating datalog trusting the wrong keypair. This vulnerability is fixed in 4.0.0.</description>
      <guid isPermaLink="false">CVE-2024-41948|2024-08-01T22:03:15.788Z</guid>
      <pubDate>Thu, 01 Aug 2024 22:03:15 +0000</pubDate>
    </item>
  </channel>
</rss>
