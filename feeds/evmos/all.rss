<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>CVE Feed for evmos -- all</title><link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/evmos/all.rss</link><description>The latest CVEs for evmos -- all</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><lastBuildDate>Fri, 24 May 2024 21:24:13 +0000</lastBuildDate><ttl>60</ttl><item><title>CVE-2024-32644|2024-04-19T14:53:44.423Z -- evmos -- evmos
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32644</link><description>Evmos is a scalable, high-throughput Proof-of-Stake EVM blockchain that is fully compatible and interoperable with Ethereum. Prior to 17.0.0, there is a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the `stateDB.Commit()` method. When we call this method, we iterate though all the `dirtyStorage` and, **if and only if** it is different than the `originStorage`, we set the new state. Setting the new state means we update the Cosmos SDK KVStore.  If a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is **critical** since this could lead to drain of funds through creative SC interactions.  The issue has been patched in versions &gt;=V17.0.0.</description><guid isPermaLink="false">CVE-2024-32644|2024-04-19T14:53:44.423Z</guid><pubDate>Fri, 19 Apr 2024 14:53:44 +0000</pubDate></item></channel></rss>