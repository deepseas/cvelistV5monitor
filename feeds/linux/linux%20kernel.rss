<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Linux -- Linux kernel</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/linux/linux%20kernel.rss</link>
    <description>The latest CVEs for Linux -- Linux kernel</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 16 Sep 2024 23:21:30 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-3490|2024-09-16T22:29:57.625Z -- linux -- linux%20kernel
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-3490</link>
      <description>The eBPF ALU32 bounds tracking for bitwise ops (AND, OR and XOR) in the Linux kernel did not properly update 32-bit bounds, which could be turned into out of bounds reads and writes in the Linux kernel and therefore, arbitrary code execution. This issue was fixed via commit 049c4e13714e ("bpf: Fix alu32 const subreg bound tracking on bitwise operations") (v5.13-rc4) and backported to the stable kernels in v5.12.4, v5.11.21, and v5.10.37. The AND/OR issues were introduced by commit 3f50f132d840 ("bpf: Verifier, do explicit ALU32 bounds tracking") (5.7-rc1) and the XOR variant was introduced by 2921c90d4718 ("bpf:Fix a verifier failure with xor") ( 5.10-rc1).</description>
      <guid isPermaLink="false">CVE-2021-3490|2024-09-16T22:29:57.625Z</guid>
      <pubDate>Fri, 04 Jun 2021 01:40:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-3491|2024-09-16T22:09:25.883Z -- linux -- linux%20kernel
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-3491</link>
      <description>The io_uring subsystem in the Linux kernel allowed the MAX_RW_COUNT limit to be bypassed in the PROVIDE_BUFFERS operation, which led to negative values being usedin mem_rw when reading /proc/&lt;PID&gt;/mem. This could be used to create a heap overflow leading to arbitrary code execution in the kernel. It was addressed via commit d1f82808877b ("io_uring: truncate lengths larger than MAX_RW_COUNT on provide buffers") (v5.13-rc1) and backported to the stable kernels in v5.12.4, v5.11.21, and v5.10.37. It was introduced in ddf0322db79c ("io_uring: add IORING_OP_PROVIDE_BUFFERS") (v5.7-rc1).</description>
      <guid isPermaLink="false">CVE-2021-3491|2024-09-16T22:09:25.883Z</guid>
      <pubDate>Fri, 04 Jun 2021 01:40:20 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-3489|2024-09-16T20:21:42.116Z -- linux -- linux%20kernel
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-3489</link>
      <description>The eBPF RINGBUF bpf_ringbuf_reserve() function in the Linux kernel did not check that the allocated size was smaller than the ringbuf size, allowing an attacker to perform out-of-bounds writes within the kernel and therefore, arbitrary code execution. This issue was fixed via commit 4b81ccebaeee ("bpf, ringbuf: Deny reserve of buffers larger than ringbuf") (v5.13-rc4) and backported to the stable kernels in v5.12.4, v5.11.21, and v5.10.37. It was introduced via 457f44363a88 ("bpf: Implement BPF ring buffer and verifier support for it") (v5.8-rc1).</description>
      <guid isPermaLink="false">CVE-2021-3489|2024-09-16T20:21:42.116Z</guid>
      <pubDate>Fri, 04 Jun 2021 01:40:19 +0000</pubDate>
    </item>
  </channel>
</rss>
