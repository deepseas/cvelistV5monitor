<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for Linux -- Linux</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/linux/linux.rss</link>
    <description>The latest CVEs for Linux -- Linux</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Wed, 05 Jun 2024 16:23:59 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-48655|2024-06-05T13:55:57.618Z -- linux -- linux</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-48655</link>
      <description>In the Linux kernel, the following vulnerability has been resolved:

firmware: arm_scmi: Harden accesses to the reset domains

Accessing reset domains descriptors by the index upon the SCMI drivers
requests through the SCMI reset operations interface can potentially
lead to out-of-bound violations if the SCMI driver misbehave.

Add an internal consistency check before any such domains descriptors
accesses.</description>
      <guid isPermaLink="false">CVE-2022-48655|2024-06-05T13:55:57.618Z</guid>
      <pubDate>Sun, 28 Apr 2024 13:01:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35875|2024-05-29T05:30:31.974Z -- linux -- linux</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35875</link>
      <description>In the Linux kernel, the following vulnerability has been resolved:

x86/coco: Require seeding RNG with RDRAND on CoCo systems

There are few uses of CoCo that don't rely on working cryptography and
hence a working RNG. Unfortunately, the CoCo threat model means that the
VM host cannot be trusted and may actively work against guests to
extract secrets or manipulate computation. Since a malicious host can
modify or observe nearly all inputs to guests, the only remaining source
of entropy for CoCo guests is RDRAND.

If RDRAND is broken -- due to CPU hardware fault -- the RNG as a whole
is meant to gracefully continue on gathering entropy from other sources,
but since there aren't other sources on CoCo, this is catastrophic.
This is mostly a concern at boot time when initially seeding the RNG, as
after that the consequences of a broken RDRAND are much more
theoretical.

So, try at boot to seed the RNG using 256 bits of RDRAND output. If this
fails, panic(). This will also trigger if the system is booted without
RDRAND, as RDRAND is essential for a safe CoCo boot.

Add this deliberately to be "just a CoCo x86 driver feature" and not
part of the RNG itself. Many device drivers and platforms have some
desire to contribute something to the RNG, and add_device_randomness()
is specifically meant for this purpose.

Any driver can call it with seed data of any quality, or even garbage
quality, and it can only possibly make the quality of the RNG better or
have no effect, but can never make it worse.

Rather than trying to build something into the core of the RNG, consider
the particular CoCo issue just a CoCo issue, and therefore separate it
all out into driver (well, arch/platform) code.

  [ bp: Massage commit message. ]</description>
      <guid isPermaLink="false">CVE-2024-35875|2024-05-29T05:30:31.974Z</guid>
      <pubDate>Sun, 19 May 2024 08:34:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-48655|2024-06-05T04:01:14.185Z -- linux -- linux</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-48655</link>
      <description>In the Linux kernel, the following vulnerability has been resolved:

firmware: arm_scmi: Harden accesses to the reset domains

Accessing reset domains descriptors by the index upon the SCMI drivers
requests through the SCMI reset operations interface can potentially
lead to out-of-bound violations if the SCMI driver misbehave.

Add an internal consistency check before any such domains descriptors
accesses.</description>
      <guid isPermaLink="false">CVE-2022-48655|2024-06-05T04:01:14.185Z</guid>
      <pubDate>Sun, 28 Apr 2024 13:01:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-36913|2024-06-05T14:41:56.102Z -- linux -- linux</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-36913</link>
      <description>In the Linux kernel, the following vulnerability has been resolved:

Drivers: hv: vmbus: Leak pages if set_memory_encrypted() fails

In CoCo VMs it is possible for the untrusted host to cause
set_memory_encrypted() or set_memory_decrypted() to fail such that an
error is returned and the resulting memory is shared. Callers need to
take care to handle these errors to avoid returning decrypted (shared)
memory to the page allocator, which could lead to functional or security
issues.

VMBus code could free decrypted pages if set_memory_encrypted()/decrypted()
fails. Leak the pages if this happens.</description>
      <guid isPermaLink="false">CVE-2024-36913|2024-06-05T14:41:56.102Z</guid>
      <pubDate>Thu, 30 May 2024 15:29:11 +0000</pubDate>
    </item>
  </channel>
</rss>
