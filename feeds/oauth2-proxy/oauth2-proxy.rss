<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for oauth2-proxy -- oauth2-proxy</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/oauth2-proxy/oauth2-proxy.rss</link>
    <description>The latest CVEs for oauth2-proxy -- oauth2-proxy</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 23:23:08 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-21291|2024-08-03T18:09:15.152Z -- oauth2-proxy -- oauth2-proxy
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-21291</link>
      <description>OAuth2 Proxy is an open-source reverse proxy and static file server that provides authentication using Providers (Google, GitHub, and others) to validate accounts by email, domain or group. In OAuth2 Proxy before version 7.0.0, for users that use the whitelist domain feature, a domain that ended in a similar way to the intended domain could have been allowed as a redirect. For example, if a whitelist domain was configured for ".example.com", the intention is that subdomains of example.com are allowed. Instead, "example.com" and "badexample.com" could also match. This is fixed in version 7.0.0 onwards. As a workaround, one can disable the whitelist domain feature and run separate OAuth2 Proxy instances for each subdomain.</description>
      <guid isPermaLink="false">CVE-2021-21291|2024-08-03T18:09:15.152Z</guid>
      <pubDate>Tue, 02 Feb 2021 19:05:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-21411|2024-08-03T18:09:16.000Z -- oauth2-proxy -- oauth2-proxy
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-21411</link>
      <description>OAuth2-Proxy is an open source reverse proxy that provides authentication with Google, Github or other providers. The `--gitlab-group` flag for group-based authorization in the GitLab provider stopped working in the v7.0.0 release. Regardless of the flag settings, authorization wasn't restricted. Additionally, any authenticated users had whichever groups were set in `--gitlab-group` added to the new `X-Forwarded-Groups` header to the upstream application. While adding GitLab project based authorization support in #630, a bug was introduced where the user session's groups field was populated with the `--gitlab-group` config entries instead of pulling the individual user's group membership from the GitLab Userinfo endpoint. When the session groups where compared against the allowed groups for authorization, they matched improperly (since both lists were populated with the same data) so authorization was allowed. This impacts GitLab Provider users who relies on group membership for authorization restrictions. Any authenticated users in your GitLab environment can access your applications regardless of `--gitlab-group` membership restrictions. This is patched in v7.1.0. There is no workaround for the Group membership bug. But `--gitlab-project` can be set to use Project membership as the authorization checks instead of groups; it is not broken.</description>
      <guid isPermaLink="false">CVE-2021-21411|2024-08-03T18:09:16.000Z</guid>
      <pubDate>Fri, 26 Mar 2021 20:55:14 +0000</pubDate>
    </item>
  </channel>
</rss>
