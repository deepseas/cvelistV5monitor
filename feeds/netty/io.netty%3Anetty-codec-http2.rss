<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for netty -- io.netty:netty-codec-http2</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/netty/io.netty%3Anetty-codec-http2.rss</link>
    <description>The latest CVEs for netty -- io.netty:netty-codec-http2</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 20:22:10 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-21295|2024-08-03T18:09:15.344Z -- netty -- io.netty%3Anetty-codec-http2
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-21295</link>
      <description>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. In Netty (io.netty:netty-codec-http2) before version 4.1.60.Final there is a vulnerability that enables request smuggling. If a Content-Length header is present in the original HTTP/2 request, the field is not validated by `Http2MultiplexHandler` as it is propagated up. This is fine as long as the request is not proxied through as HTTP/1.1. If the request comes in as an HTTP/2 stream, gets converted into the HTTP/1.1 domain objects (`HttpRequest`, `HttpContent`, etc.) via `Http2StreamFrameToHttpObjectCodec `and then sent up to the child channel's pipeline and proxied through a remote peer as HTTP/1.1 this may result in request smuggling. In a proxy case, users may assume the content-length is validated somehow, which is not the case. If the request is forwarded to a backend channel that is a HTTP/1.1 connection, the Content-Length now has meaning and needs to be checked. An attacker can smuggle requests inside the body as it gets downgraded from HTTP/2 to HTTP/1.1. For an example attack refer to the linked GitHub Advisory. Users are only affected if all of this is true: `HTTP2MultiplexCodec` or `Http2FrameCodec` is used, `Http2StreamFrameToHttpObjectCodec` is used to convert to HTTP/1.1 objects, and these HTTP/1.1 objects are forwarded to another remote peer. This has been patched in 4.1.60.Final As a workaround, the user can do the validation by themselves by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`.</description>
      <guid isPermaLink="false">CVE-2021-21295|2024-08-03T18:09:15.344Z</guid>
      <pubDate>Tue, 09 Mar 2021 18:35:19 +0000</pubDate>
    </item>
  </channel>
</rss>
