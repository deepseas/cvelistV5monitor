<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for netty -- netty</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/netty/netty.rss</link>
    <description>The latest CVEs for netty -- netty</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 06:24:37 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-24823|2024-08-03T04:20:50.545Z -- netty -- netty
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-24823</link>
      <description>Netty is an open-source, asynchronous event-driven network application framework. The package `io.netty:netty-codec-http` prior to version 4.1.77.Final contains an insufficient fix for CVE-2021-21290. When Netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. This only impacts applications running on Java version 6 and lower. Additionally, this vulnerability impacts code running on Unix-like systems, and very old versions of Mac OSX and Windows as they all share the system temporary directory between all users. Version 4.1.77.Final contains a patch for this vulnerability. As a workaround, specify one's own `java.io.tmpdir` when starting the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.</description>
      <guid isPermaLink="false">CVE-2022-24823|2024-08-03T04:20:50.545Z</guid>
      <pubDate>Fri, 06 May 2022 12:05:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29025|2024-07-19T21:08:16.746Z -- netty -- netty</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29025</link>
      <description>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final.</description>
      <guid isPermaLink="false">CVE-2024-29025|2024-07-19T21:08:16.746Z</guid>
      <pubDate>Mon, 25 Mar 2024 20:09:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29025|2024-03-25T20:09:35.156Z -- netty -- netty</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29025</link>
      <description>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final.</description>
      <guid isPermaLink="false">CVE-2024-29025|2024-03-25T20:09:35.156Z</guid>
      <pubDate>Mon, 25 Mar 2024 20:09:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29025|2024-08-02T01:03:51.668Z -- netty -- netty</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29025</link>
      <description>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final.</description>
      <guid isPermaLink="false">CVE-2024-29025|2024-08-02T01:03:51.668Z</guid>
      <pubDate>Mon, 25 Mar 2024 20:09:35 +0000</pubDate>
    </item>
  </channel>
</rss>
