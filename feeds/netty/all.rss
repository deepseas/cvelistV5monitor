<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for netty -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/netty/all.rss</link>
    <description>The latest CVEs for netty -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 23:23:04 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-21290|2024-08-03T18:09:15.620Z -- netty -- netty
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-21290</link>
      <description>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. In Netty before version 4.1.59.Final there is a vulnerability on Unix-like systems involving an insecure temp file. When netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. On unix-like systems, the temporary directory is shared between all user. As such, writing to this directory using APIs that do not explicitly set the file/directory permissions can lead to information disclosure. Of note, this does not impact modern MacOS Operating Systems. The method "File.createTempFile" on unix-like systems creates a random file, but, by default will create this file with the permissions "-rw-r--r--". Thus, if sensitive information is written to this file, other local users can read this information. This is the case in netty's "AbstractDiskHttpData" is vulnerable. This has been fixed in version 4.1.59.Final. As a workaround, one may specify your own "java.io.tmpdir" when you start the JVM or use "DefaultHttpDataFactory.setBaseDir(...)" to set the directory to something that is only readable by the current user.</description>
      <guid isPermaLink="false">CVE-2021-21290|2024-08-03T18:09:15.620Z</guid>
      <pubDate>Mon, 08 Feb 2021 20:10:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-21409|2024-08-03T18:09:16.144Z -- netty -- netty
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-21409</link>
      <description>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. In Netty (io.netty:netty-codec-http2) before version 4.1.61.Final there is a vulnerability that enables request smuggling. The content-length header is not correctly validated if the request only uses a single Http2HeaderFrame with the endStream set to to true. This could lead to request smuggling if the request is proxied to a remote peer and translated to HTTP/1.1. This is a followup of GHSA-wm47-8v5p-wjpj/CVE-2021-21295 which did miss to fix this one case. This was fixed as part of 4.1.61.Final.</description>
      <guid isPermaLink="false">CVE-2021-21409|2024-08-03T18:09:16.144Z</guid>
      <pubDate>Tue, 30 Mar 2021 15:05:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-41881|2024-08-03T12:56:38.229Z -- netty -- netty
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-41881</link>
      <description>Netty project is an event-driven asynchronous network application framework. In versions prior to 4.1.86.Final, a StackOverflowError can be raised when parsing a malformed crafted message due to an infinite recursion. This issue is patched in version 4.1.86.Final. There is no workaround, except using a custom HaProxyMessageDecoder.</description>
      <guid isPermaLink="false">CVE-2022-41881|2024-08-03T12:56:38.229Z</guid>
      <pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-21295|2024-08-03T18:09:15.344Z -- netty -- io.netty%3Anetty-codec-http2
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-21295</link>
      <description>Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. In Netty (io.netty:netty-codec-http2) before version 4.1.60.Final there is a vulnerability that enables request smuggling. If a Content-Length header is present in the original HTTP/2 request, the field is not validated by `Http2MultiplexHandler` as it is propagated up. This is fine as long as the request is not proxied through as HTTP/1.1. If the request comes in as an HTTP/2 stream, gets converted into the HTTP/1.1 domain objects (`HttpRequest`, `HttpContent`, etc.) via `Http2StreamFrameToHttpObjectCodec `and then sent up to the child channel's pipeline and proxied through a remote peer as HTTP/1.1 this may result in request smuggling. In a proxy case, users may assume the content-length is validated somehow, which is not the case. If the request is forwarded to a backend channel that is a HTTP/1.1 connection, the Content-Length now has meaning and needs to be checked. An attacker can smuggle requests inside the body as it gets downgraded from HTTP/2 to HTTP/1.1. For an example attack refer to the linked GitHub Advisory. Users are only affected if all of this is true: `HTTP2MultiplexCodec` or `Http2FrameCodec` is used, `Http2StreamFrameToHttpObjectCodec` is used to convert to HTTP/1.1 objects, and these HTTP/1.1 objects are forwarded to another remote peer. This has been patched in 4.1.60.Final As a workaround, the user can do the validation by themselves by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`.</description>
      <guid isPermaLink="false">CVE-2021-21295|2024-08-03T18:09:15.344Z</guid>
      <pubDate>Tue, 09 Mar 2021 18:35:19 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-41915|2024-08-03T12:56:38.478Z -- netty -- netty
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-41915</link>
      <description>Netty project is an event-driven asynchronous network application framework. Starting in version 4.1.83.Final and prior to 4.1.86.Final, when calling `DefaultHttpHeadesr.set` with an _iterator_ of values, header value validation was not performed, allowing malicious header values in the iterator to perform HTTP Response Splitting. This issue has been patched in version 4.1.86.Final. Integrators can work around the issue by changing the `DefaultHttpHeaders.set(CharSequence, Iterator&lt;?&gt;)` call, into a `remove()` call, and call `add()` in a loop over the iterator of values.</description>
      <guid isPermaLink="false">CVE-2022-41915|2024-08-03T12:56:38.478Z</guid>
      <pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-24823|2024-08-03T04:20:50.545Z -- netty -- netty
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-24823</link>
      <description>Netty is an open-source, asynchronous event-driven network application framework. The package `io.netty:netty-codec-http` prior to version 4.1.77.Final contains an insufficient fix for CVE-2021-21290. When Netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. This only impacts applications running on Java version 6 and lower. Additionally, this vulnerability impacts code running on Unix-like systems, and very old versions of Mac OSX and Windows as they all share the system temporary directory between all users. Version 4.1.77.Final contains a patch for this vulnerability. As a workaround, specify one's own `java.io.tmpdir` when starting the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user.</description>
      <guid isPermaLink="false">CVE-2022-24823|2024-08-03T04:20:50.545Z</guid>
      <pubDate>Fri, 06 May 2022 12:05:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40642|2024-08-02T04:33:11.893Z -- netty -- netty-incubator-codec-ohttp</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40642</link>
      <description>The netty incubator codec.bhttp is a java language binary http parser. In affected versions the `BinaryHttpParser` class does not properly validate input values thus giving attackers almost complete control over the HTTP requests constructed from the parsed output. Attackers can abuse several issues individually to perform various injection attacks including HTTP request smuggling, desync attacks, HTTP header injections, request queue poisoning, caching attacks and Server Side Request Forgery (SSRF). Attacker could also combine several issues to create well-formed messages for other text-based protocols which may result in attacks beyond the HTTP protocol. The BinaryHttpParser class implements the readRequestHead method which performs most of the relevant parsing of the received request. The data structure prefixes values with a variable length integer value. The parsing code below first gets the lengths of the values from the prefixed variable length integer. After it has all of the lengths and calculates all of the indices, the parser casts the applicable slices of the ByteBuf to String. Finally, it passes these values into a new `DefaultBinaryHttpRequest` object where no further parsing or validation occurs. Method is partially validated while other values are not validated at all. Software that relies on netty to apply input validation for binary HTTP data may be vulnerable to various injection and protocol based attacks. This issue has been addressed in version 0.0.13.Final. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-40642|2024-08-02T04:33:11.893Z</guid>
      <pubDate>Thu, 18 Jul 2024 22:21:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29025|2024-08-02T01:03:51.668Z -- netty -- netty</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29025</link>
      <description>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final.</description>
      <guid isPermaLink="false">CVE-2024-29025|2024-08-02T01:03:51.668Z</guid>
      <pubDate>Mon, 25 Mar 2024 20:09:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29025|2024-07-19T21:08:16.746Z -- netty -- netty</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29025</link>
      <description>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final.</description>
      <guid isPermaLink="false">CVE-2024-29025|2024-07-19T21:08:16.746Z</guid>
      <pubDate>Mon, 25 Mar 2024 20:09:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29025|2024-03-25T20:09:35.156Z -- netty -- netty</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29025</link>
      <description>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final.</description>
      <guid isPermaLink="false">CVE-2024-29025|2024-03-25T20:09:35.156Z</guid>
      <pubDate>Mon, 25 Mar 2024 20:09:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-36121|2024-06-04T21:13:33.656Z -- netty -- netty-incubator-codec-ohttp</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-36121</link>
      <description>netty-incubator-codec-ohttp is the OHTTP implementation for netty. BoringSSLAEADContext keeps track of how many OHTTP responses have been sent and uses this sequence number to calculate the appropriate nonce to use with the encryption algorithm. Unfortunately, two separate errors combine which would allow an attacker to cause the sequence number to overflow and thus the nonce to repeat.</description>
      <guid isPermaLink="false">CVE-2024-36121|2024-06-04T21:13:33.656Z</guid>
      <pubDate>Tue, 04 Jun 2024 21:13:33 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40642|2024-07-23T13:52:37.848Z -- netty -- netty-incubator-codec-ohttp</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40642</link>
      <description>The netty incubator codec.bhttp is a java language binary http parser. In affected versions the `BinaryHttpParser` class does not properly validate input values thus giving attackers almost complete control over the HTTP requests constructed from the parsed output. Attackers can abuse several issues individually to perform various injection attacks including HTTP request smuggling, desync attacks, HTTP header injections, request queue poisoning, caching attacks and Server Side Request Forgery (SSRF). Attacker could also combine several issues to create well-formed messages for other text-based protocols which may result in attacks beyond the HTTP protocol. The BinaryHttpParser class implements the readRequestHead method which performs most of the relevant parsing of the received request. The data structure prefixes values with a variable length integer value. The parsing code below first gets the lengths of the values from the prefixed variable length integer. After it has all of the lengths and calculates all of the indices, the parser casts the applicable slices of the ByteBuf to String. Finally, it passes these values into a new `DefaultBinaryHttpRequest` object where no further parsing or validation occurs. Method is partially validated while other values are not validated at all. Software that relies on netty to apply input validation for binary HTTP data may be vulnerable to various injection and protocol based attacks. This issue has been addressed in version 0.0.13.Final. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-40642|2024-07-23T13:52:37.848Z</guid>
      <pubDate>Thu, 18 Jul 2024 22:21:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-36121|2024-08-02T03:30:12.965Z -- netty -- netty-incubator-codec-ohttp</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-36121</link>
      <description>netty-incubator-codec-ohttp is the OHTTP implementation for netty. BoringSSLAEADContext keeps track of how many OHTTP responses have been sent and uses this sequence number to calculate the appropriate nonce to use with the encryption algorithm. Unfortunately, two separate errors combine which would allow an attacker to cause the sequence number to overflow and thus the nonce to repeat.</description>
      <guid isPermaLink="false">CVE-2024-36121|2024-08-02T03:30:12.965Z</guid>
      <pubDate>Tue, 04 Jun 2024 21:13:33 +0000</pubDate>
    </item>
  </channel>
</rss>
