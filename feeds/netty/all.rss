<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for netty -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/netty/all.rss</link>
    <description>The latest CVEs for netty -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 21:22:07 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2021-43797|2024-08-04T04:03:08.898Z -- netty -- netty
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-43797</link>
      <description>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. Netty prior to version 4.1.71.Final skips control chars when they are present at the beginning / end of the header name. It should instead fail fast as these are not allowed by the spec and could lead to HTTP request smuggling. Failing to do the validation might cause netty to "sanitize" header names before it forward these to another remote system when used as proxy. This remote system can't see the invalid usage anymore, and therefore does not do the validation itself. Users should upgrade to version 4.1.71.Final.</description>
      <guid isPermaLink="false">CVE-2021-43797|2024-08-04T04:03:08.898Z</guid>
      <pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40642|2024-08-02T04:33:11.893Z -- netty -- netty-incubator-codec-ohttp</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40642</link>
      <description>The netty incubator codec.bhttp is a java language binary http parser. In affected versions the `BinaryHttpParser` class does not properly validate input values thus giving attackers almost complete control over the HTTP requests constructed from the parsed output. Attackers can abuse several issues individually to perform various injection attacks including HTTP request smuggling, desync attacks, HTTP header injections, request queue poisoning, caching attacks and Server Side Request Forgery (SSRF). Attacker could also combine several issues to create well-formed messages for other text-based protocols which may result in attacks beyond the HTTP protocol. The BinaryHttpParser class implements the readRequestHead method which performs most of the relevant parsing of the received request. The data structure prefixes values with a variable length integer value. The parsing code below first gets the lengths of the values from the prefixed variable length integer. After it has all of the lengths and calculates all of the indices, the parser casts the applicable slices of the ByteBuf to String. Finally, it passes these values into a new `DefaultBinaryHttpRequest` object where no further parsing or validation occurs. Method is partially validated while other values are not validated at all. Software that relies on netty to apply input validation for binary HTTP data may be vulnerable to various injection and protocol based attacks. This issue has been addressed in version 0.0.13.Final. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-40642|2024-08-02T04:33:11.893Z</guid>
      <pubDate>Thu, 18 Jul 2024 22:21:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29025|2024-08-02T01:03:51.668Z -- netty -- netty</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29025</link>
      <description>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final.</description>
      <guid isPermaLink="false">CVE-2024-29025|2024-08-02T01:03:51.668Z</guid>
      <pubDate>Mon, 25 Mar 2024 20:09:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29025|2024-07-19T21:08:16.746Z -- netty -- netty</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-29025</link>
      <description>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final.</description>
      <guid isPermaLink="false">CVE-2024-29025|2024-07-19T21:08:16.746Z</guid>
      <pubDate>Mon, 25 Mar 2024 20:09:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-29025|2024-03-25T20:09:35.156Z -- netty -- netty</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-29025</link>
      <description>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final.</description>
      <guid isPermaLink="false">CVE-2024-29025|2024-03-25T20:09:35.156Z</guid>
      <pubDate>Mon, 25 Mar 2024 20:09:35 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-36121|2024-06-04T21:13:33.656Z -- netty -- netty-incubator-codec-ohttp</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-36121</link>
      <description>netty-incubator-codec-ohttp is the OHTTP implementation for netty. BoringSSLAEADContext keeps track of how many OHTTP responses have been sent and uses this sequence number to calculate the appropriate nonce to use with the encryption algorithm. Unfortunately, two separate errors combine which would allow an attacker to cause the sequence number to overflow and thus the nonce to repeat.</description>
      <guid isPermaLink="false">CVE-2024-36121|2024-06-04T21:13:33.656Z</guid>
      <pubDate>Tue, 04 Jun 2024 21:13:33 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-40642|2024-07-23T13:52:37.848Z -- netty -- netty-incubator-codec-ohttp</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-40642</link>
      <description>The netty incubator codec.bhttp is a java language binary http parser. In affected versions the `BinaryHttpParser` class does not properly validate input values thus giving attackers almost complete control over the HTTP requests constructed from the parsed output. Attackers can abuse several issues individually to perform various injection attacks including HTTP request smuggling, desync attacks, HTTP header injections, request queue poisoning, caching attacks and Server Side Request Forgery (SSRF). Attacker could also combine several issues to create well-formed messages for other text-based protocols which may result in attacks beyond the HTTP protocol. The BinaryHttpParser class implements the readRequestHead method which performs most of the relevant parsing of the received request. The data structure prefixes values with a variable length integer value. The parsing code below first gets the lengths of the values from the prefixed variable length integer. After it has all of the lengths and calculates all of the indices, the parser casts the applicable slices of the ByteBuf to String. Finally, it passes these values into a new `DefaultBinaryHttpRequest` object where no further parsing or validation occurs. Method is partially validated while other values are not validated at all. Software that relies on netty to apply input validation for binary HTTP data may be vulnerable to various injection and protocol based attacks. This issue has been addressed in version 0.0.13.Final. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-40642|2024-07-23T13:52:37.848Z</guid>
      <pubDate>Thu, 18 Jul 2024 22:21:58 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-36121|2024-08-02T03:30:12.965Z -- netty -- netty-incubator-codec-ohttp</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-36121</link>
      <description>netty-incubator-codec-ohttp is the OHTTP implementation for netty. BoringSSLAEADContext keeps track of how many OHTTP responses have been sent and uses this sequence number to calculate the appropriate nonce to use with the encryption algorithm. Unfortunately, two separate errors combine which would allow an attacker to cause the sequence number to overflow and thus the nonce to repeat.</description>
      <guid isPermaLink="false">CVE-2024-36121|2024-08-02T03:30:12.965Z</guid>
      <pubDate>Tue, 04 Jun 2024 21:13:33 +0000</pubDate>
    </item>
  </channel>
</rss>
