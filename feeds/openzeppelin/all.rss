<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for OpenZeppelin -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/openzeppelin/all.rss</link>
    <description>The latest CVEs for OpenZeppelin -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Thu, 03 Oct 2024 22:23:14 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-40014|2024-10-03T14:58:56.494Z -- openzeppelin -- openzeppelin-contracts
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-40014</link>
      <description>OpenZeppelin Contracts is a library for secure smart contract development. Starting in version 4.0.0 and prior to version 4.9.3, contracts using `ERC2771Context` along with a custom trusted forwarder may see `_msgSender` return `address(0)` in calls that originate from the forwarder with calldata shorter than 20 bytes. This combination of circumstances does not appear to be common, in particular it is not the case for `MinimalForwarder` from OpenZeppelin Contracts, or any deployed forwarder the team is aware of, given that the signer address is appended to all calls that originate from these forwarders. The problem has been patched in v4.9.3.
</description>
      <guid isPermaLink="false">CVE-2023-40014|2024-10-03T14:58:56.494Z</guid>
      <pubDate>Thu, 10 Aug 2023 19:52:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-45304|2024-09-03T19:52:20.818Z -- openzeppelin -- cairo-contracts</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-45304</link>
      <description>Cairo-Contracts are OpenZeppelin Contracts written in Cairo for Starknet, a decentralized ZK Rollup. This vulnerability can lead to unauthorized ownership transfer, contrary to the original owner's intention of leaving the contract without an owner. It introduces a security risk where an unintended party (pending owner) can gain control of the contract after the original owner has renounced ownership. This could also be used by a malicious owner to simulate leaving a contract without an owner, to later regain ownership by previously having proposed himself as a pending owner. This issue has been addressed in release version 0.16.0. All users are advised to upgrade. There are no known workarounds for this vulnerability.</description>
      <guid isPermaLink="false">CVE-2024-45304|2024-09-03T19:52:20.818Z</guid>
      <pubDate>Fri, 30 Aug 2024 23:51:01 +0000</pubDate>
    </item>
  </channel>
</rss>
