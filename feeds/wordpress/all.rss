<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for WordPress -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/wordpress/all.rss</link>
    <description>The latest CVEs for WordPress -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 05 Aug 2024 22:22:39 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2019-16781|2024-08-05T01:24:48.284Z -- wordpress -- wordpress
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-16781</link>
      <description>In WordPress before 5.3.1, authenticated users with lower privileges (like contributors) can inject JavaScript code in the block editor, which is executed within the dashboard. It can lead to an admin opening the affected post in the editor leading to XSS.</description>
      <guid isPermaLink="false">CVE-2019-16781|2024-08-05T01:24:48.284Z</guid>
      <pubDate>Thu, 26 Dec 2019 17:00:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2019-16780|2024-08-05T01:24:47.245Z -- wordpress -- wordpress
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2019-16780</link>
      <description>WordPress users with lower privileges (like contributors) can inject JavaScript code in the block editor using a specific payload, which is executed within the dashboard. This can lead to XSS if an admin opens the post in the editor. Execution of this attack does require an authenticated user. This has been patched in WordPress 5.3.1, along with all the previous WordPress versions from 3.7 to 5.3 via a minor release. Automatic updates are enabled by default for minor releases and we strongly recommend that you keep them enabled.</description>
      <guid isPermaLink="false">CVE-2019-16780|2024-08-05T01:24:47.245Z</guid>
      <pubDate>Thu, 26 Dec 2019 16:50:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31210|2024-07-31T19:47:42.302Z -- wordpress -- wordpress-develop</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31210</link>
      <description>WordPress is an open publishing platform for the Web. It's possible for a file of a type other than a zip file to be submitted as a new plugin by an administrative user on the Plugins -&gt; Add New -&gt; Upload Plugin screen in WordPress. If FTP credentials are requested for installation (in order to move the file into place outside of the `uploads` directory) then the uploaded file remains temporary available in the Media Library despite it not being allowed. If the `DISALLOW_FILE_EDIT` constant is set to `true` on the site _and_ FTP credentials are required when uploading a new theme or plugin, then this technically allows an RCE when the user would otherwise have no means of executing arbitrary PHP code. This issue _only_ affects Administrator level users on single site installations, and Super Admin level users on Multisite installations where it's otherwise expected that the user does not have permission to upload or execute arbitrary PHP code. Lower level users are not affected. Sites where the `DISALLOW_FILE_MODS` constant is set to `true` are not affected. Sites where an administrative user either does not need to enter FTP credentials or they have access to the valid FTP credentials, are not affected. The issue was fixed in WordPress 6.4.3 on January 30, 2024 and backported to versions 6.3.3, 6.2.4, 6.1.5, 6.0.7, 5.9.9, 5.8.9, 5.7.11, 5.6.13, 5.5.14, 5.4.15, 5.3.17, 5.2.20, 5.1.18, 5.0.21, 4.9.25, 2.8.24, 4.7.28, 4.6.28, 4.5.31, 4.4.32, 4.3.33, 4.2.37, and 4.1.40. A workaround is available. If the `DISALLOW_FILE_MODS` constant is defined as `true` then it will not be possible for any user to upload a plugin and therefore this issue will not be exploitable.</description>
      <guid isPermaLink="false">CVE-2024-31210|2024-07-31T19:47:42.302Z</guid>
      <pubDate>Thu, 04 Apr 2024 22:59:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31210|2024-04-04T22:59:28.955Z -- wordpress -- wordpress-develop</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31210</link>
      <description>WordPress is an open publishing platform for the Web. It's possible for a file of a type other than a zip file to be submitted as a new plugin by an administrative user on the Plugins -&gt; Add New -&gt; Upload Plugin screen in WordPress. If FTP credentials are requested for installation (in order to move the file into place outside of the `uploads` directory) then the uploaded file remains temporary available in the Media Library despite it not being allowed. If the `DISALLOW_FILE_EDIT` constant is set to `true` on the site _and_ FTP credentials are required when uploading a new theme or plugin, then this technically allows an RCE when the user would otherwise have no means of executing arbitrary PHP code. This issue _only_ affects Administrator level users on single site installations, and Super Admin level users on Multisite installations where it's otherwise expected that the user does not have permission to upload or execute arbitrary PHP code. Lower level users are not affected. Sites where the `DISALLOW_FILE_MODS` constant is set to `true` are not affected. Sites where an administrative user either does not need to enter FTP credentials or they have access to the valid FTP credentials, are not affected. The issue was fixed in WordPress 6.4.3 on January 30, 2024 and backported to versions 6.3.3, 6.2.4, 6.1.5, 6.0.7, 5.9.9, 5.8.9, 5.7.11, 5.6.13, 5.5.14, 5.4.15, 5.3.17, 5.2.20, 5.1.18, 5.0.21, 4.9.25, 2.8.24, 4.7.28, 4.6.28, 4.5.31, 4.4.32, 4.3.33, 4.2.37, and 4.1.40. A workaround is available. If the `DISALLOW_FILE_MODS` constant is defined as `true` then it will not be possible for any user to upload a plugin and therefore this issue will not be exploitable.</description>
      <guid isPermaLink="false">CVE-2024-31210|2024-04-04T22:59:28.955Z</guid>
      <pubDate>Thu, 04 Apr 2024 22:59:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31211|2024-06-04T17:36:13.480Z -- wordpress -- wordpress-develop</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31211</link>
      <description>WordPress is an open publishing platform for the Web. Unserialization of instances of the `WP_HTML_Token` class allows for code execution via its `__destruct()` magic method. This issue was fixed in WordPress 6.4.2 on December 6th, 2023. Versions prior to 6.4.0 are not affected.</description>
      <guid isPermaLink="false">CVE-2024-31211|2024-06-04T17:36:13.480Z</guid>
      <pubDate>Thu, 04 Apr 2024 23:00:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31210|2024-08-02T01:46:04.580Z -- wordpress -- wordpress-develop</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31210</link>
      <description>WordPress is an open publishing platform for the Web. It's possible for a file of a type other than a zip file to be submitted as a new plugin by an administrative user on the Plugins -&gt; Add New -&gt; Upload Plugin screen in WordPress. If FTP credentials are requested for installation (in order to move the file into place outside of the `uploads` directory) then the uploaded file remains temporary available in the Media Library despite it not being allowed. If the `DISALLOW_FILE_EDIT` constant is set to `true` on the site _and_ FTP credentials are required when uploading a new theme or plugin, then this technically allows an RCE when the user would otherwise have no means of executing arbitrary PHP code. This issue _only_ affects Administrator level users on single site installations, and Super Admin level users on Multisite installations where it's otherwise expected that the user does not have permission to upload or execute arbitrary PHP code. Lower level users are not affected. Sites where the `DISALLOW_FILE_MODS` constant is set to `true` are not affected. Sites where an administrative user either does not need to enter FTP credentials or they have access to the valid FTP credentials, are not affected. The issue was fixed in WordPress 6.4.3 on January 30, 2024 and backported to versions 6.3.3, 6.2.4, 6.1.5, 6.0.7, 5.9.9, 5.8.9, 5.7.11, 5.6.13, 5.5.14, 5.4.15, 5.3.17, 5.2.20, 5.1.18, 5.0.21, 4.9.25, 2.8.24, 4.7.28, 4.6.28, 4.5.31, 4.4.32, 4.3.33, 4.2.37, and 4.1.40. A workaround is available. If the `DISALLOW_FILE_MODS` constant is defined as `true` then it will not be possible for any user to upload a plugin and therefore this issue will not be exploitable.</description>
      <guid isPermaLink="false">CVE-2024-31210|2024-08-02T01:46:04.580Z</guid>
      <pubDate>Thu, 04 Apr 2024 22:59:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31211|2024-08-02T01:46:04.743Z -- wordpress -- wordpress-develop</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31211</link>
      <description>WordPress is an open publishing platform for the Web. Unserialization of instances of the `WP_HTML_Token` class allows for code execution via its `__destruct()` magic method. This issue was fixed in WordPress 6.4.2 on December 6th, 2023. Versions prior to 6.4.0 are not affected.</description>
      <guid isPermaLink="false">CVE-2024-31211|2024-08-02T01:46:04.743Z</guid>
      <pubDate>Thu, 04 Apr 2024 23:00:17 +0000</pubDate>
    </item>
  </channel>
</rss>
