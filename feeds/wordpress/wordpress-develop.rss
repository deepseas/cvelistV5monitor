<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for WordPress -- wordpress-develop</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/wordpress/wordpress-develop.rss</link>
    <description>The latest CVEs for WordPress -- wordpress-develop</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sun, 04 Aug 2024 20:23:06 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-4048|2024-08-04T07:52:20.833Z -- wordpress -- wordpress-develop
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-4048</link>
      <description>In affected versions of WordPress, due to an issue in wp_validate_redirect() and URL sanitization, an arbitrary external link can be crafted leading to unintended/open redirect when clicked. This has been patched in version 5.4.2, along with all the previously affected versions via a minor release (5.3.4, 5.2.7, 5.1.6, 5.0.10, 4.9.15, 4.8.14, 4.7.18, 4.6.19, 4.5.22, 4.4.23, 4.3.24, 4.2.28, 4.1.31, 4.0.31, 3.9.32, 3.8.34, 3.7.34).</description>
      <guid isPermaLink="false">CVE-2020-4048|2024-08-04T07:52:20.833Z</guid>
      <pubDate>Fri, 12 Jun 2020 16:00:30 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-4049|2024-08-04T07:52:20.760Z -- wordpress -- wordpress-develop
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-4049</link>
      <description>In affected versions of WordPress, when uploading themes, the name of the theme folder can be crafted in a way that could lead to JavaScript execution in /wp-admin on the themes page. This does require an admin to upload the theme, and is low severity self-XSS. This has been patched in version 5.4.2, along with all the previously affected versions via a minor release (5.3.4, 5.2.7, 5.1.6, 5.0.10, 4.9.15, 4.8.14, 4.7.18, 4.6.19, 4.5.22, 4.4.23, 4.3.24, 4.2.28, 4.1.31, 4.0.31, 3.9.32, 3.8.34, 3.7.34).</description>
      <guid isPermaLink="false">CVE-2020-4049|2024-08-04T07:52:20.760Z</guid>
      <pubDate>Fri, 12 Jun 2020 16:00:23 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-39201|2024-08-04T01:58:18.168Z -- wordpress -- wordpress-develop
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-39201</link>
      <description>WordPress is a free and open-source content management system written in PHP and paired with a MySQL or MariaDB database. ### Impact The issue allows an authenticated but low-privileged user (like contributor/author) to execute XSS in the editor. This bypasses the restrictions imposed on users who do not have the permission to post `unfiltered_html`. ### Patches This has been patched in WordPress 5.8, and will be pushed to older versions via minor releases (automatic updates). It's strongly recommended that you keep auto-updates enabled to receive the fix. ### References https://wordpress.org/news/category/releases/ https://hackerone.com/reports/1142140 ### For more information If you have any questions or comments about this advisory: * Open an issue in [HackerOne](https://hackerone.com/wordpress)</description>
      <guid isPermaLink="false">CVE-2021-39201|2024-08-04T01:58:18.168Z</guid>
      <pubDate>Thu, 09 Sep 2021 21:35:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-4046|2024-08-04T07:52:20.719Z -- wordpress -- wordpress-develop
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-4046</link>
      <description>In affected versions of WordPress, users with low privileges (like contributors and authors) can use the embed block in a certain way to inject unfiltered HTML in the block editor. When affected posts are viewed by a higher privileged user, this could lead to script execution in the editor/wp-admin. This has been patched in version 5.4.2, along with all the previously affected versions via a minor release (5.3.4, 5.2.7, 5.1.6, 5.0.10, 4.9.15, 4.8.14, 4.7.18, 4.6.19, 4.5.22, 4.4.23, 4.3.24, 4.2.28, 4.1.31, 4.0.31, 3.9.32, 3.8.34, 3.7.34).</description>
      <guid isPermaLink="false">CVE-2020-4046|2024-08-04T07:52:20.719Z</guid>
      <pubDate>Fri, 12 Jun 2020 15:55:12 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-39202|2024-08-04T01:58:18.268Z -- wordpress -- wordpress-develop
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-39202</link>
      <description>WordPress is a free and open-source content management system written in PHP and paired with a MySQL or MariaDB database. In affected versions the widgets editor introduced in WordPress 5.8 beta 1 has improper handling of HTML input in the Custom HTML feature. This leads to stored XSS in the custom HTML widget. This has been patched in WordPress 5.8. It was only present during the testing/beta phase of WordPress 5.8.</description>
      <guid isPermaLink="false">CVE-2021-39202|2024-08-04T01:58:18.268Z</guid>
      <pubDate>Thu, 09 Sep 2021 21:55:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-39200|2024-08-04T01:58:18.328Z -- wordpress -- wordpress-develop
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-39200</link>
      <description>WordPress is a free and open-source content management system written in PHP and paired with a MySQL or MariaDB database. In affected versions output data of the function wp_die() can be leaked under certain conditions, which can include data like nonces. It can then be used to perform actions on your behalf. This has been patched in WordPress 5.8.1, along with any older affected versions via minor releases. It's strongly recommended that you keep auto-updates enabled to receive the fix.</description>
      <guid isPermaLink="false">CVE-2021-39200|2024-08-04T01:58:18.328Z</guid>
      <pubDate>Thu, 09 Sep 2021 21:25:09 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2021-39203|2024-08-04T01:58:18.303Z -- wordpress -- wordpress-develop
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2021-39203</link>
      <description>WordPress is a free and open-source content management system written in PHP and paired with a MySQL or MariaDB database. In affected versions authenticated users who don't have permission to view private post types/data can bypass restrictions in the block editor under certain conditions. This affected WordPress 5.8 beta during the testing period. It's fixed in the final 5.8 release.</description>
      <guid isPermaLink="false">CVE-2021-39203|2024-08-04T01:58:18.303Z</guid>
      <pubDate>Thu, 09 Sep 2021 22:00:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-4047|2024-08-04T07:52:20.835Z -- wordpress -- wordpress-develop
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-4047</link>
      <description>In affected versions of WordPress, authenticated users with upload permissions (like authors) are able to inject JavaScript into some media file attachment pages in a certain way. This can lead to script execution in the context of a higher privileged user when the file is viewed by them. This has been patched in version 5.4.2, along with all the previously affected versions via a minor release (5.3.4, 5.2.7, 5.1.6, 5.0.10, 4.9.15, 4.8.14, 4.7.18, 4.6.19, 4.5.22, 4.4.23, 4.3.24, 4.2.28, 4.1.31, 4.0.31, 3.9.32, 3.8.34, 3.7.34).</description>
      <guid isPermaLink="false">CVE-2020-4047|2024-08-04T07:52:20.835Z</guid>
      <pubDate>Fri, 12 Jun 2020 16:00:36 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2020-4050|2024-08-04T07:52:20.829Z -- wordpress -- wordpress-develop
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-4050</link>
      <description>In affected versions of WordPress, misuse of the `set-screen-option` filter's return value allows arbitrary user meta fields to be saved. It does require an admin to install a plugin that would misuse the filter. Once installed, it can be leveraged by low privileged users. This has been patched in version 5.4.2, along with all the previously affected versions via a minor release (5.3.4, 5.2.7, 5.1.6, 5.0.10, 4.9.15, 4.8.14, 4.7.18, 4.6.19, 4.5.22, 4.4.23, 4.3.24, 4.2.28, 4.1.31, 4.0.31, 3.9.32, 3.8.34, 3.7.34).</description>
      <guid isPermaLink="false">CVE-2020-4050|2024-08-04T07:52:20.829Z</guid>
      <pubDate>Fri, 12 Jun 2020 16:00:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31211|2024-08-02T01:46:04.743Z -- wordpress -- wordpress-develop</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31211</link>
      <description>WordPress is an open publishing platform for the Web. Unserialization of instances of the `WP_HTML_Token` class allows for code execution via its `__destruct()` magic method. This issue was fixed in WordPress 6.4.2 on December 6th, 2023. Versions prior to 6.4.0 are not affected.</description>
      <guid isPermaLink="false">CVE-2024-31211|2024-08-02T01:46:04.743Z</guid>
      <pubDate>Thu, 04 Apr 2024 23:00:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31210|2024-08-02T01:46:04.580Z -- wordpress -- wordpress-develop</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31210</link>
      <description>WordPress is an open publishing platform for the Web. It's possible for a file of a type other than a zip file to be submitted as a new plugin by an administrative user on the Plugins -&gt; Add New -&gt; Upload Plugin screen in WordPress. If FTP credentials are requested for installation (in order to move the file into place outside of the `uploads` directory) then the uploaded file remains temporary available in the Media Library despite it not being allowed. If the `DISALLOW_FILE_EDIT` constant is set to `true` on the site _and_ FTP credentials are required when uploading a new theme or plugin, then this technically allows an RCE when the user would otherwise have no means of executing arbitrary PHP code. This issue _only_ affects Administrator level users on single site installations, and Super Admin level users on Multisite installations where it's otherwise expected that the user does not have permission to upload or execute arbitrary PHP code. Lower level users are not affected. Sites where the `DISALLOW_FILE_MODS` constant is set to `true` are not affected. Sites where an administrative user either does not need to enter FTP credentials or they have access to the valid FTP credentials, are not affected. The issue was fixed in WordPress 6.4.3 on January 30, 2024 and backported to versions 6.3.3, 6.2.4, 6.1.5, 6.0.7, 5.9.9, 5.8.9, 5.7.11, 5.6.13, 5.5.14, 5.4.15, 5.3.17, 5.2.20, 5.1.18, 5.0.21, 4.9.25, 2.8.24, 4.7.28, 4.6.28, 4.5.31, 4.4.32, 4.3.33, 4.2.37, and 4.1.40. A workaround is available. If the `DISALLOW_FILE_MODS` constant is defined as `true` then it will not be possible for any user to upload a plugin and therefore this issue will not be exploitable.</description>
      <guid isPermaLink="false">CVE-2024-31210|2024-08-02T01:46:04.580Z</guid>
      <pubDate>Thu, 04 Apr 2024 22:59:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31211|2024-06-04T17:36:13.480Z -- wordpress -- wordpress-develop</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31211</link>
      <description>WordPress is an open publishing platform for the Web. Unserialization of instances of the `WP_HTML_Token` class allows for code execution via its `__destruct()` magic method. This issue was fixed in WordPress 6.4.2 on December 6th, 2023. Versions prior to 6.4.0 are not affected.</description>
      <guid isPermaLink="false">CVE-2024-31211|2024-06-04T17:36:13.480Z</guid>
      <pubDate>Thu, 04 Apr 2024 23:00:17 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31210|2024-04-04T22:59:28.955Z -- wordpress -- wordpress-develop</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31210</link>
      <description>WordPress is an open publishing platform for the Web. It's possible for a file of a type other than a zip file to be submitted as a new plugin by an administrative user on the Plugins -&gt; Add New -&gt; Upload Plugin screen in WordPress. If FTP credentials are requested for installation (in order to move the file into place outside of the `uploads` directory) then the uploaded file remains temporary available in the Media Library despite it not being allowed. If the `DISALLOW_FILE_EDIT` constant is set to `true` on the site _and_ FTP credentials are required when uploading a new theme or plugin, then this technically allows an RCE when the user would otherwise have no means of executing arbitrary PHP code. This issue _only_ affects Administrator level users on single site installations, and Super Admin level users on Multisite installations where it's otherwise expected that the user does not have permission to upload or execute arbitrary PHP code. Lower level users are not affected. Sites where the `DISALLOW_FILE_MODS` constant is set to `true` are not affected. Sites where an administrative user either does not need to enter FTP credentials or they have access to the valid FTP credentials, are not affected. The issue was fixed in WordPress 6.4.3 on January 30, 2024 and backported to versions 6.3.3, 6.2.4, 6.1.5, 6.0.7, 5.9.9, 5.8.9, 5.7.11, 5.6.13, 5.5.14, 5.4.15, 5.3.17, 5.2.20, 5.1.18, 5.0.21, 4.9.25, 2.8.24, 4.7.28, 4.6.28, 4.5.31, 4.4.32, 4.3.33, 4.2.37, and 4.1.40. A workaround is available. If the `DISALLOW_FILE_MODS` constant is defined as `true` then it will not be possible for any user to upload a plugin and therefore this issue will not be exploitable.</description>
      <guid isPermaLink="false">CVE-2024-31210|2024-04-04T22:59:28.955Z</guid>
      <pubDate>Thu, 04 Apr 2024 22:59:28 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31210|2024-07-31T19:47:42.302Z -- wordpress -- wordpress-develop</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31210</link>
      <description>WordPress is an open publishing platform for the Web. It's possible for a file of a type other than a zip file to be submitted as a new plugin by an administrative user on the Plugins -&gt; Add New -&gt; Upload Plugin screen in WordPress. If FTP credentials are requested for installation (in order to move the file into place outside of the `uploads` directory) then the uploaded file remains temporary available in the Media Library despite it not being allowed. If the `DISALLOW_FILE_EDIT` constant is set to `true` on the site _and_ FTP credentials are required when uploading a new theme or plugin, then this technically allows an RCE when the user would otherwise have no means of executing arbitrary PHP code. This issue _only_ affects Administrator level users on single site installations, and Super Admin level users on Multisite installations where it's otherwise expected that the user does not have permission to upload or execute arbitrary PHP code. Lower level users are not affected. Sites where the `DISALLOW_FILE_MODS` constant is set to `true` are not affected. Sites where an administrative user either does not need to enter FTP credentials or they have access to the valid FTP credentials, are not affected. The issue was fixed in WordPress 6.4.3 on January 30, 2024 and backported to versions 6.3.3, 6.2.4, 6.1.5, 6.0.7, 5.9.9, 5.8.9, 5.7.11, 5.6.13, 5.5.14, 5.4.15, 5.3.17, 5.2.20, 5.1.18, 5.0.21, 4.9.25, 2.8.24, 4.7.28, 4.6.28, 4.5.31, 4.4.32, 4.3.33, 4.2.37, and 4.1.40. A workaround is available. If the `DISALLOW_FILE_MODS` constant is defined as `true` then it will not be possible for any user to upload a plugin and therefore this issue will not be exploitable.</description>
      <guid isPermaLink="false">CVE-2024-31210|2024-07-31T19:47:42.302Z</guid>
      <pubDate>Thu, 04 Apr 2024 22:59:28 +0000</pubDate>
    </item>
  </channel>
</rss>
