<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for vyperlang -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/vyperlang/all.rss</link>
    <description>The latest CVEs for vyperlang -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 09:23:32 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-29255|2024-08-03T06:17:54.500Z -- vyperlang -- vyper
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-29255</link>
      <description>Vyper is a Pythonic Smart Contract Language for the ethereum virtual machine. In versions prior to 0.3.4 when a calling an external contract with no return value, the contract address (including side effects) could be evaluated twice. This may result in incorrect outcomes for contracts. This issue has been addressed in v0.3.4.</description>
      <guid isPermaLink="false">CVE-2022-29255|2024-08-03T06:17:54.500Z</guid>
      <pubDate>Mon, 06 Jun 2022 19:55:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-24787|2024-08-03T04:20:50.553Z -- vyperlang -- vyper
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-24787</link>
      <description>Vyper is a Pythonic Smart Contract Language for the Ethereum Virtual Machine. In version 0.3.1 and prior, bytestrings can have dirty bytes in them, resulting in the word-for-word comparisons giving incorrect results. Even without dirty nonzero bytes, two bytestrings can compare to equal if one ends with `"\x00"` because there is no comparison of the length. A patch is available and expected to be part of the 0.3.2 release. There are currently no known workarounds.</description>
      <guid isPermaLink="false">CVE-2022-24787|2024-08-03T04:20:50.553Z</guid>
      <pubDate>Mon, 04 Apr 2022 17:35:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-24845|2024-08-03T04:20:50.498Z -- vyperlang -- vyper
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-24845</link>
      <description>Vyper is a pythonic Smart Contract Language for the ethereum virtual machine. In affected versions, the return of `&lt;iface&gt;.returns_int128()` is not validated to fall within the bounds of `int128`. This issue can result in a misinterpretation of the integer value and lead to incorrect behavior. As of v0.3.0, `&lt;iface&gt;.returns_int128()` is validated in simple expressions, but not complex expressions. Users are advised to upgrade. There is no known workaround for this issue.</description>
      <guid isPermaLink="false">CVE-2022-24845|2024-08-03T04:20:50.498Z</guid>
      <pubDate>Wed, 13 Apr 2022 21:15:16 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-24788|2024-08-03T04:20:50.504Z -- vyperlang -- vyper
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-24788</link>
      <description>Vyper is a pythonic Smart Contract Language for the ethereum virtual machine. Versions of vyper prior to 0.3.2 suffer from a potential buffer overrun. Importing a function from a JSON interface which returns `bytes` generates bytecode which does not clamp bytes length, potentially resulting in a buffer overrun. Users are advised to upgrade. There are no known workarounds for this issue.</description>
      <guid isPermaLink="false">CVE-2022-24788|2024-08-03T04:20:50.504Z</guid>
      <pubDate>Wed, 13 Apr 2022 18:30:18 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32648|2024-08-02T02:13:40.467Z -- vyperlang -- vyper</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32648</link>
      <description>Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. Prior to version 0.3.0, default functions don't respect nonreentrancy keys and the lock isn't emitted. No vulnerable production contracts were found. Additionally, using a lock on a `default` function is a very sparsely used pattern. As such, the impact is low. Version 0.3.0 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-32648|2024-08-02T02:13:40.467Z</guid>
      <pubDate>Thu, 25 Apr 2024 17:48:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32481|2024-08-02T02:13:39.300Z -- vyperlang -- vyper</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32481</link>
      <description>Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. Starting in version 0.3.8 and prior to version 0.4.0b1, when looping over a `range` of the form `range(start, start + N)`, if `start` is negative, the execution will always revert. This issue is caused by an incorrect assertion inserted by the code generation of the range `stmt.parse_For_range()`. The issue arises when `start` is signed, instead of using `sle`, `le` is used and `start` is interpreted as an unsigned integer for the comparison. If it is a negative number, its 255th bit is set to `1` and is hence interpreted as a very large unsigned integer making the assertion always fail. Any contract having a `range(start, start + N)` where `start` is a signed integer with the possibility for `start` to be negative is affected. If a call goes through the loop while supplying a negative `start` the execution will revert. Version 0.4.0b1 fixes the issue.</description>
      <guid isPermaLink="false">CVE-2024-32481|2024-08-02T02:13:39.300Z</guid>
      <pubDate>Thu, 25 Apr 2024 17:00:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32645|2024-08-02T02:13:40.291Z -- vyperlang -- vyper</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32645</link>
      <description>Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. In versions 0.3.10 and prior, incorrect values can be logged when `raw_log` builtin is called with memory or storage arguments to be used as topics. A contract search was performed and no vulnerable contracts were found in production. The `build_IR` function of the `RawLog` class fails to properly unwrap the variables provided as topics. Consequently, incorrect values are logged as topics. As of time of publication, no fixed version is available.</description>
      <guid isPermaLink="false">CVE-2024-32645|2024-08-02T02:13:40.291Z</guid>
      <pubDate>Thu, 25 Apr 2024 17:18:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32647|2024-08-02T02:13:40.122Z -- vyperlang -- vyper</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32647</link>
      <description>Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. In versions 0.3.10 and prior, using the `create_from_blueprint` builtin can result in a double eval vulnerability when `raw_args=True` and the `args` argument has side-effects. It can be seen that the `_build_create_IR` function of the `create_from_blueprint` builtin doesn't cache the mentioned `args` argument to the stack. As such, it can be evaluated multiple times (instead of retrieving the value from the stack). No vulnerable production contracts were found. Additionally, double evaluation of side-effects should be easily discoverable in client tests. As such, the impact is low. As of time of publication, no fixed versions exist.</description>
      <guid isPermaLink="false">CVE-2024-32647|2024-08-02T02:13:40.122Z</guid>
      <pubDate>Thu, 25 Apr 2024 17:41:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32649|2024-08-02T02:13:40.270Z -- vyperlang -- vyper</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32649</link>
      <description>Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. In versions 0.3.10 and prior, using the `sqrt` builtin can result in double eval vulnerability when the argument has side-effects. It can be seen that the `build_IR` function of the `sqrt` builtin doesn't cache the argument to the stack. As such, it can be evaluated multiple times (instead of retrieving the value from the stack). No vulnerable production contracts were found. Additionally, double evaluation of side-effects should be easily discoverable in client tests. As such, the impact is low. As of time of publication, no fixed versions are available.</description>
      <guid isPermaLink="false">CVE-2024-32649|2024-08-02T02:13:40.270Z</guid>
      <pubDate>Thu, 25 Apr 2024 17:53:01 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32646|2024-08-02T02:13:40.232Z -- vyperlang -- vyper</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32646</link>
      <description>Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. In versions 0.3.10 and prior, using the `slice` builtin can result in a double eval vulnerability when the buffer argument is either `msg.data`, `self.code` or `&lt;address&gt;.code` and either the `start` or `length` arguments have side-effects. It can be easily triggered only with the versions `&lt;0.3.4` as `0.3.4` introduced the unique symbol fence. No vulnerable production contracts were found. Additionally, double evaluation of side-effects should be easily discoverable in client tests. As such, the impact is low. As of time of publication, no fixed versions are available.</description>
      <guid isPermaLink="false">CVE-2024-32646|2024-08-02T02:13:40.232Z</guid>
      <pubDate>Thu, 25 Apr 2024 17:21:59 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32645|2024-07-03T21:01:57.984Z -- vyperlang -- vyper</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-32645</link>
      <description>Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. In versions 0.3.10 and prior, incorrect values can be logged when `raw_log` builtin is called with memory or storage arguments to be used as topics. A contract search was performed and no vulnerable contracts were found in production. The `build_IR` function of the `RawLog` class fails to properly unwrap the variables provided as topics. Consequently, incorrect values are logged as topics. As of time of publication, no fixed version is available.</description>
      <guid isPermaLink="false">CVE-2024-32645|2024-07-03T21:01:57.984Z</guid>
      <pubDate>Thu, 25 Apr 2024 17:18:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32649|2024-06-04T17:52:16.841Z -- vyperlang -- vyper</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32649</link>
      <description>Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. In versions 0.3.10 and prior, using the `sqrt` builtin can result in double eval vulnerability when the argument has side-effects. It can be seen that the `build_IR` function of the `sqrt` builtin doesn't cache the argument to the stack. As such, it can be evaluated multiple times (instead of retrieving the value from the stack). No vulnerable production contracts were found. Additionally, double evaluation of side-effects should be easily discoverable in client tests. As such, the impact is low. As of time of publication, no fixed versions are available.</description>
      <guid isPermaLink="false">CVE-2024-32649|2024-06-04T17:52:16.841Z</guid>
      <pubDate>Thu, 25 Apr 2024 17:53:01 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32645|2024-04-25T17:22:15.234Z -- vyperlang -- vyper</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32645</link>
      <description>Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. In versions 0.3.10 and prior, incorrect values can be logged when `raw_log` builtin is called with memory or storage arguments to be used as topics. A contract search was performed and no vulnerable contracts were found in production. The `build_IR` function of the `RawLog` class fails to properly unwrap the variables provided as topics. Consequently, incorrect values are logged as topics. As of time of publication, no fixed version is available.</description>
      <guid isPermaLink="false">CVE-2024-32645|2024-04-25T17:22:15.234Z</guid>
      <pubDate>Thu, 25 Apr 2024 17:18:27 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32648|2024-06-04T17:51:45.656Z -- vyperlang -- vyper</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32648</link>
      <description>Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. Prior to version 0.3.0, default functions don't respect nonreentrancy keys and the lock isn't emitted. No vulnerable production contracts were found. Additionally, using a lock on a `default` function is a very sparsely used pattern. As such, the impact is low. Version 0.3.0 contains a patch for the issue.</description>
      <guid isPermaLink="false">CVE-2024-32648|2024-06-04T17:51:45.656Z</guid>
      <pubDate>Thu, 25 Apr 2024 17:48:32 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32481|2024-06-04T17:51:33.592Z -- vyperlang -- vyper</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32481</link>
      <description>Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. Starting in version 0.3.8 and prior to version 0.4.0b1, when looping over a `range` of the form `range(start, start + N)`, if `start` is negative, the execution will always revert. This issue is caused by an incorrect assertion inserted by the code generation of the range `stmt.parse_For_range()`. The issue arises when `start` is signed, instead of using `sle`, `le` is used and `start` is interpreted as an unsigned integer for the comparison. If it is a negative number, its 255th bit is set to `1` and is hence interpreted as a very large unsigned integer making the assertion always fail. Any contract having a `range(start, start + N)` where `start` is a signed integer with the possibility for `start` to be negative is affected. If a call goes through the loop while supplying a negative `start` the execution will revert. Version 0.4.0b1 fixes the issue.</description>
      <guid isPermaLink="false">CVE-2024-32481|2024-06-04T17:51:33.592Z</guid>
      <pubDate>Thu, 25 Apr 2024 17:00:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32647|2024-06-04T17:50:09.845Z -- vyperlang -- vyper</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32647</link>
      <description>Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. In versions 0.3.10 and prior, using the `create_from_blueprint` builtin can result in a double eval vulnerability when `raw_args=True` and the `args` argument has side-effects. It can be seen that the `_build_create_IR` function of the `create_from_blueprint` builtin doesn't cache the mentioned `args` argument to the stack. As such, it can be evaluated multiple times (instead of retrieving the value from the stack). No vulnerable production contracts were found. Additionally, double evaluation of side-effects should be easily discoverable in client tests. As such, the impact is low. As of time of publication, no fixed versions exist.</description>
      <guid isPermaLink="false">CVE-2024-32647|2024-06-04T17:50:09.845Z</guid>
      <pubDate>Thu, 25 Apr 2024 17:41:44 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-32646|2024-06-04T17:49:53.303Z -- vyperlang -- vyper</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-32646</link>
      <description>Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. In versions 0.3.10 and prior, using the `slice` builtin can result in a double eval vulnerability when the buffer argument is either `msg.data`, `self.code` or `&lt;address&gt;.code` and either the `start` or `length` arguments have side-effects. It can be easily triggered only with the versions `&lt;0.3.4` as `0.3.4` introduced the unique symbol fence. No vulnerable production contracts were found. Additionally, double evaluation of side-effects should be easily discoverable in client tests. As such, the impact is low. As of time of publication, no fixed versions are available.</description>
      <guid isPermaLink="false">CVE-2024-32646|2024-06-04T17:49:53.303Z</guid>
      <pubDate>Thu, 25 Apr 2024 17:21:59 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-26149|2024-02-26T20:16:01.688Z -- vyperlang -- vyper</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-26149</link>
      <description>Vyper is a pythonic Smart Contract Language for the ethereum virtual machine. If an excessively large value is specified as the starting index for an array in `_abi_decode`, it can cause the read position to overflow. This results in the decoding of values outside the intended array bounds, potentially leading to exploitations in contracts that use arrays within `_abi_decode`. This vulnerability affects 0.3.10 and earlier versions.</description>
      <guid isPermaLink="false">CVE-2024-26149|2024-02-26T20:16:01.688Z</guid>
      <pubDate>Mon, 26 Feb 2024 20:16:01 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-24564|2024-02-26T20:16:13.604Z -- vyperlang -- vyper</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-24564</link>
      <description>Vyper is a pythonic Smart Contract Language for the ethereum virtual machine. When using the built-in `extract32(b, start)`, if the `start` index provided has for side effect to update `b`, the byte array to extract `32` bytes from, it could be that some dirty memory is read and returned by `extract32`. This vulnerability affects 0.3.10 and earlier versions.</description>
      <guid isPermaLink="false">CVE-2024-24564|2024-02-26T20:16:13.604Z</guid>
      <pubDate>Mon, 26 Feb 2024 20:16:13 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-24563|2024-02-07T17:10:08.385Z -- vyperlang -- vyper</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-24563</link>
      <description>Vyper is a Pythonic Smart Contract Language for the Ethereum Virtual Machine. Arrays can be keyed by a signed integer, while they are defined for unsigned integers only. The typechecker doesn't throw when spotting the usage of an `int` as an index for an array. The typechecker allows the usage of signed integers to be used as indexes to arrays. The vulnerability is present in different forms in all versions, including `0.3.10`. For ints, the 2's complement representation is used. Because the array was declared very large, the bounds checking will pass Negative values will simply be represented as very large numbers. As of time of publication, a fixed version does not exist.

There are three potential vulnerability classes: unpredictable behavior, accessing inaccessible elements and denial of service. Class 1: If it is possible to index an array with a negative integer without reverting, this is most likely not anticipated by the developer and such accesses can cause unpredictable behavior for the contract. Class 2: If a contract has an invariant in the form `assert index &lt; x`, the developer will suppose that no elements on indexes `y | y &gt;= x` are accessible. However, by using negative indexes, this can be bypassed. Class 3: If the index is dependent on the state of the contract, this poses a risk of denial of service. If the state of the contract can be manipulated in such way that the index will be forced to be negative, the array access can always revert (because most likely the array won't be declared extremely large). However, all these the scenarios are highly unlikely. Most likely behavior is a revert on the bounds check.</description>
      <guid isPermaLink="false">CVE-2024-24563|2024-02-07T17:10:08.385Z</guid>
      <pubDate>Wed, 07 Feb 2024 17:10:08 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-24559|2024-02-05T21:04:42.056Z -- vyperlang -- vyper</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-24559</link>
      <description>Vyper is a Pythonic Smart Contract Language for the EVM. There is an error in the stack management when compiling the `IR` for `sha3_64`. Concretely, the `height` variable is miscalculated. The vulnerability can't be triggered without writing the `IR` by hand (that is, it cannot be triggered from regular vyper code). `sha3_64` is used for retrieval in mappings. No flow that would cache the `key` was found so the issue shouldn't be possible to trigger when compiling the compiler-generated `IR`. This issue isn't triggered during normal compilation of vyper code so the impact is low. At the time of publication there is no patch available.</description>
      <guid isPermaLink="false">CVE-2024-24559|2024-02-05T21:04:42.056Z</guid>
      <pubDate>Mon, 05 Feb 2024 21:04:42 +0000</pubDate>
    </item>
  </channel>
</rss>
