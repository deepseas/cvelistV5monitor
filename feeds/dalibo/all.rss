<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>CVE Feed for DALIBO -- all</title><link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/dalibo/all.rss</link><description>The latest CVEs for DALIBO -- all</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><lastBuildDate>Tue, 28 May 2024 21:54:23 +0000</lastBuildDate><ttl>60</ttl><item><title>CVE-2024-2339|2024-03-08T20:07:14.838Z -- DALIBO -- PostgreSQL Anonymizer
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2339</link><description>PostgreSQL Anonymizer v1.2 contains a vulnerability  that allows a user who owns a table to elevate to superuser. A user can define a masking function for a column and place malicious code in that function. When a privileged user applies the masking rules using the static masking or the anonymous dump method, the malicious code is executed and can grant escalated privileges to the malicious user. PostgreSQL Anonymizer v1.2 does provide a protection against this risk with the restrict_to_trusted_schemas option, but that protection is incomplete. Users that don't own a table, especially masked users cannot exploit this vulnerability. The problem is resolved in v1.3.</description><guid isPermaLink="false">CVE-2024-2339|2024-03-08T20:07:14.838Z</guid><pubDate>Fri, 08 Mar 2024 20:07:14 +0000</pubDate></item><item><title>CVE-2024-2338|2024-03-08T20:07:00.788Z -- DALIBO -- PostgreSQL Anonymizer
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2338</link><description>PostgreSQL Anonymizer v1.2 contains a SQL injection vulnerability that allows a user who owns a table to elevate to superuser when dynamic masking is enabled. PostgreSQL Anonymizer enables users to set security labels on tables to mask specified columns. There is a flaw that allows complex expressions to be provided as a value. This expression is then later used as it to create the masked views leading to SQL Injection. If dynamic masking is enabled, this will lead to privilege escalation to superuser after the label is created. Users that don't own a table, especially masked users cannot exploit this vulnerability. The problem is resolved in v1.3.</description><guid isPermaLink="false">CVE-2024-2338|2024-03-08T20:07:00.788Z</guid><pubDate>Fri, 08 Mar 2024 20:07:00 +0000</pubDate></item></channel></rss>