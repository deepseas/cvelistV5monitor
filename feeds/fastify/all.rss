<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for fastify -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/fastify/all.rss</link>
    <description>The latest CVEs for fastify -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Sat, 03 Aug 2024 09:23:32 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2022-31142|2024-08-03T07:11:39.576Z -- fastify -- fastify-bearer-auth
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-31142</link>
      <description>@fastify/bearer-auth is a Fastify plugin to require bearer Authorization headers. @fastify/bearer-auth prior to versions 7.0.2 and 8.0.1 does not securely use crypto.timingSafeEqual. A malicious attacker could estimate the length of one valid bearer token. According to the corresponding RFC 6750, the bearer token has only base64 valid characters, reducing the range of characters for a brute force attack. Version 7.0.2 and 8.0.1 of @fastify/bearer-auth contain a patch. There are currently no known workarounds. The package fastify-bearer-auth, which covers versions 6.0.3 and prior, is also vulnerable starting at version 5.0.1. Users of fastify-bearer-auth should upgrade to a patched version of @fastify/bearer-auth.</description>
      <guid isPermaLink="false">CVE-2022-31142|2024-08-03T07:11:39.576Z</guid>
      <pubDate>Thu, 14 Jul 2022 18:55:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2022-29220|2024-08-03T06:17:54.072Z -- fastify -- github-action-merge-dependabot
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2022-29220</link>
      <description>github-action-merge-dependabot is an action that automatically approves and merges dependabot pull requests (PRs). Prior to version 3.2.0, github-action-merge-dependabot does not check if a commit created by dependabot is verified with the proper GPG key. There is just a check if the actor is set to `dependabot[bot]` to determine if the PR is a legit PR. Theoretically, an owner of a seemingly valid and legit action in the pipeline can check if the PR is created by dependabot and if their own action has enough permissions to modify the PR in the pipeline. If so, they can modify the PR by adding a second seemingly valid and legit commit to the PR, as they can set arbitrarily the username and email in for commits in git. Because the bot only checks if the actor is valid, it would pass the malicious changes through and merge the PR automatically, without getting noticed by project maintainers. It would probably not be possible to determine where the malicious commit came from, as it would only say `dependabot[bot]` and the corresponding email-address. Version 3.2.0 contains a patch for this issue.</description>
      <guid isPermaLink="false">CVE-2022-29220|2024-08-03T06:17:54.072Z</guid>
      <pubDate>Tue, 31 May 2022 16:10:10 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31999|2024-08-02T01:59:50.856Z -- fastify -- fastify-secure-session</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31999</link>
      <description>@festify/secure-session creates a secure stateless cookie session for Fastify. At the end of the request handling, it will encrypt all data in the session with a secret key and attach the ciphertext as a cookie value with the defined cookie name. After that, the session on the server side is destroyed. When an encrypted cookie with matching session name is provided with subsequent requests, it will decrypt the ciphertext to get the data. The plugin then creates a new session with the data in the ciphertext. Thus theoretically the web instance is still accessing the data from a server-side session, but technically that session is generated solely from a user provided cookie (which is assumed to be non-craftable because it is encrypted with a secret key not known to the user). The issue exists in the session removal process. In the delete function of the code, when the session is deleted, it is marked for deletion. However, if an attacker could gain access to the cookie, they could keep using it forever. Version 7.3.0 contains a patch for the issue. As a workaround, one may include a "last update" field in the session, and treat "old sessions" as expired.</description>
      <guid isPermaLink="false">CVE-2024-31999|2024-08-02T01:59:50.856Z</guid>
      <pubDate>Wed, 10 Apr 2024 21:59:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31999|2024-07-31T17:54:23.641Z -- fastify -- fastify-secure-session</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31999</link>
      <description>@festify/secure-session creates a secure stateless cookie session for Fastify. At the end of the request handling, it will encrypt all data in the session with a secret key and attach the ciphertext as a cookie value with the defined cookie name. After that, the session on the server side is destroyed. When an encrypted cookie with matching session name is provided with subsequent requests, it will decrypt the ciphertext to get the data. The plugin then creates a new session with the data in the ciphertext. Thus theoretically the web instance is still accessing the data from a server-side session, but technically that session is generated solely from a user provided cookie (which is assumed to be non-craftable because it is encrypted with a secret key not known to the user). The issue exists in the session removal process. In the delete function of the code, when the session is deleted, it is marked for deletion. However, if an attacker could gain access to the cookie, they could keep using it forever. Version 7.3.0 contains a patch for the issue. As a workaround, one may include a "last update" field in the session, and treat "old sessions" as expired.</description>
      <guid isPermaLink="false">CVE-2024-31999|2024-07-31T17:54:23.641Z</guid>
      <pubDate>Wed, 10 Apr 2024 21:59:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35220|2024-06-04T17:34:24.350Z -- fastify -- session</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35220</link>
      <description>@fastify/session is a session plugin for fastify. Requires the @fastify/cookie plugin. When restoring the cookie from the session store, the `expires` field is overriden if the `maxAge` field was set.
This means a cookie is never correctly detected as expired and thus expired sessions are not destroyed. This vulnerability has been patched 10.8.0.</description>
      <guid isPermaLink="false">CVE-2024-35220|2024-06-04T17:34:24.350Z</guid>
      <pubDate>Tue, 21 May 2024 20:26:53 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31999|2024-04-10T21:59:54.176Z -- fastify -- fastify-secure-session</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31999</link>
      <description>@festify/secure-session creates a secure stateless cookie session for Fastify. At the end of the request handling, it will encrypt all data in the session with a secret key and attach the ciphertext as a cookie value with the defined cookie name. After that, the session on the server side is destroyed. When an encrypted cookie with matching session name is provided with subsequent requests, it will decrypt the ciphertext to get the data. The plugin then creates a new session with the data in the ciphertext. Thus theoretically the web instance is still accessing the data from a server-side session, but technically that session is generated solely from a user provided cookie (which is assumed to be non-craftable because it is encrypted with a secret key not known to the user). The issue exists in the session removal process. In the delete function of the code, when the session is deleted, it is marked for deletion. However, if an attacker could gain access to the cookie, they could keep using it forever. Version 7.3.0 contains a patch for the issue. As a workaround, one may include a "last update" field in the session, and treat "old sessions" as expired.</description>
      <guid isPermaLink="false">CVE-2024-31999|2024-04-10T21:59:54.176Z</guid>
      <pubDate>Wed, 10 Apr 2024 21:59:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35220|2024-08-02T03:07:46.810Z -- fastify -- session</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-35220</link>
      <description>@fastify/session is a session plugin for fastify. Requires the @fastify/cookie plugin. When restoring the cookie from the session store, the `expires` field is overriden if the `maxAge` field was set.
This means a cookie is never correctly detected as expired and thus expired sessions are not destroyed. This vulnerability has been patched 10.8.0.</description>
      <guid isPermaLink="false">CVE-2024-35220|2024-08-02T03:07:46.810Z</guid>
      <pubDate>Tue, 21 May 2024 20:26:53 +0000</pubDate>
    </item>
  </channel>
</rss>
