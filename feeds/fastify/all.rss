<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for fastify -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/fastify/all.rss</link>
    <description>The latest CVEs for fastify -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Fri, 02 Aug 2024 20:23:34 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2023-25576|2024-08-02T11:25:19.195Z -- fastify -- fastify-multipart
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-25576</link>
      <description>@fastify/multipart is a Fastify plugin to parse the multipart content-type. Prior to versions 7.4.1 and 6.0.1, @fastify/multipart may experience denial of service due to a number of situations in which an unlimited number of parts are accepted. This includes the multipart body parser accepting an unlimited number of file parts, the multipart body parser accepting an unlimited number of field parts, and the multipart body parser accepting an unlimited number of empty parts as field parts. This is fixed in v7.4.1 (for Fastify v4.x) and v6.0.1 (for Fastify v3.x). There are no known workarounds.</description>
      <guid isPermaLink="false">CVE-2023-25576|2024-08-02T11:25:19.195Z</guid>
      <pubDate>Tue, 14 Feb 2023 15:04:11 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-29020|2024-08-02T14:00:14.369Z -- fastify -- fastify-passport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-29020</link>
      <description>@fastify/passport is a port of passport authentication library for the Fastify ecosystem. The CSRF (Cross-Site Request Forger) protection enforced by the `@fastify/csrf-protection` library, when combined with `@fastify/passport` in affected versions, can be bypassed by network and same-site attackers. `fastify/csrf-protection` implements the synchronizer token pattern (using plugins `@fastify/session` and `@fastify/secure-session`) by storing a random value used for CSRF token generation in the `_csrf` attribute of a user's session. The `@fastify/passport` library does not clear the session object upon authentication, preserving the `_csrf` attribute between pre-login and authenticated sessions. Consequently, CSRF tokens generated before authentication are still valid. Network and same-site attackers can thus obtain a CSRF token for their pre-session, fixate that pre-session in the victim's browser via cookie tossing, and then perform a CSRF attack after the victim authenticates. As a solution, newer versions of `@fastify/passport` include the configuration options: `clearSessionOnLogin (default: true)` and `clearSessionIgnoreFields (default: ['passport', 'session'])` to clear all the session attributes by default, preserving those explicitly defined in `clearSessionIgnoreFields`.</description>
      <guid isPermaLink="false">CVE-2023-29020|2024-08-02T14:00:14.369Z</guid>
      <pubDate>Fri, 21 Apr 2023 22:31:56 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-27495|2024-08-02T12:16:35.323Z -- fastify -- csrf-protection
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-27495</link>
      <description>@fastify/csrf-protection is a plugin which helps protect Fastify servers against CSRF attacks. The CSRF protection enforced by the @fastify/csrf-protection library in combination with @fastify/cookie can be bypassed from network and same-site attackers under certain conditions. @fastify/csrf-protection supports an optional userInfo parameter that binds the CSRF token to the user. This parameter has been introduced to prevent cookie-tossing attacks as a fix for CVE-2021-29624. Whenever userInfo parameter is missing, or its value can be predicted for the target user account, network and same-site attackers can 1. fixate a _csrf cookie in the victim's browser, and 2. forge CSRF tokens that are valid for the victim's session. This allows attackers to bypass the CSRF protection mechanism. As a fix, @fastify/csrf-protection starting from version 6.3.0 (and v4.1.0) includes a server-defined secret hmacKey that cryptographically binds the CSRF token to the value of the _csrf cookie and the userInfo parameter, making tokens non-spoofable by attackers. This protection is effective as long as the userInfo parameter is unique for each user. This is patched in versions 6.3.0 and v4.1.0. Users are advised to upgrade. Users unable to upgrade may use a random, non-predictable userInfo parameter for each user as a mitigation.</description>
      <guid isPermaLink="false">CVE-2023-27495|2024-08-02T12:16:35.323Z</guid>
      <pubDate>Thu, 20 Apr 2023 17:05:21 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-29019|2024-08-02T14:00:14.380Z -- fastify -- fastify-passport
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-29019</link>
      <description>@fastify/passport is a port of passport authentication library for the Fastify ecosystem. Applications using `@fastify/passport` in affected versions for user authentication, in combination with `@fastify/session` as the underlying session management mechanism, are vulnerable to session fixation attacks from network and same-site attackers. fastify applications rely on the `@fastify/passport` library for user authentication. The login and user validation are performed by the `authenticate` function. When executing this function, the `sessionId` is preserved between the pre-login and the authenticated session. Network and same-site attackers can hijack the victim's session by tossing a valid `sessionId` cookie in the victim's browser and waiting for the victim to log in on the website. As a solution, newer versions of `@fastify/passport` regenerate `sessionId` upon login, preventing the attacker-controlled pre-session cookie from being upgraded to an authenticated session. Users are advised to upgrade. There are no known workarounds for this vulnerability.
</description>
      <guid isPermaLink="false">CVE-2023-29019|2024-08-02T14:00:14.380Z</guid>
      <pubDate>Fri, 21 Apr 2023 22:28:55 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31999|2024-08-02T01:59:50.856Z -- fastify -- fastify-secure-session</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31999</link>
      <description>@festify/secure-session creates a secure stateless cookie session for Fastify. At the end of the request handling, it will encrypt all data in the session with a secret key and attach the ciphertext as a cookie value with the defined cookie name. After that, the session on the server side is destroyed. When an encrypted cookie with matching session name is provided with subsequent requests, it will decrypt the ciphertext to get the data. The plugin then creates a new session with the data in the ciphertext. Thus theoretically the web instance is still accessing the data from a server-side session, but technically that session is generated solely from a user provided cookie (which is assumed to be non-craftable because it is encrypted with a secret key not known to the user). The issue exists in the session removal process. In the delete function of the code, when the session is deleted, it is marked for deletion. However, if an attacker could gain access to the cookie, they could keep using it forever. Version 7.3.0 contains a patch for the issue. As a workaround, one may include a "last update" field in the session, and treat "old sessions" as expired.</description>
      <guid isPermaLink="false">CVE-2024-31999|2024-08-02T01:59:50.856Z</guid>
      <pubDate>Wed, 10 Apr 2024 21:59:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31999|2024-07-31T17:54:23.641Z -- fastify -- fastify-secure-session</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-31999</link>
      <description>@festify/secure-session creates a secure stateless cookie session for Fastify. At the end of the request handling, it will encrypt all data in the session with a secret key and attach the ciphertext as a cookie value with the defined cookie name. After that, the session on the server side is destroyed. When an encrypted cookie with matching session name is provided with subsequent requests, it will decrypt the ciphertext to get the data. The plugin then creates a new session with the data in the ciphertext. Thus theoretically the web instance is still accessing the data from a server-side session, but technically that session is generated solely from a user provided cookie (which is assumed to be non-craftable because it is encrypted with a secret key not known to the user). The issue exists in the session removal process. In the delete function of the code, when the session is deleted, it is marked for deletion. However, if an attacker could gain access to the cookie, they could keep using it forever. Version 7.3.0 contains a patch for the issue. As a workaround, one may include a "last update" field in the session, and treat "old sessions" as expired.</description>
      <guid isPermaLink="false">CVE-2024-31999|2024-07-31T17:54:23.641Z</guid>
      <pubDate>Wed, 10 Apr 2024 21:59:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35220|2024-06-04T17:34:24.350Z -- fastify -- session</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35220</link>
      <description>@fastify/session is a session plugin for fastify. Requires the @fastify/cookie plugin. When restoring the cookie from the session store, the `expires` field is overriden if the `maxAge` field was set.
This means a cookie is never correctly detected as expired and thus expired sessions are not destroyed. This vulnerability has been patched 10.8.0.</description>
      <guid isPermaLink="false">CVE-2024-35220|2024-06-04T17:34:24.350Z</guid>
      <pubDate>Tue, 21 May 2024 20:26:53 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-31999|2024-04-10T21:59:54.176Z -- fastify -- fastify-secure-session</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-31999</link>
      <description>@festify/secure-session creates a secure stateless cookie session for Fastify. At the end of the request handling, it will encrypt all data in the session with a secret key and attach the ciphertext as a cookie value with the defined cookie name. After that, the session on the server side is destroyed. When an encrypted cookie with matching session name is provided with subsequent requests, it will decrypt the ciphertext to get the data. The plugin then creates a new session with the data in the ciphertext. Thus theoretically the web instance is still accessing the data from a server-side session, but technically that session is generated solely from a user provided cookie (which is assumed to be non-craftable because it is encrypted with a secret key not known to the user). The issue exists in the session removal process. In the delete function of the code, when the session is deleted, it is marked for deletion. However, if an attacker could gain access to the cookie, they could keep using it forever. Version 7.3.0 contains a patch for the issue. As a workaround, one may include a "last update" field in the session, and treat "old sessions" as expired.</description>
      <guid isPermaLink="false">CVE-2024-31999|2024-04-10T21:59:54.176Z</guid>
      <pubDate>Wed, 10 Apr 2024 21:59:54 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-35220|2024-08-02T03:07:46.810Z -- fastify -- session</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-35220</link>
      <description>@fastify/session is a session plugin for fastify. Requires the @fastify/cookie plugin. When restoring the cookie from the session store, the `expires` field is overriden if the `maxAge` field was set.
This means a cookie is never correctly detected as expired and thus expired sessions are not destroyed. This vulnerability has been patched 10.8.0.</description>
      <guid isPermaLink="false">CVE-2024-35220|2024-08-02T03:07:46.810Z</guid>
      <pubDate>Tue, 21 May 2024 20:26:53 +0000</pubDate>
    </item>
  </channel>
</rss>
