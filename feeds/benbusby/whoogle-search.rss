<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for benbusby -- whoogle-search</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/benbusby/whoogle-search.rss</link>
    <description>The latest CVEs for benbusby -- whoogle-search</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Tue, 04 Jun 2024 17:29:28 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2024-22417|2024-02-01T21:00:49.757Z -- benbusby -- whoogle-search
</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22417</link>
      <description>Whoogle Search is a self-hosted metasearch engine. In versions 0.8.3 and prior, the `element` method in `app/routes.py` does not validate the user-controlled `src_type` and `element_url` variables and passes them to the `send` method which sends a `GET` request on lines 339-343 in `requests.py`. The returned contents of the URL are then passed to and reflected back to the user in the `send_file` function on line 484, together with the user-controlled `src_type`, which allows the attacker to control the HTTP response content type leading to a cross-site scripting vulnerability. An attacker could craft a special URL to point to a malicious website and send the link to a victim. The fact that the link would contain a trusted domain (e.g. from one of public Whoogle instances) could be used to trick the user into clicking the link. The malicious website could, for example, be a copy of a real website, meant to steal a personâ€™s credentials to the website, or trick that person in another way. Version 0.8.4 contains a patch for this issue.</description>
      <guid isPermaLink="false">CVE-2024-22417|2024-02-01T21:00:49.757Z</guid>
      <pubDate>Tue, 23 Jan 2024 17:21:59 +0000</pubDate>
    </item>
  </channel>
</rss>
