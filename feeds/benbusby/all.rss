<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>CVE Feed for benbusby -- all</title><link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/benbusby/all.rss</link><description>The latest CVEs for benbusby -- all</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><lastBuildDate>Tue, 28 May 2024 22:02:45 +0000</lastBuildDate><ttl>60</ttl><item><title>CVE-2024-22203|2024-01-23T17:20:15.554Z -- benbusby -- whoogle-search
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22203</link><description>Whoogle Search is a self-hosted metasearch engine. In versions prior to 0.8.4, the `element` method in `app/routes.py` does not validate the user-controlled `src_type` and `element_url` variables and passes them to the `send` method which sends a GET request on lines 339-343 in `request.py`, which leads to a server-side request forgery. This issue allows for crafting GET requests to internal and external resources on behalf of the server. For example, this issue would allow for accessing resources on the internal network that the server has access to, even though these resources may not be accessible on the internet. This issue is fixed in version 0.8.4.</description><guid isPermaLink="false">CVE-2024-22203|2024-01-23T17:20:15.554Z</guid><pubDate>Tue, 23 Jan 2024 17:20:15 +0000</pubDate></item><item><title>CVE-2024-22205|2024-01-23T17:21:40.982Z -- benbusby -- whoogle-search
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22205</link><description>Whoogle Search is a self-hosted metasearch engine. In versions 0.8.3 and prior, the `window` endpoint does not sanitize user-supplied input from the `location` variable and passes it to the `send` method which sends a `GET` request on lines 339-343 in `request.py,` which leads to a server-side request forgery. This issue allows for crafting GET requests to internal and external resources on behalf of the server. For example, this issue would allow for accessing resources on the internal network that the server has access to, even though these resources may not be accessible on the internet. This issue is fixed in version 0.8.4.

</description><guid isPermaLink="false">CVE-2024-22205|2024-01-23T17:21:40.982Z</guid><pubDate>Tue, 23 Jan 2024 17:21:40 +0000</pubDate></item><item><title>CVE-2024-22204|2024-01-23T17:20:29.490Z -- benbusby -- whoogle-search
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22204</link><description>Whoogle Search is a self-hosted metasearch engine. Versions 0.8.3 and prior have a limited file write vulnerability when the configuration options in Whoogle are enabled. The `config` function in `app/routes.py` does not validate the user-controlled `name` variable on line 447 and `config_data` variable on line 437. The `name` variable is insecurely concatenated in `os.path.join`, leading to path manipulation. The POST data from the `config_data` variable is saved with `pickle.dump` which leads to a limited file write. However, the data that is saved is earlier transformed into a dictionary and the `url` key value pair is added before the file is saved on the system. All in all, the issue allows us to save and overwrite files on the system that the application has permissions to, with a dictionary containing arbitrary data and the `url` key value, which is a limited file write. Version 0.8.4 contains a patch for this issue.</description><guid isPermaLink="false">CVE-2024-22204|2024-01-23T17:20:29.490Z</guid><pubDate>Tue, 23 Jan 2024 17:20:29 +0000</pubDate></item><item><title>CVE-2024-22417|2024-02-01T21:00:49.757Z -- benbusby -- whoogle-search
</title><link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-22417</link><description>Whoogle Search is a self-hosted metasearch engine. In versions 0.8.3 and prior, the `element` method in `app/routes.py` does not validate the user-controlled `src_type` and `element_url` variables and passes them to the `send` method which sends a `GET` request on lines 339-343 in `requests.py`. The returned contents of the URL are then passed to and reflected back to the user in the `send_file` function on line 484, together with the user-controlled `src_type`, which allows the attacker to control the HTTP response content type leading to a cross-site scripting vulnerability. An attacker could craft a special URL to point to a malicious website and send the link to a victim. The fact that the link would contain a trusted domain (e.g. from one of public Whoogle instances) could be used to trick the user into clicking the link. The malicious website could, for example, be a copy of a real website, meant to steal a personâ€™s credentials to the website, or trick that person in another way. Version 0.8.4 contains a patch for this issue.</description><guid isPermaLink="false">CVE-2024-22417|2024-02-01T21:00:49.757Z</guid><pubDate>Tue, 23 Jan 2024 17:21:59 +0000</pubDate></item></channel></rss>