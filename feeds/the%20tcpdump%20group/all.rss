<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>CVE Feed for The Tcpdump Group -- all</title>
    <link>https://raw.githubusercontent.com/deepseas/cvelistV5monitor/main/feeds/the%20tcpdump%20group/all.rss</link>
    <description>The latest CVEs for The Tcpdump Group -- all products</description>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <lastBuildDate>Mon, 16 Sep 2024 22:22:37 +0000</lastBuildDate>
    <ttl>60</ttl>
    <item>
      <title>CVE-2020-8037|2024-09-16T20:27:55.571Z -- the%20tcpdump%20group -- tcpdump
</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2020-8037</link>
      <description>The ppp decapsulator in tcpdump 4.9.3 can be convinced to allocate a large amount of memory.</description>
      <guid isPermaLink="false">CVE-2020-8037|2024-09-16T20:27:55.571Z</guid>
      <pubDate>Wed, 04 Nov 2020 17:55:21 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2023-7256|2024-09-03T20:07:34.599Z -- the%20tcpdump%20group -- libpcap</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2023-7256</link>
      <description>In affected libpcap versions during the setup of a remote packet capture the internal function sock_initaddress() calls getaddrinfo() and possibly freeaddrinfo(), but does not clearly indicate to the caller function whether freeaddrinfo() still remains to be called after the function returns.  This makes it possible in some scenarios that both the function and its caller call freeaddrinfo() for the same allocated memory block.  A similar problem was reported in Apple libpcap, to which Apple assigned CVE-2023-40400.</description>
      <guid isPermaLink="false">CVE-2023-7256|2024-09-03T20:07:34.599Z</guid>
      <pubDate>Fri, 30 Aug 2024 23:44:04 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2397|2024-09-03T13:34:59.230Z -- the%20tcpdump%20group -- tcpdump</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-2397</link>
      <description>Due to a bug in packet data buffers management, the PPP printer in tcpdump can enter an infinite loop when reading a crafted DLT_PPP_SERIAL .pcap savefile.  This problem does not affect any tcpdump release, but it affected the git master branch from 2023-06-05 to 2024-03-21.</description>
      <guid isPermaLink="false">CVE-2024-2397|2024-09-03T13:34:59.230Z</guid>
      <pubDate>Fri, 12 Apr 2024 13:22:01 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2397|2024-08-01T19:11:53.569Z -- the%20tcpdump%20group -- tcpdump</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-2397</link>
      <description>Due to a bug in packet data buffers management, the PPP printer in tcpdump can enter an infinite loop when reading a crafted DLT_PPP_SERIAL .pcap savefile.  This problem does not affect any tcpdump release, but it affected the git master branch from 2023-06-05 to 2024-03-21.</description>
      <guid isPermaLink="false">CVE-2024-2397|2024-08-01T19:11:53.569Z</guid>
      <pubDate>Fri, 12 Apr 2024 13:22:01 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2397|2024-04-12T13:22:01.636Z -- the%20tcpdump%20group -- tcpdump</title>
      <link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2397</link>
      <description>Due to a bug in packet data buffers management, the PPP printer in tcpdump can enter an infinite loop when reading a crafted DLT_PPP_SERIAL .pcap savefile.  This problem does not affect any tcpdump release, but it affected the git master branch from 2023-06-05 to 2024-03-21.</description>
      <guid isPermaLink="false">CVE-2024-2397|2024-04-12T13:22:01.636Z</guid>
      <pubDate>Fri, 12 Apr 2024 13:22:01 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-2397|2024-07-31T17:39:31.449Z -- the%20tcpdump%20group -- tcpdump</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-2397</link>
      <description>Due to a bug in packet data buffers management, the PPP printer in tcpdump can enter an infinite loop when reading a crafted DLT_PPP_SERIAL .pcap savefile.  This problem does not affect any tcpdump release, but it affected the git master branch from 2023-06-05 to 2024-03-21.</description>
      <guid isPermaLink="false">CVE-2024-2397|2024-07-31T17:39:31.449Z</guid>
      <pubDate>Fri, 12 Apr 2024 13:22:01 +0000</pubDate>
    </item>
    <item>
      <title>CVE-2024-8006|2024-09-03T19:17:49.301Z -- the%20tcpdump%20group -- libpcap</title>
      <link>https://www.cve.org/CVERecord?id=CVE-2024-8006</link>
      <description>Remote packet capture support is disabled by default in libpcap.  When a user builds libpcap with remote packet capture support enabled, one of the functions that become available is pcap_findalldevs_ex().  One of the function arguments can be a filesystem path, which normally means a directory with input data files.  When the specified path cannot be used as a directory, the function receives NULL from opendir(), but does not check the return value and passes the NULL value to readdir(), which causes a NULL pointer derefence.</description>
      <guid isPermaLink="false">CVE-2024-8006|2024-09-03T19:17:49.301Z</guid>
      <pubDate>Fri, 30 Aug 2024 23:53:11 +0000</pubDate>
    </item>
  </channel>
</rss>
